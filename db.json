{"meta":{"version":1,"warehouse":"5.0.1"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/all.min.css","path":"fontawesome/all.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/brands.min.css","path":"fontawesome/brands.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/assets/odometer-theme-minimal.css","path":"assets/odometer-theme-minimal.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/assets/hbe.style.css","path":"assets/hbe.style.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/duotone.min.css","path":"fontawesome/duotone.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/fontawesome.min.css","path":"fontawesome/fontawesome.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/light.min.css","path":"fontawesome/light.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/regular.min.css","path":"fontawesome/regular.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/sharp-solid.min.css","path":"fontawesome/sharp-solid.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/solid.min.css","path":"fontawesome/solid.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/svg-with-js.min.css","path":"fontawesome/svg-with-js.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/thin.min.css","path":"fontawesome/thin.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-font-face.min.css","path":"fontawesome/v4-font-face.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-shims.min.css","path":"fontawesome/v4-shims.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v5-font-face.min.css","path":"fontawesome/v5-font-face.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/loading.svg","path":"images/loading.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-avatar.svg","path":"images/redefine-avatar.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-favicon.svg","path":"images/redefine-favicon.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.svg","path":"images/redefine-logo.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.ttf","path":"webfonts/fa-brands-400.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.webp","path":"images/redefine-logo.webp","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.woff2","path":"webfonts/fa-brands-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/wallhaven-wqery6-dark.webp","path":"images/wallhaven-wqery6-dark.webp","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/images/wallhaven-wqery6-light.webp","path":"images/wallhaven-wqery6-light.webp","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.woff2","path":"webfonts/fa-duotone-900.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.ttf","path":"webfonts/fa-duotone-900.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.ttf","path":"webfonts/fa-light-300.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.woff2","path":"webfonts/fa-light-300.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.ttf","path":"webfonts/fa-regular-400.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.woff2","path":"webfonts/fa-regular-400.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.ttf","path":"webfonts/fa-sharp-solid-900.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.woff2","path":"webfonts/fa-sharp-solid-900.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.woff2","path":"webfonts/fa-solid-900.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.ttf","path":"webfonts/fa-solid-900.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.ttf","path":"webfonts/fa-thin-100.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.woff2","path":"webfonts/fa-thin-100.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.ttf","path":"webfonts/fa-v4compatibility.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.woff2","path":"webfonts/fa-v4compatibility.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/animated.styl","path":"css/common/animated.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/basic.styl","path":"css/common/basic.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/markdown.styl","path":"css/common/markdown.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/variables.styl","path":"css/common/variables.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/redefine-theme.styl","path":"css/common/redefine-theme.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/archive-content.styl","path":"css/layout/archive-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/article-content.styl","path":"css/layout/article-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-content.styl","path":"css/layout/category-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-list.styl","path":"css/layout/category-list.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-content.styl","path":"css/layout/home-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/categoryList.js","path":"js/layouts/categoryList.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-sidebar.styl","path":"css/layout/home-sidebar.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/tag-content.styl","path":"css/layout/tag-content.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/page.styl","path":"css/layout/page.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/lazyload.js","path":"js/layouts/lazyload.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.eot","path":"fonts/Chillax/Chillax-Variable.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/navbarShrink.js","path":"js/layouts/navbarShrink.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/toc.js","path":"js/layouts/toc.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff","path":"fonts/Chillax/Chillax-Variable.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.ttf","path":"fonts/Chillax/Chillax-Variable.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/chillax.css","path":"fonts/Chillax/chillax.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff2","path":"fonts/Chillax/Chillax-Variable.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.ttf","path":"fonts/GeistMono/GeistMonoVF.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Geist/GeistVF.ttf","path":"fonts/Geist/GeistVF.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Geist/GeistVF.woff","path":"fonts/Geist/GeistVF.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.woff","path":"fonts/GeistMono/GeistMonoVF.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.woff2","path":"fonts/GeistMono/GeistMonoVF.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/GeistMono/geist-mono.css","path":"fonts/GeistMono/geist-mono.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Geist/GeistVF.woff2","path":"fonts/Geist/GeistVF.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Geist/geist.css","path":"fonts/Geist/geist.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/APlayer.min.js","path":"js/libs/APlayer.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/APlayer.min.js.map","path":"js/libs/APlayer.min.js.map","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Swup.min.js.map","path":"js/libs/Swup.min.js.map","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Swup.min.js","path":"js/libs/Swup.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js","path":"js/libs/SwupPreloadPlugin.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js.map","path":"js/libs/SwupPreloadPlugin.min.js.map","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupProgressPlugin.min.js","path":"js/libs/SwupProgressPlugin.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScriptsPlugin.min.js","path":"js/libs/SwupScriptsPlugin.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js","path":"js/libs/SwupScrollPlugin.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js.map","path":"js/libs/SwupScrollPlugin.min.js.map","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Typed.min.js","path":"js/libs/Typed.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupSlideTheme.min.js","path":"js/libs/SwupSlideTheme.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/anime.min.js","path":"js/libs/anime.min.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js","path":"js/libs/mermaid.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js.map","path":"js/libs/mermaid.min.js.map","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/minimasonry.min.js","path":"js/libs/minimasonry.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/odometer.min.js","path":"js/libs/odometer.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/aplayer.js","path":"js/plugins/aplayer.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/hbe.js","path":"js/plugins/hbe.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/pjax.min.js","path":"js/libs/pjax.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/waline.mjs","path":"js/libs/waline.mjs","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/waline.mjs.map","path":"js/libs/waline.mjs.map","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/masonry.js","path":"js/plugins/masonry.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/codeBlock.js","path":"js/tools/codeBlock.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/mermaid.js","path":"js/plugins/mermaid.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/imageViewer.js","path":"js/tools/imageViewer.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/tabs.js","path":"js/plugins/tabs.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/typed.js","path":"js/plugins/typed.js","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/lightDarkSwitch.js","path":"js/tools/lightDarkSwitch.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/localSearch.js","path":"js/tools/localSearch.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/runtime.js","path":"js/tools/runtime.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/scrollTopBottom.js","path":"js/tools/scrollTopBottom.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/tocToggle.js","path":"js/tools/tocToggle.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-block.styl","path":"css/common/codeblock/code-block.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-theme.styl","path":"css/common/codeblock/code-theme.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/highlight.styl","path":"css/common/codeblock/highlight.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/a11y-dark.styl","path":"css/common/codeblock/hljs-themes/dark/a11y-dark.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/light/github.styl","path":"css/common/codeblock/hljs-themes/light/github.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/light/atom-one-light.styl","path":"css/common/codeblock/hljs-themes/light/atom-one-light.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/light/default.styl","path":"css/common/codeblock/hljs-themes/light/default.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/agate.styl","path":"css/common/codeblock/hljs-themes/dark/agate.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/atom-one-dark.styl","path":"css/common/codeblock/hljs-themes/dark/atom-one-dark.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/monokai-sublime.styl","path":"css/common/codeblock/hljs-themes/dark/monokai-sublime.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/github-dark.styl","path":"css/common/codeblock/hljs-themes/dark/github-dark.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/night-owl.styl","path":"css/common/codeblock/hljs-themes/dark/night-owl.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/nord.styl","path":"css/common/codeblock/hljs-themes/dark/nord.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/tokyo-night-dark.styl","path":"css/common/codeblock/hljs-themes/dark/tokyo-night-dark.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/vs2015.styl","path":"css/common/codeblock/hljs-themes/dark/vs2015.styl","modified":1,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/img/404.avif","path":"img/404.avif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/css/index.styl","path":"css/index.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/css/var.styl","path":"css/var.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/img/default.avif","path":"img/default.avif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/img/error_load.avif","path":"img/error_load.avif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/img/flower.gif","path":"img/flower.gif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/js/music.js","path":"js/music.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/js/right_menu.js","path":"js/right_menu.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/js/tw_cn.js","path":"js/tw_cn.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/css/third_party/snackbar.min.css","path":"css/third_party/snackbar.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/css/third_party/tianli_talk.styl","path":"css/third_party/tianli_talk.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/js/covercolor/api.js","path":"js/covercolor/api.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/js/covercolor/ave.js","path":"js/covercolor/ave.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/js/covercolor/local.js","path":"js/covercolor/local.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/img/pwa/favicon.png","path":"img/pwa/favicon.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/img/pwa/favicon_16.png","path":"img/pwa/favicon_16.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/img/pwa/favicon_32.png","path":"img/pwa/favicon_32.png","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/js/search/algolia.js","path":"js/search/algolia.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/js/search/local.js","path":"js/search/local.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/js/third_party/barrage.min.js","path":"js/third_party/barrage.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/js/third_party/envelope.min.js","path":"js/third_party/envelope.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/js/third_party/post_ai.min.js","path":"js/third_party/post_ai.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/js/third_party/waterfall.min.js","path":"js/third_party/waterfall.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/js/third_party/universe.min.js","path":"js/third_party/universe.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/img/default_avatar.avif","path":"img/default_avatar.avif","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-solitude/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/().md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1720919359790},{"_id":"source/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1720919359834},{"_id":"source/Scope.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1720919359835},{"_id":"source/[SPDX.md","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1720919359836},{"_id":"source/.obsidian/app.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1720919359793},{"_id":"source/.obsidian/community-plugins.json","hash":"6f4616b84caa84529f2f3145422e96f461651d16","modified":1720919359795},{"_id":"source/.obsidian/appearance.json","hash":"1295b2ad58584132527aaefbd45d8671b3de988c","modified":1720919359795},{"_id":"source/.obsidian/core-plugins-migration.json","hash":"e363147ebaf80df779e4b499e52a926b4c3cfcdf","modified":1720919359796},{"_id":"source/.obsidian/core-plugins.json","hash":"f99a58c1e4efdf1dbe3c88715ac9474b47df7bf5","modified":1720919359797},{"_id":"source/.obsidian/graph.json","hash":"7b9a78ed7cdba42be9145fbf603f56aef688a818","modified":1720919359798},{"_id":"source/.obsidian/hotkeys.json","hash":"a4b2c369b7e6f8228ea6045ac490437b1a3c32ee","modified":1720919359799},{"_id":"source/.obsidian/workspace.json","hash":"9aa098399c55138dbc9f89458c4c8b10f9fd207c","modified":1720919359833},{"_id":"source/.obsidian/types.json","hash":"414b0e32798590bfe1208f4ac6d41923f2221d68","modified":1720919359832},{"_id":"source/_posts/ALGDataStructure.md","hash":"5e97e19721fdfe67197a424414f83c92a75c397e","modified":1720957659255},{"_id":"source/_posts/APIMutationObserver.md","hash":"efb2409629b40cdc6c202690f0f4b4ccd86bbef7","modified":1720919359849},{"_id":"source/_posts/ALGSort.md","hash":"6ce05e92fe23b30f4ba01c2feabdb55d0e217bbf","modified":1720919359846},{"_id":"source/_posts/MethodologyConfigNpm.md","hash":"c9e7b543712ee3343e4e4bc250da5a21a3b72016","modified":1720919359851},{"_id":"source/_posts/MethodologyFrontendEngineering.md","hash":"d01e8b87331dfab3cb6cb0c3925154260e58819e","modified":1720919359857},{"_id":"source/_posts/MethodologyConfigTS.md","hash":"f65c62aa84149a8cba9d58a9593a32530b0847a1","modified":1720919359855},{"_id":"source/_posts/MethodologyFrontendJSModularity .md","hash":"1857b29198994b7533d9b7ffb5b27e523c09d2d2","modified":1720959540333},{"_id":"source/_posts/MethodologyFrontendHistory.md","hash":"6ae1c1664bf95e1d8d411b7ada497f982fc87ddc","modified":1720919359873},{"_id":"source/_posts/MethodologyJSExcutionProcess.md","hash":"8fccfb07be0ac07620900fdb1239b7cb539274e1","modified":1720919359874},{"_id":"source/_posts/MethodologyStateManagement.md","hash":"20cfb6cb0394ac5b6f5c40f4c0f1041df42432df","modified":1720919359876},{"_id":"source/_posts/MethodologyRefactoring.md","hash":"08cb9323e8be9a63f82d4dcc27bfe0093212ae54","modified":1720919359875},{"_id":"source/_posts/PracticeCallApply.md","hash":"fdd8090dbeca59f979a28dd1dd67463fcc8b50bb","modified":1720919359877},{"_id":"source/_posts/PracticePromise.md","hash":"29da1429b55de4a84d91413dcbd3c2035c73d07b","modified":1720919359879},{"_id":"source/_posts/ReprintAngularOptimization.md","hash":"da39cc90fbfce24f5e6dc1f122f704b91383ee6a","modified":1720919359881},{"_id":"source/_posts/ReprintJSEventLoop.md","hash":"7a52cd5ccfbce45becc675cdc80810418cf6beac","modified":1720919359887},{"_id":"source/_posts/ReprintVueCompositionAPI.md","hash":"3741c4a031e3c1ec80b462d13aeab0948bf86d99","modified":1720919359909},{"_id":"source/_posts/ReprintTypscriptDecorator.md","hash":"4c196839ae47b48202ff772fa9a897b3e5dc5369","modified":1720919359909},{"_id":"source/_posts/ReprintBrowserRender.md","hash":"ccfccde8cfda10947033c2a802b925c920718250","modified":1720919359886},{"_id":"source/_posts/someInterestingQuestions02.md","hash":"3e348ffb92e9331422859927df9c1d603e7c76f1","modified":1720919359916},{"_id":"source/_posts/someInterestingQuestions04.md","hash":"97ff071b678ceef287e637c20972cb15e168fbf7","modified":1720919359919},{"_id":"source/_posts/someInterestingQuestions03.md","hash":"e697dde9e9cfceeea376d9077b4602eb344ec4c0","modified":1720919359918},{"_id":"source/_posts/someInterestingQuestions01.md","hash":"a2b6c0af3aa711cab7fb24813f101a1bc062ca4b","modified":1720919359910},{"_id":"source/_posts/someInterestingQuestions05.md","hash":"a2518f5e8913244164049409a3026bcaecce55b8","modified":1720919359920},{"_id":"source/_posts/someInterestingQuestions06.md","hash":"25f560a32131ba651b8451c5e51f44a633e9e784","modified":1720919359921},{"_id":"source/about/index.md","hash":"ea162a253b966bc581b804046c49d3da911d9ef3","modified":1720919359958},{"_id":"source/categories/index.md","hash":"fa242263c9ac118d411a9154a3849225f40fcf42","modified":1720919359960},{"_id":"source/cv/index.html","hash":"809e99e2a8561c8241490eb262399117320d2763","modified":1720919359962},{"_id":"source/_posts/vueSourceCodeStudy01.md","hash":"d2dda9de392ccf907f3244f6dd0ccd2105cee2ed","modified":1720919359922},{"_id":"source/cv/index.js","hash":"7500b7fc8cf2b363861c1680a2fa9504ebd77dd4","modified":1720919359964},{"_id":"source/_posts/vueSourceCodeStudy02.md","hash":"1e18c38a44309b782b8f62fa6e53f208791e0757","modified":1720919359932},{"_id":"source/_posts/.obsidian/app.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1720919359839},{"_id":"source/_posts/.obsidian/appearance.json","hash":"5f2e696ba749253098516c5bda73b27a6e41d97c","modified":1720919359841},{"_id":"source/_posts/vueSourceCodeStudy03.md","hash":"2405e4c516fe11900469e57ec5360a7233e4f902","modified":1720919359956},{"_id":"source/tags/index.md","hash":"94d404555402bb4ba9dd4f6171ff26e5b30b11c2","modified":1720919359965},{"_id":"source/_posts/.obsidian/core-plugins-migration.json","hash":"dd9fd65472da96729a7f27e9846ab74a5240b581","modified":1720919359842},{"_id":"source/_posts/.obsidian/graph.json","hash":"40b02080c7054fd29d34dc8da0d948ce41a506cc","modified":1720919359844},{"_id":"source/_posts/ALGSort/sort.png","hash":"d56b4ee34471bc6000647878aa93c6c5eb0fe6df","modified":1720919359848},{"_id":"source/_posts/MethodologyConfigNpm/s1.png","hash":"960c66f650fb6e82041d8f92ff5407d2d63bc6e0","modified":1720919359855},{"_id":"source/_posts/.obsidian/core-plugins.json","hash":"f99a58c1e4efdf1dbe3c88715ac9474b47df7bf5","modified":1720919359842},{"_id":"source/_posts/.obsidian/hotkeys.json","hash":"bf21a9e8fbc5a3846fb05b4fa0859e0917b2202f","modified":1720919359845},{"_id":"source/_posts/PracticePromise/s1.png","hash":"c9aa0692e25558749268b2c0a5aa1e5400a48377","modified":1720919359880},{"_id":"source/_posts/MethodologyFrontendEngineering/s1.png","hash":"f614910da7c56417905e7aa5abb54c6f2255500e","modified":1720919359865},{"_id":"source/_posts/.obsidian/workspace.json","hash":"68d6d22178aa2720ba43e7d9a9a490e8c41da421","modified":1720919359845},{"_id":"source/_posts/MethodologyFrontendEngineering/s2.png","hash":"41284a302db60fe0f2865e003d731b34e5c3f7c9","modified":1720919359866},{"_id":"source/_posts/MethodologyFrontendEngineering/s3.png","hash":"b9d84d6ae13d3071402cad6a0e383ff57d5795b6","modified":1720919359867},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop01.png","hash":"7a281cd1d656277c58255d68c46db2d8dbe9e070","modified":1720919359888},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop02.png","hash":"93ff24fbfd93e5b99d529cc00f2149c790644c39","modified":1720919359889},{"_id":"source/_posts/MethodologyFrontendEngineering/s4.png","hash":"97a7c99e4af7153f2d8a2e03a3244575c4d21e35","modified":1720919359869},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop03.png","hash":"7f95e0b62fd9ae0040fab231895410abf9d526b7","modified":1720919359891},{"_id":"source/_posts/MethodologyFrontendEngineering/s5.png","hash":"a9624bdf7f9dc3a3e82ac870c32b6a671f8bacad","modified":1720919359871},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop04.png","hash":"d59c83718dc41c1629890c7d914414f2302e195a","modified":1720919359892},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop06.png","hash":"347ee80e4dc7f343e58b15fedea956e360c1f68d","modified":1720919359894},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop05.png","hash":"7e3a6a6e47d245a5583a48d2936c372aa0d6b71e","modified":1720919359892},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop07.png","hash":"250431ab613bced9bc1eacfec8c9a704d5f1ea72","modified":1720919359896},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop08.png","hash":"cd253aa9ea50a49f7fc8da77253b2cb026c01d37","modified":1720919359897},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop09.png","hash":"ae8162122e5fb292873fcc69c3c16fbb52f95b1e","modified":1720919359898},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop10.png","hash":"84bdb04de43b3bbc1b4d1bdb3c5ecb22581375cf","modified":1720919359900},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop11.png","hash":"bdfa84341a752062610fb3781a6f0a3d108ef7c6","modified":1720919359900},{"_id":"source/_posts/someInterestingQuestions01/q2.png","hash":"ab246fa62b3c3fdf023fb533f7427705e8d2d505","modified":1720919359914},{"_id":"source/_posts/someInterestingQuestions01/q1.png","hash":"51328a31d803cbe54c1986d329ae39a97f0c0852","modified":1720919359912},{"_id":"source/_posts/someInterestingQuestions01/q3.png","hash":"84b813171691c1aee44f99587f2f2ab396b1b072","modified":1720919359915},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop12.png","hash":"540147c664a2eb5dfbaf33da40cfd17426b95f65","modified":1720919359902},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop14.png","hash":"f2b0ee81d2a1a8ae5fc3f64fa68cc7986e425583","modified":1720919359904},{"_id":"source/_posts/vueSourceCodeStudy01/s1-1.png","hash":"9b14b0ac317afa93f041ba91b6776c5dc7c34616","modified":1720919359925},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop13.png","hash":"ef2d72c568f8af879afbc3f3ee56e911bc1ca6a4","modified":1720919359903},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop15.png","hash":"0d9d787008e6b5310d4b99c0ecfb784796d1cc2e","modified":1720919359904},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop17.jpg","hash":"f5d3a3fe0a890abc041f2a9f567935b77f344a68","modified":1720919359908},{"_id":"source/_posts/vueSourceCodeStudy01/s1-4.png","hash":"c67e4bb4da213c6bb7a08a0ae0d9ae55a36cb028","modified":1720919359928},{"_id":"source/_posts/vueSourceCodeStudy02/s2-1.png","hash":"bb5f44da3cf6b932e2ac62fab6d46d106d6ed640","modified":1720919359936},{"_id":"source/_posts/vueSourceCodeStudy01/s1-3.png","hash":"05bcd6d0a3b57aed291369a4bb25eb72b2f6b1f5","modified":1720919359928},{"_id":"source/_posts/vueSourceCodeStudy01/s1-2.png","hash":"a76fe14bb6e97de00b85910155a2626623e477c5","modified":1720919359927},{"_id":"source/_posts/vueSourceCodeStudy01/s1-5.png","hash":"bbb455e40091e15b9971c53bdc16647aaa9fcbfc","modified":1720919359929},{"_id":"source/_posts/vueSourceCodeStudy02/s2-11.png","hash":"ea21eca2b7ad3cdba997cf6c1794476b4499ba78","modified":1720919359939},{"_id":"source/_posts/vueSourceCodeStudy02/s2-14.png","hash":"56f15fbb8bd9d33872a72040afb3c06594e72bf4","modified":1720919359942},{"_id":"source/_posts/vueSourceCodeStudy02/s2-3.png","hash":"b15ed7c05f54345ed7f60e9c601445a8cf84f64d","modified":1720919359947},{"_id":"source/_posts/vueSourceCodeStudy02/s2-4.png","hash":"8a88ec1634043270e224c53bcd105514a0ed14df","modified":1720919359948},{"_id":"source/_posts/vueSourceCodeStudy02/s2-5.png","hash":"077b04a0d1bd5f4f9bb384db7ad4924685182348","modified":1720919359951},{"_id":"source/_posts/vueSourceCodeStudy02/s2-6.png","hash":"1146414d813743c20228f0c2517be2a412f896eb","modified":1720919359952},{"_id":"source/_posts/vueSourceCodeStudy02/s2-7.png","hash":"d5276f1c2a20f569dcd3f63e1b6360ab0fd8236c","modified":1720919359953},{"_id":"source/.obsidian/plugins/table-editor-obsidian/data.json","hash":"69dc45d5d019547390a3220ac6fdf02d4ec30b07","modified":1720919359810},{"_id":"source/.obsidian/plugins/table-editor-obsidian/manifest.json","hash":"4a47db68668b7ee56e09326a5cc4ff5a09bbf4b1","modified":1720919359826},{"_id":"source/.obsidian/themes/AnuPpuccin/manifest.json","hash":"576852b03734a67b4366e909e0d3730331f10d9e","modified":1720919359829},{"_id":"source/.obsidian/plugins/markdown-prettifier/manifest.json","hash":"96a49517c862847d5f6810056ff115332e091ad0","modified":1720919359808},{"_id":"source/.obsidian/plugins/table-editor-obsidian/styles.css","hash":"771db6139ce98a94d66aec40f13e90e0feb2b73a","modified":1720919359827},{"_id":"source/.obsidian/plugins/markdown-prettifier/styles.css","hash":"5dfd107bb72fd61128ca9ed81d206f9bf3a5d18b","modified":1720919359808},{"_id":"source/_posts/MethodologyFrontendEngineering/mono.png","hash":"009da9c08d63d2ea43923588adad61698be6cb11","modified":1720919359859},{"_id":"source/_posts/ReprintAngularOptimization/angular-performance01.png","hash":"3bb1ec112aca45abd29d94e0e8767d820591dea5","modified":1720919359883},{"_id":"source/_posts/MethodologyFrontendEngineering/s4-1.png","hash":"d12c26eac9bc105c2997689396daff080453d28f","modified":1720919359869},{"_id":"source/_posts/vueSourceCodeStudy01/s0.jpg","hash":"99a53f8d251a7786da76118619b8c6c8ef94d7c8","modified":1720919359923},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop16.png","hash":"a82d6eae47b8187e8bad6e42d33c1e43fb399cac","modified":1720919359907},{"_id":"source/_posts/vueSourceCodeStudy02/s2-10.png","hash":"ba6e970962ef439ade2d69a57c23f460702738ac","modified":1720919359937},{"_id":"source/_posts/vueSourceCodeStudy02/s2-12.png","hash":"572a236f947710c79575e3e3cdd5617d32df3bfa","modified":1720919359940},{"_id":"source/_posts/vueSourceCodeStudy01/s1-6.png","hash":"b080e254aa2f094fe3bd8cbc6bd8dc0c9a1005b2","modified":1720919359931},{"_id":"source/_posts/vueSourceCodeStudy02/s2-13.png","hash":"c909a1adf9e4363473e8b311635c48436b866e8b","modified":1720919359941},{"_id":"source/_posts/vueSourceCodeStudy02/s2-2.png","hash":"7edb359a25e8e41d6fa1cad82cd775037139d9c3","modified":1720919359946},{"_id":"source/_posts/vueSourceCodeStudy02/s2-8.png","hash":"4df0982ea7d09c073e403850eb074166eafa127c","modified":1720919359954},{"_id":"source/_posts/vueSourceCodeStudy02/s2-9.png","hash":"406ba4a71c8c0762c2d53ce34df7019d90427845","modified":1720919359955},{"_id":"source/_posts/vueSourceCodeStudy02/s0.png","hash":"e362937b7163f1d04576aeb0e11d8012b4a26e4b","modified":1720919359934},{"_id":"source/_posts/vueSourceCodeStudy02/s2-15.png","hash":"c03cc2fa65bb8bed84a677e1ddfb24a53d927b46","modified":1720919359945},{"_id":"source/_posts/MethodologyConfigNpm/s0.png","hash":"31ae8793860e559ba52985328f5b9daf9f79ebf3","modified":1720919359854},{"_id":"source/.obsidian/themes/AnuPpuccin/theme.css","hash":"c0ed42c3396a934dd99189c0c905a4181a5bafbd","modified":1720919359832},{"_id":"source/_posts/MethodologyFrontendEngineering/s0.png","hash":"111c8e192ddc0d88aa08e287a69390262ea56301","modified":1720919359863},{"_id":"node_modules/hexo-theme-redefine/CODE_OF_CONDUCT.md","hash":"61a6276ef54989b7a1325f3ecb3183a4dfdf50cb","modified":1720887619985},{"_id":"node_modules/hexo-theme-redefine/CONTRIBUTING.md","hash":"c6ef834f602b7ae02e2863a2a857e0ce8d392f15","modified":1720887619987},{"_id":"node_modules/hexo-theme-redefine/DONATION.md","hash":"f785b1fc3e22c6d9956716ccd5f2b98315ca6c12","modified":1726072380662},{"_id":"node_modules/hexo-theme-redefine/LICENSE","hash":"1de7bacb4fbbd7b6d391a69abfe174c2509ec303","modified":1720887616994},{"_id":"node_modules/hexo-theme-redefine/README.md","hash":"532badccacd8b17376b54d1042eee9599e8bb39f","modified":1720887619997},{"_id":"node_modules/hexo-theme-redefine/README_zh-CN.md","hash":"c670a196349beb3c7512977ab650cac5ca3dcfb3","modified":1720887619992},{"_id":"node_modules/hexo-theme-redefine/_config.yml","hash":"d93d4ab2c2a1ce166bd7460dd81351254448f6de","modified":1726072404089},{"_id":"node_modules/hexo-theme-redefine/README_zh-TW.md","hash":"2fe52c3da506f864f536097c735179b00d11c341","modified":1720887619994},{"_id":"node_modules/hexo-theme-redefine/package.json","hash":"9e4427174903f2fea0d365f7f1f071c1db933fd5","modified":1726072376615},{"_id":"node_modules/hexo-theme-redefine/languages/en.yml","hash":"4cc09fff6895fd864044d7c11f8638ab92d98453","modified":1726072404095},{"_id":"node_modules/hexo-theme-redefine/layout/404.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1720887619076},{"_id":"node_modules/hexo-theme-redefine/tailwind.config.js","hash":"27227462bb6dc16b57fcc75baa17e354f841b6e4","modified":1720887619819},{"_id":"node_modules/hexo-theme-redefine/languages/zh-TW.yml","hash":"218fcc4db1d2211bd9839895d7ad6b70a5d50897","modified":1726072404105},{"_id":"node_modules/hexo-theme-redefine/layout/archive-content.ejs","hash":"2adfbb9954af9fcf2047c8abc85d4664d45167af","modified":1720887619109},{"_id":"node_modules/hexo-theme-redefine/vercel.json","hash":"357c1fd2678f8ae4a9a852a1a6888c8eca774551","modified":1720887619841},{"_id":"node_modules/hexo-theme-redefine/languages/ja.yml","hash":"6da103d89685ddf6da4c367efd699c6fc1a15f84","modified":1726072404099},{"_id":"node_modules/hexo-theme-redefine/languages/zh-CN.yml","hash":"67d93982759d79f38afadeef871c80b08c21c7ca","modified":1726072404104},{"_id":"node_modules/hexo-theme-redefine/layout/archive.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1720887619139},{"_id":"node_modules/hexo-theme-redefine/layout/article-content.ejs","hash":"e02039c24dd65a0ea6248beb9c0042e5012ae1c7","modified":1726072375198},{"_id":"node_modules/hexo-theme-redefine/layout/category-content.ejs","hash":"5c4fdc9c2b7f225edb7ebb2abf6925b81c5e698f","modified":1720887619223},{"_id":"node_modules/hexo-theme-redefine/layout/category-list.ejs","hash":"fe2f2f6799c558f804517c9657fc62a7868ef754","modified":1726072375258},{"_id":"node_modules/hexo-theme-redefine/layout/category.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1720887619246},{"_id":"node_modules/hexo-theme-redefine/layout/index.ejs","hash":"f5fee4e079a9c2c23059ebde4cd89ec723e310c6","modified":1720887619405},{"_id":"node_modules/hexo-theme-redefine/layout/tag-content.ejs","hash":"6134aa2a112b9d8daa3eeaf9a1ee41bbeaf7eb24","modified":1720887619512},{"_id":"node_modules/hexo-theme-redefine/layout/layout.ejs","hash":"e13ebcba0323e0641457d04009c6b548b914ef3d","modified":1720887619414},{"_id":"node_modules/hexo-theme-redefine/layout/page.ejs","hash":"fdac6ee9c9901a3b5f54cae568c87e197f0ed0ed","modified":1726072375279},{"_id":"node_modules/hexo-theme-redefine/scripts/dataHandle.js","hash":"3a069d3f529dceed3fd98e99d5940989f1087305","modified":1720887619674},{"_id":"node_modules/hexo-theme-redefine/layout/tag.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1720887619519},{"_id":"node_modules/hexo-theme-redefine/layout/_meta/article-copyright.ejs","hash":"8e97d76ded33d1e334c376451e2f3d5fd177a958","modified":1720887619169},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/footer.ejs","hash":"e97bb31749d8b29177aeb743429512fa5033e60c","modified":1720887619286},{"_id":"node_modules/hexo-theme-redefine/layout/tags.ejs","hash":"8456f112fc12bbb1c83cd190d0ce83ee474bd297","modified":1720887619532},{"_id":"node_modules/hexo-theme-redefine/layout/_meta/article-info.ejs","hash":"1d551beb7cc47d6c841ce63a7f0f0ffb30c1770b","modified":1720887619182},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/404-template.ejs","hash":"b37c73fe90e6df5c715d324a9daa545fd7ec97e4","modified":1726072375192},{"_id":"node_modules/hexo-theme-redefine/layout/_meta/home-article.ejs","hash":"b54a0df26341fa5f26a6e1eedb91cd11014d50c5","modified":1720887619342},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/head.ejs","hash":"5709f10c83c7634a7b57b66c211c9ce1df93147e","modified":1726072375267},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/home-background.ejs","hash":"dd120259ab091b8087d0194ea2291676556efad8","modified":1720887619353},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/home-banner.ejs","hash":"5cc6d0a703c207e86c9def16c0885ec69b3c8658","modified":1720887619367},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/home-content.ejs","hash":"c8bd156d189ad3bb01ff5c7154700b1d87d7368c","modified":1726072375271},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/home-sidebar.ejs","hash":"976d24d01194a9340957617db24b30f63c1ba66b","modified":1720887619387},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/bug-chinese.yml","hash":"5616b1ba5ddcd91755fce55fdb6d13022e5d39c0","modified":1720887620408},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/navbar.ejs","hash":"bc2aa13a6bbb12eb7a4c0d7e5f1df965a2bde311","modified":1720887619439},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/page-template.ejs","hash":"5d03f543ae291598ee227af758da73304a51633e","modified":1720887619447},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/scripts.ejs","hash":"fd9929363ec3eaf620f1295438cd91153ce49fd2","modified":1726072375285},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/aliyun-cdn-publish.yml","hash":"18975c5422509b0fb7c3b6ddd788eac65802781a","modified":1720887620405},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/preloader.ejs","hash":"20056124ca37a56fa68802012136771daafa99a1","modified":1726072375283},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/bug-english.yml","hash":"23bcdb79064f0e967258be662777c3a424140782","modified":1720887620410},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/enhancement-chinese.yml","hash":"b55c4e79ea4946318324c79b8be61a8ae16cc5c9","modified":1720887620415},{"_id":"node_modules/hexo-theme-redefine/.github/ISSUE_TEMPLATE/enhancement-english.yml","hash":"e43dc9d37f8ad5cdfd12aacf6f85b71346ae6e9b","modified":1720887620417},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/npm-publish.yml","hash":"46bdc96146a893148bfbc37e47881aa25769d32c","modified":1720887620423},{"_id":"node_modules/hexo-theme-redefine/layout/_plugins/aplayer.ejs","hash":"c8f275cdbbe14b4673c69f7c1463b1f830ec8e40","modified":1720887619095},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/encrypt.js","hash":"bf6b90842991a25af590af76f10d7164ea34abcb","modified":1726072375669},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/preview-deployment.yml","hash":"7fa8860dd2ba4ffc11fbfa1a7d57140af2a0abf0","modified":1726072404101},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/production-deployment.yml","hash":"d411d426c6df79ac7e487401f0f11206c245d1c1","modified":1720887620428},{"_id":"node_modules/hexo-theme-redefine/layout/_plugins/swup.ejs","hash":"9fbfd2872dfbe92ec715357d5238647987d8cbdf","modified":1720887619503},{"_id":"node_modules/hexo-theme-redefine/.github/workflows/stale-issues.yml","hash":"e51a46d8af88087fe7512885ec3a87df753c3776","modified":1720887620431},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/imgHandle.js","hash":"b396fe7b6cbc331f2952aa7561f96c1f250d8c52","modified":1720887619701},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/lazyloadHandle.js","hash":"f8ae44311e6463e887c07a41910ebade8766bac2","modified":1720887619708},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/archive-list.ejs","hash":"6cdd55f46ee3d161b7a70e20bdb261e2c88d1cf5","modified":1726072375196},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/linkHandle.js","hash":"7d8cb128dbfed1a4ef9b07142a63ba0c6c383628","modified":1720887619716},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/friends-link.ejs","hash":"bacaf6f0e958fa7d9be17a59d3a8bae4b9119501","modified":1720887619298},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/stylHandle.js","hash":"8a8bf069ce096bd7b42952c8e50c3c89758cbc13","modified":1720887619794},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/tableHandle.js","hash":"c500c45cd9221788df1f31939c5399eabb62ebb5","modified":1720887619812},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/local-search.ejs","hash":"72c9acca0280f0e63e6a5d31618dd2707bdbec3f","modified":1720887619423},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/masonry.ejs","hash":"6b8ec5cff3dcf9f494b32237e6911c6e1e9dd9a1","modified":1720887619431},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/essays.ejs","hash":"5c694b92789c6e5f0a69f6f6ae9a1c530eb4bf2e","modified":1726072375262},{"_id":"node_modules/hexo-theme-redefine/scripts/events/404.js","hash":"169245d7b2af1ff401cf76e718c28b4e38f637c7","modified":1720887619581},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/image-viewer.ejs","hash":"beb3dec5e08856a29d585fe0eb94a8a6ddade4dd","modified":1720887619396},{"_id":"node_modules/hexo-theme-redefine/scripts/events/welcome.js","hash":"c5f18e783b81737faf0ea3ab3d082f1895422a3b","modified":1726072376614},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/paginator.ejs","hash":"a237e7b858e0cf32ca67553d540f7c5f7239a8d0","modified":1720887619462},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/post-tools.ejs","hash":"c2d193e84e0781423ce1c018ee2be1116359d694","modified":1720887619468},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/progress-bar.ejs","hash":"4cab094eafc72b19662a7c9eb888e632d7bb15e7","modified":1720887619479},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/side-tools.ejs","hash":"3b6b75a902ba673f8f0a144db63bd144d0d5b648","modified":1720887619491},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/brands.min.css","hash":"5119c35bbd273d2ea2501997827f6d644da93164","modified":1720887618277},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/tagcloud.ejs","hash":"533360cebc8bf592dd156de9cac57c92648e86c1","modified":1726072375290},{"_id":"node_modules/hexo-theme-redefine/layout/_widgets/toc.ejs","hash":"46ef94dca9be59d163f6b4cba16e1695e8020bc3","modified":1720887619538},{"_id":"node_modules/hexo-theme-redefine/source/assets/odometer-theme-minimal.css","hash":"793c31feb38e241a5ff6ecc5e65e61751507d728","modified":1720887618845},{"_id":"node_modules/hexo-theme-redefine/source/assets/hbe.style.css","hash":"29be8fc47be885e9954e310cbc68dfadd3b4cee6","modified":1720887618806},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/light.min.css","hash":"18a176eb2486db4e938e568083fa578b641ccc83","modified":1720887618827},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/regular.min.css","hash":"d27c4fed54dacff688010e51f611d950dd6e0aca","modified":1720887618863},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/sharp-solid.min.css","hash":"7d1a13c6b8178b29f5bcb1a639a1998fc9de16c4","modified":1720887618879},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/thin.min.css","hash":"3d46be31379b07ffb24d69c6c915725eaa2e89e9","modified":1720887618975},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/solid.min.css","hash":"e727feabedb171fb0b398151870d7739ef4e2432","modified":1720887618896},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/articleRecommend.js","hash":"b9ede93bfd16af13871625d2d127bf79d99724d1","modified":1720887619624},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/autoCanonical.js","hash":"f3ea74759129c71041371a1d77c687eb6aa88d3a","modified":1720887619629},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/seoGenerate.js","hash":"e0059a60cc5978be6792dcf795a2ece3a509f41a","modified":1720887619792},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/svg-with-js.min.css","hash":"f4c08e37c4d44b3ed7a3f377d1cb5d7fca4d04bc","modified":1720887618959},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/configExport.js","hash":"c1e5b36a8d8e97218c8cc1aab77ec38d5457c846","modified":1720887619668},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/themeHelpers.js","hash":"bf089568e8b7218f56f2a8cb74af5377ad79f9ac","modified":1726072376608},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-font-face.min.css","hash":"0be987628c8b485b39f064da41c90f15c0596c1f","modified":1720887618997},{"_id":"node_modules/hexo-theme-redefine/scripts/helpers/walineConfig.js","hash":"9f2c3d6c4c7cf6212d28be0729816cd66921bd67","modified":1720887619835},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v4-shims.min.css","hash":"96f037860b8e9b59af8e47571ea98791616dbfd8","modified":1720887619017},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/btn.js","hash":"aa7a34ff5fb0a624163c38fffe0746cef44d2ea3","modified":1720887619639},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/v5-font-face.min.css","hash":"260ea7a5e0b89963a5dcf2600a4decdf0f408f3f","modified":1720887619032},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/btns.js","hash":"a91492e772287114527a3fbc85f0c7c1c1b15eb3","modified":1720887619643},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/folding.js","hash":"cfa6646c1350c557430149bd52578c6cac59063b","modified":1720887619684},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/note-large.js","hash":"b3e19b9a5c57e3e029bf9ead84aac750f799a9b3","modified":1720887619778},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/tabs.js","hash":"74e3b0cdd009206f7b78b04dcb96eccd86e7a996","modified":1720887619814},{"_id":"node_modules/hexo-theme-redefine/source/css/style.styl","hash":"d9450b06a5391ba6f62690bfef2071a1c8e7e893","modified":1720887620101},{"_id":"node_modules/hexo-theme-redefine/source/images/loading.svg","hash":"938c2a41c8ba18e37ed659e481696e40a4c8f3a4","modified":1720887620127},{"_id":"node_modules/hexo-theme-redefine/source/images/avatar.jpeg","hash":"3498dfe2e4ab38489258f337f4111992b326bab5","modified":1720886834509},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-avatar.svg","hash":"d0d20061bda08894a82d7691b660be7c6aaa0608","modified":1720887620129},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-favicon.svg","hash":"420f930a1df64a3c4391ff80326a8a2d7d5a6418","modified":1720887620132},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.svg","hash":"472776b6f013aad44706fee6c94201c96ee83932","modified":1720887620133},{"_id":"node_modules/hexo-theme-redefine/source/images/bg01.webp","hash":"047bec81d1c202639a25680d12feeecbd1a717ba","modified":1720886834510},{"_id":"node_modules/hexo-theme-redefine/scripts/modules/note.js","hash":"8fc9f2e7d78fe2d1644828d8a79e2c48597f6103","modified":1720887619781},{"_id":"node_modules/hexo-theme-redefine/source/images/redefine-logo.webp","hash":"0a07e3fb6d9125dee44798c8c110187b16fb42a9","modified":1720887620272},{"_id":"node_modules/hexo-theme-redefine/source/images/wallhaven-wqery6-dark.webp","hash":"d0066e0b025ae748448a3d6a96165d45a55d2f22","modified":1720887620275},{"_id":"node_modules/hexo-theme-redefine/source/images/wallhaven-wqery6-light.webp","hash":"d25389973d0359b78f1e9c74a850ef425690ba40","modified":1720887620280},{"_id":"node_modules/hexo-theme-redefine/source/js/utils.js","hash":"00fe71414bf6a95bd4438cb301cf9096df90c46c","modified":1720887619833},{"_id":"node_modules/hexo-theme-redefine/source/js/main.js","hash":"9d1d5167d8b966786268841abdf3c1639fd6d13a","modified":1720887619729},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.woff2","hash":"d02b1adc81fd5bec023e25a7770779b99d6dd742","modified":1720887620390},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-v4compatibility.ttf","hash":"b54531dd09c5089eb93b12ce8f90ff521855ff8a","modified":1720887620258},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/comment.ejs","hash":"e0c2e22351d2740e7f7584028a9ea7c87f26372f","modified":1720887619260},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/giscus.ejs","hash":"5a20975c17daeed5a602dedd0682a29d7c56e42f","modified":1720887619308},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/twikoo.ejs","hash":"e052bcfb084ba614ff1e16a6aad204750fbb7947","modified":1726072375293},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/waline.ejs","hash":"35239e49743c6b7f40014bd753bff9c415b5fcbb","modified":1720887619553},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/sidebar-components/author.ejs","hash":"422aed0f3f67529c1ea87ee43f8f680ffc531b45","modified":1720887619198},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/comments/gitalk.ejs","hash":"6400a4ae3e8db8c1d1d0ae6abb9562485e1c7e08","modified":1726072375266},{"_id":"node_modules/hexo-theme-redefine/scripts/filters/lib/hbe.default.js","hash":"fee2c92011ef007121b992193bbab0f3b196d873","modified":1720887619690},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/sidebar-components/avatar.ejs","hash":"47cd8318471493c82f5e5983550145d4fd0a2ddc","modified":1720887619211},{"_id":"node_modules/hexo-theme-redefine/source/assets/build/styles.css","hash":"7fce3d8245ba8d012d32870baddc870860e512fc","modified":1720887618935},{"_id":"node_modules/hexo-theme-redefine/layout/_partials/sidebar-components/statistics.ejs","hash":"4329363d232de541e1cb8f24eb59c1a8bacc9b9c","modified":1720887619497},{"_id":"node_modules/hexo-theme-redefine/source/css/common/animated.styl","hash":"ab52b066c427cee62d67e4da136878114c7b1afe","modified":1720887620014},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/archive-content.styl","hash":"4e329547447c716c986e0b4a4f54afc59fc6b486","modified":1720887620024},{"_id":"node_modules/hexo-theme-redefine/source/css/common/markdown.styl","hash":"19dbca4623d9fc7005d4a3447eb5a3b669cb8425","modified":1720887620077},{"_id":"node_modules/hexo-theme-redefine/source/css/common/basic.styl","hash":"0493e7ae8c2b07cf1172fa1b68ea1ec74795878b","modified":1720887620035},{"_id":"node_modules/hexo-theme-redefine/source/css/common/variables.styl","hash":"233cce0c26fb59327a1a308a869aeb6faf4782f8","modified":1720887620121},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/article-content.styl","hash":"2328b11599e30e84aa3e801e177f11ad45abc0f4","modified":1720887620029},{"_id":"node_modules/hexo-theme-redefine/source/css/common/redefine-theme.styl","hash":"ff099b1959829e3070e5077c4a3b13e1c1573e79","modified":1720887620094},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/categoryList.js","hash":"eb1af2cd0726f56ff7861222ea543315fe295a17","modified":1720887619653},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-content.styl","hash":"4f9a5559b5269ec74b5f49ac113268f747bf0243","modified":1720887620038},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/category-list.styl","hash":"d33a8d0e8f2d58d759bf7b9da69c2aa6a0d9f433","modified":1720887620041},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-content.styl","hash":"3f6900c804c9e9d5a8009cbe974a0e3eb88549a2","modified":1720887620068},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/lazyload.js","hash":"c06323d68bbdebbb685db5010e7655b8ed0caf42","modified":1720887619704},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/navbarShrink.js","hash":"3e80bf9ef719b2ddb2d1c4b67eb169d2ef52dbb8","modified":1720887619774},{"_id":"node_modules/hexo-theme-redefine/source/js/layouts/toc.js","hash":"7a768982f6cb1f40552cce063d5743fe862db762","modified":1720887619823},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/home-sidebar.styl","hash":"cadd9a9197073cd499e0df32de8abd0ad3c694bb","modified":1726072381029},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/tag-content.styl","hash":"6c9ec582c1d8699bdff5a4cd1524121cc6ca8522","modified":1720887620110},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff","hash":"fc0e791429c274c4c9312d810e7ae9503cab34ab","modified":1720887620283},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/page.styl","hash":"e5c0b44623d18d0c2674069b3796546dd9857b8d","modified":1720887620085},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/chillax.css","hash":"210179f53c6bce91a12ca6db9129184cc1549c36","modified":1720887618363},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.woff2","hash":"fc5d99b40db9deca7d151f9bd16b96ff160828b7","modified":1720887620296},{"_id":"node_modules/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.woff2","hash":"11e9a061ce255fc4cc45ac3eeb8cab09a49f5ccc","modified":1720887620393},{"_id":"node_modules/hexo-theme-redefine/source/fonts/GeistMono/geist-mono.css","hash":"b89d5af7e04df579c8ad62c0ea445ff7d16eec11","modified":1720887618706},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Geist/geist.css","hash":"17f37a09d6192f06b2190f8319114238b0a2ec8c","modified":1720887618760},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Geist/GeistVF.woff2","hash":"772998a8569a6caa04927d876fbe9e0fb859658b","modified":1720887620398},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1720887619613},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Swup.min.js","hash":"cc054d34e74a1feecfae75064f6a4d6107607396","modified":1720887619798},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js.map","hash":"40513fec1323b601667876a97a9ef8a0c88bff63","modified":1720887619950},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupProgressPlugin.min.js","hash":"fd30fe1c43072017f67bbaac18b962a5ac218711","modified":1720887619804},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupPreloadPlugin.min.js","hash":"d911512891ecbe1935203bcd3d93427ad75e45c8","modified":1720887619800},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScriptsPlugin.min.js","hash":"b17f3434035f1339d6f9cd5c8a055d2a1b6602e9","modified":1720887619805},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js","hash":"6c3afca9bb98f79d14516c093f27e3e50a3fd82e","modified":1720887619808},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupScrollPlugin.min.js.map","hash":"63cf04ba556b256379e103ef7d3ba12d629449a4","modified":1720887619959},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/SwupSlideTheme.min.js","hash":"e9d143780e879d958164b1356b7f918ec25e838a","modified":1720887619810},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Typed.min.js","hash":"e8ce2b674a637b0c0396a3106c1aedf10186249c","modified":1720887619831},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1726072375598},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/minimasonry.min.js","hash":"9681cc509cb8aa733d36aad032e6e8acdb33c08c","modified":1720887619770},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/odometer.min.js","hash":"fe5beb60997c84ab2f91b54535c4221443cdd21f","modified":1720887619784},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/aplayer.js","hash":"1b7d9dff8db52b14825775fd55054c6adf269bf7","modified":1720887619605},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/hbe.js","hash":"f7bd9258359dc8f70c6faec3f4fe22a1852d9bf1","modified":1726072375673},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/masonry.js","hash":"92734a30a21f8b16f20aa75208f6c082890275fb","modified":1720887619733},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/pjax.min.js","hash":"3d796e5be9cdd4067c94e190ea2482d7fdb4856c","modified":1720887619787},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/codeBlock.js","hash":"344e6c83e6ffda22f6e5bc724d603066b49a7d8b","modified":1720887619663},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/mermaid.js","hash":"303254d382869ed618025fcb328426bd10314583","modified":1720887619736},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/imageViewer.js","hash":"33c4e4a28cf66be0cb3f181acae082a5a5404a89","modified":1726072375674},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/localSearch.js","hash":"f6e59f65c676457198c2cf5d78bd06052499ee38","modified":1720887619722},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/lightDarkSwitch.js","hash":"97b7e68f871dc218fceca77b85ac051c7c6306af","modified":1720887619711},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/tabs.js","hash":"964ec5c25a8d78763ba2ba9bfbd5b1b49ed05381","modified":1720887619817},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/aplayer.styl","hash":"20b9b774e75e7a44cc4bdf1cbefe67d98d9f3bb7","modified":1720887620019},{"_id":"node_modules/hexo-theme-redefine/source/js/plugins/typed.js","hash":"f46f636a32e7569a9ff8b8b301bf860e598bd4fe","modified":1726072376610},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-block.styl","hash":"0593c3555640bb9132caaccac9821225ea3b97c8","modified":1720887620045},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/buttons.styl","hash":"18bd3c1d00e2cc6416cef69433b207ae5c947ba1","modified":1720887620037},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/code-theme.styl","hash":"ea4a23248e630ade0ea7b0b5b610374c44b9edfa","modified":1726072381018},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/highlight.styl","hash":"d22c8798ea5a6273f7f4d8a717373816c315f272","modified":1726072381026},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/runtime.js","hash":"eb0374b6f033f7ac25f49b1b079aa163e14b0fcd","modified":1720887619789},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/tocToggle.js","hash":"c2224ff0370fcf109e94194613b9480a3913c82d","modified":1720887619826},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/404.styl","hash":"16215f6fe664d1ddc5744a626405bc774dc30f70","modified":1720887620010},{"_id":"node_modules/hexo-theme-redefine/source/js/tools/scrollTopBottom.js","hash":"9e54fa4310bb98ea5ba61780a9ef56d05d475203","modified":1720887619791},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/folding.styl","hash":"b5e5c2407eb83ae4b3ee4ed73490dcd41edef705","modified":1720887620057},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/archive-list.styl","hash":"4d9d1bbfbf7fcbb900e8f33e0c8e5b7f6ee97a43","modified":1726072381004},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/notes.styl","hash":"37b2a4a0669414c74498ed0ecae873c90b15fe6e","modified":1720887620080},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/article-copyright-info.styl","hash":"12fad2f674e8a7ad009cabecf4e98b65d5ed8b1e","modified":1720887620031},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_modules/tabs.styl","hash":"fb5f2f223f7d4ed86d3693fdc0977362f456212e","modified":1720887620107},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/home-banner.styl","hash":"39b3753f86bf30b6eb5276cc2a2aa43e7729a303","modified":1720887620066},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/footer.styl","hash":"b9028c74a9f75536d5a7cee77a25a5d77469515a","modified":1720887620059},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/article-meta-info.styl","hash":"1f680910751b36c4445a48c5a48eda3187412eaf","modified":1720887620033},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/image-viewer.styl","hash":"6c8eeb7a96cae110cd9a684a3a5076148b8154d8","modified":1720887620072},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/local-search.styl","hash":"a9c99c57b27afbe7f00f1f14f0e46c41748affb5","modified":1720887620073},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/navbar.styl","hash":"87563a84c25428c7ba8316a8a0fe3ab7a59516d5","modified":1726072381034},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/paginator.styl","hash":"53421b731f3d7ed34a3a4c87405e06ae3d6519e0","modified":1720887620087},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/post-tools.styl","hash":"d602c2fe191d2c639f7cd8c4d0ee618f8c80f5c1","modified":1720887620089},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/page-template.styl","hash":"c57dccb2fdc13fc7bceb730c7b0eda9590557bd9","modified":1720887620083},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/progress-bar.styl","hash":"d3715280d9b62d89ccd1b79ab5e5f030669f4d88","modified":1720887620091},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/comment.styl","hash":"71529ec72f356c78f75a752e5400c1197aa5ea96","modified":1720887620054},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/toc.styl","hash":"13949981a5afa2b0483da1836af5999d992961f9","modified":1720887620116},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/tagcloud.styl","hash":"756f84cf4ac8c21a169c60c8f227954a09218bee","modified":1720887620113},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/side-tools.styl","hash":"995982b8c228f7386d352042f64587d06663716e","modified":1720887620096},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/gitalk.styl","hash":"85f26189ec6dee13a0a743687e7b5391f170c33f","modified":1720887620061},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/twikoo.styl","hash":"448cbc045bcffa2d666094b81dd99eb980676fff","modified":1720887620119},{"_id":"node_modules/hexo-theme-redefine/source/css/layout/_partials/comments/waline.styl","hash":"0663e8e50eff65afb4dbcbc7c4758d8acdd1d368","modified":1720887620125},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.woff2","hash":"a358912d781e6249a8d291e4ce9ebd0a9ab9452e","modified":1720887620301},{"_id":"node_modules/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.ttf","hash":"d72ec9d729305fc24f38e1ba69174e93b700cd69","modified":1720887620265},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Geist/GeistVF.ttf","hash":"9a531509e4e768e9102d11f5d7d293e3f04d9c64","modified":1720887620270},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Geist/GeistVF.woff","hash":"d06c767b3837999a8b98426e4eb16ca0a8080880","modified":1720887620292},{"_id":"node_modules/hexo-theme-redefine/source/fonts/GeistMono/GeistMonoVF.woff","hash":"fd8c986a8767d59a36e2d194299466720c916ee2","modified":1720887620288},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/Swup.min.js.map","hash":"f74755d9318a86939791027767f631472b876207","modified":1720887619940},{"_id":"source/.obsidian/plugins/markdown-prettifier/main.js","hash":"cce189e37fc4ecb677eac177c9e1f7057c3386a2","modified":1720919359807},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/fontawesome.min.css","hash":"44e6d666b45a6875e4fce11159876129e7a1cceb","modified":1720887618655},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-brands-400.ttf","hash":"ba9322d66c19f635e15e458cc39fcb509818332f","modified":1720887620150},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.eot","hash":"50a4e2ab17155fe7449e0ee488a6242180f3b256","modified":1720887619573},{"_id":"node_modules/hexo-theme-redefine/source/fonts/Chillax/Chillax-Variable.ttf","hash":"01aafadc0ca4ace59127a5594a8f534e83b84879","modified":1720887620140},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1720887619869},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/waline.mjs","hash":"d94e0f396776a003b603d6e90a732a548c2fda33","modified":1720887620004},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.woff2","hash":"74d0af1108ab8157993ca03cef80e89e35e2408d","modified":1720887620360},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/duotone.min.css","hash":"0becc4b085bd9d377a8ff4b5160f8e19c8ec27a0","modified":1720887618564},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.woff2","hash":"e73d164db2aff2c91d18c07da03e8db9d0c5dfd4","modified":1720887620373},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.woff2","hash":"2cc24434345b80a844a6bda1139539fe41e4df53","modified":1720887620317},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.woff2","hash":"486fed640153de1de84f460834c73daef060ed20","modified":1720887620350},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.woff2","hash":"def760895375328ccdcf62b2b9b9001a21947acd","modified":1720887620333},{"_id":"node_modules/hexo-theme-redefine/source/fontawesome/all.min.css","hash":"630bf0e29410ec27622f65d1270c6bc435cdff21","modified":1720887618214},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.woff2","hash":"e0a4482c20f6b67784df54965539a317a3bd681b","modified":1720887620388},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-sharp-solid-900.ttf","hash":"0d710cd7bd1b7ff574e88bb812de82babe45e415","modified":1720887620219},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-solid-900.ttf","hash":"40b536c3667547db70ee9ca6f3c94fbc33e0cab7","modified":1720887620233},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js","hash":"c11ca6043d8dae028448a808105f8c888faac8f5","modified":1720887619768},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-regular-400.ttf","hash":"cdec068700dc440530e5bbeff7e8bb33a01b4132","modified":1720887620206},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/waline.mjs.map","hash":"37c5b3e6aa5e1b70358426345a1a1329d6b896d3","modified":1720887619983},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-light-300.ttf","hash":"cc5d9f4f994c82e23f58cdde1eec8792d81633c7","modified":1720887620189},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-thin-100.ttf","hash":"c1fee6e6986b14533ce022afada5fbe10c0f6562","modified":1720887620255},{"_id":"node_modules/hexo-theme-redefine/source/webfonts/fa-duotone-900.ttf","hash":"e0313a772ea710cb5ea4bd08f5dedb0a0025f8ca","modified":1720887620170},{"_id":"source/.obsidian/plugins/table-editor-obsidian/main.js","hash":"486d7d989ae4f99cb779dcc64ad6b5e92c6ccb6f","modified":1720919359824},{"_id":"node_modules/hexo-theme-redefine/source/js/libs/mermaid.min.js.map","hash":"7d303cf926754817c4360f92e6c39b8c390cdbdb","modified":1720887619923},{"_id":"public/images/redefine-avatar.svg","hash":"574ea402ffbba0205744e8080f9ca755d5989988","modified":1720959559451},{"_id":"public/images/redefine-favicon.svg","hash":"cdbbde55b1a9107c122e6ff05d0962cfd2ff242e","modified":1720959559451},{"_id":"public/images/loading.svg","hash":"a0d7478cd95cdcfc4ecec5d6c0a9f3d2a9c03b51","modified":1720959559451},{"_id":"public/images/redefine-logo.svg","hash":"04f9649050979d2e3dad989455c987f8dcbd3f79","modified":1720959559451},{"_id":"public/2023/02/13/ALGSort/sort.png","hash":"0febc9c09ac45228117793dec16b829a8f856c1d","modified":1720959559451},{"_id":"public/2023/08/18/MethodologyConfigNpm/s0.png","hash":"8a8897723d42dacb6e5c432868c18f61ed888ce3","modified":1720959559451},{"_id":"public/2023/08/18/MethodologyConfigNpm/s1.png","hash":"aee683fc4f54046c2587df64e0161f2aad101c9d","modified":1720959559451},{"_id":"public/2024/03/15/MethodologyFrontendEngineering/s0.png","hash":"fad0b5a25d31cdadc1b695d082cc29249799b44f","modified":1720959559451},{"_id":"public/2024/03/15/MethodologyFrontendEngineering/s1.png","hash":"37064de6659988fa133cf27d5dfa0cb9f79250b5","modified":1720959559451},{"_id":"public/2024/03/15/MethodologyFrontendEngineering/s2.png","hash":"5a4dc4383ee28d625b86beb39ca54dd948d84cc4","modified":1720959559451},{"_id":"public/2024/03/15/MethodologyFrontendEngineering/s4-1.png","hash":"faf8738e7d124dec77895afac6f9e5659dfe3702","modified":1720959559451},{"_id":"public/2024/03/15/MethodologyFrontendEngineering/s3.png","hash":"ab5a66cf92c05e28a6aa4b4173442b737e2027b0","modified":1720959559451},{"_id":"public/2024/03/15/MethodologyFrontendEngineering/s4.png","hash":"95e56ed37d98432652cc25a61e7bd3691feefc65","modified":1720959559451},{"_id":"public/2022/05/02/ReprintAngularOptimization/angular-performance01.png","hash":"872cf875a555da81d2a2302d67efdb8de6acbe95","modified":1720959559451},{"_id":"public/2021/09/08/PracticePromise/s1.png","hash":"f18dc853391103e1bd6732f6fdfbdaa1993821db","modified":1720959559451},{"_id":"public/2024/03/15/MethodologyFrontendEngineering/s5.png","hash":"b2627876613637469446a016b9e62be2e45818a5","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop01.png","hash":"734103317fe764dca98b21c2daea3bfee3d7ed81","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop02.png","hash":"209449e047e130a6876f0a868c7b52d772389e9c","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop03.png","hash":"9d1f71adc862bdb60571db2ce11f1a9213b46db8","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop04.png","hash":"5ff7816d6646afc8526aaf895a4d544cca73a672","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop05.png","hash":"15808d5580a71975c1e5266a1229b3dc262e43bf","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop06.png","hash":"436e375ebba91bd986b187cee5cd400ccb857d57","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop08.png","hash":"56734d28622ba516f1f20b25657fa6657b38cd68","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop09.png","hash":"74ad481bf6f20d8e9b5cc0ef8a7f29aaa632dc43","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop07.png","hash":"13b78493dd466a402b8c300f2b1bd728c277991e","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop12.png","hash":"e23625a1fe1f14f3eac3d4800e74bc64411d5d1b","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop10.png","hash":"6a716452d725401a61fdabd83e06fc604114c7e9","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop11.png","hash":"71b85a380c79d750e3b418e21becfb1bc39ae168","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop13.png","hash":"99bdd40521dca55a76ad20af1a3a6a79e38fc094","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop14.png","hash":"be3abb85a121f1d32fd4091582ade719abfc7cce","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop15.png","hash":"0214b341436ceb5269b35e9974e8c418d9486818","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop16.png","hash":"8c70a0ab2eb5bd594cfd2d779c556b1218c0818a","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/js-eventloop17.jpg","hash":"89b65245590fcd0586698566f1b5edb88735b919","modified":1720959559451},{"_id":"public/2021/02/23/someInterestingQuestions01/q1.png","hash":"c2a557272ca63f64d98e5ed7e0a657716f6fbbc0","modified":1720959559451},{"_id":"public/2021/02/23/someInterestingQuestions01/q2.png","hash":"9cba93c6e6a55d128e4f5fb42c9c7fc0fcdff5ee","modified":1720959559451},{"_id":"public/2021/02/23/someInterestingQuestions01/q3.png","hash":"18fadb53f01cd5ed3c36cec93989f95460f171c7","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s0.jpg","hash":"05610076fbe1dbc3dd91141889c3d07421f163cb","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-1.png","hash":"7c7fcf4598d32f25a7fbfd64df87ca0720e67d54","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-2.png","hash":"5847c95cbc95dcd52727a8ede2fd0bc9edb40f64","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-3.png","hash":"76446f89fd7e1f6a12b4e17765c9a3a4461aba8d","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-4.png","hash":"7afb3d35ed4b80786595f37319709f3cf6424d82","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-5.png","hash":"8ddc3225d9a93122ba5d7d5ef452e523b976bc63","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy01/s1-6.png","hash":"b06a440e5c6d8c58c8f874586f70981484093357","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s0.png","hash":"62f1b2e72ef7523a6908bcb3cfc2db526d950a9e","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-1.png","hash":"f9659f0b7fdb37b0b1faa9f5aa4e5a90c5087ed0","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-10.png","hash":"46c67b99cb9b3296d09c581468980221e4f74cfa","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-11.png","hash":"2b72a78c168ee6b08a9ed7938637e7da75881a03","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-12.png","hash":"e6a2bed6f1c37acacc23c00cf9b2e37182755794","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-13.png","hash":"30b8265e220162e4bf6a9c756cfa2e0266e7cdfb","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-14.png","hash":"fce621c668d267c6628d960d1cb8a9ec63447a0b","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-15.png","hash":"9697d09fbcec9eaef1949a14672155f14edf9814","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-2.png","hash":"97e38beeedb424a49f0a8bb858935834b5b9971c","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-3.png","hash":"3b0d50e000186074a2c4dbe41787448558dc8709","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-4.png","hash":"b4b6514ebc22f477b9b0319eeca48a6b97a97968","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-6.png","hash":"e70dadb4ec356ff3c2fb6527072d41a5b7602408","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-5.png","hash":"68bf184f99b9e6fb5c6a681488be74c0ccad0c94","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-7.png","hash":"a6f59b6884a7a4d18789cad0b32b7b8ec7951e64","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-8.png","hash":"0c24abe698ff0cbd2702323f7c5a887b72808159","modified":1720959559451},{"_id":"public/cv/index.js","hash":"586e615795f70d21bb1312ace936afb2e86cfbd9","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/s2-9.png","hash":"c41753dc031b7b6d891fa66c9c2dafbf0d1ba0ad","modified":1720959559451},{"_id":"public/search.xml","hash":"a9acedb40a83b18bb4953dd4e5a1e28553359b14","modified":1720959559451},{"_id":"public/about/index.html","hash":"6fd42e4bf539f3bb4c38a80e0692171d27fbcb66","modified":1720959559451},{"_id":"public/categories/index.html","hash":"196d9e4ea8e24b4653b387b71e5341dbe3006275","modified":1720959559451},{"_id":"public/404.html","hash":"c720c15423c2557042d552f4700997e30ce1deb7","modified":1720959559451},{"_id":"public/().html","hash":"9861b96a89f442be132fa959a7745dc62248bcc3","modified":1720959559451},{"_id":"public/tags/index.html","hash":"ccdb465f45af5ded0b61aa3d692a0945d922e75c","modified":1720959559451},{"_id":"public/cv/index.html","hash":"82f52946b0b33d180d95d5b141fdd3e0f69b315c","modified":1720959559451},{"_id":"public/CNAME","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1720959559451},{"_id":"public/2024/03/15/MethodologyFrontendEngineering/index.html","hash":"36f937fca2cda1960e805075e6cbdaa833e83b16","modified":1720959559451},{"_id":"public/[SPDX.html","hash":"cc48232541cc493c3861dbcbc0f1c4561789d1e1","modified":1720959559451},{"_id":"public/2023/09/13/MethodologyConfigTS/index.html","hash":"d4cd88e28b9137517556d356b02457a5d7ce1dd5","modified":1720959559451},{"_id":"public/Scope.html","hash":"0aca1125d6ec5bda64a579e83a00ace7ed6c7af8","modified":1720959559451},{"_id":"public/2023/08/18/MethodologyConfigNpm/index.html","hash":"94f81ecf4cab5ae7b7ba5a42cd5587465de9bcfc","modified":1720959559451},{"_id":"public/2023/03/13/ALGDataStructure/index.html","hash":"dbb282ce943b53e42a11941eeffed1852871be04","modified":1720959559451},{"_id":"public/2023/03/11/MethodologyFrontendJSModularity /index.html","hash":"d0e2bcb7dbd9dc6c749051c80483e9297cd152c6","modified":1720959559451},{"_id":"public/2023/02/21/MethodologyJSExcutionProcess/index.html","hash":"0230ed217d45d0e55b181ff6e0c233c3f6eed215","modified":1720959559451},{"_id":"public/2023/02/13/ALGSort/index.html","hash":"4617fc493ecf84835d9217b8131bc113e59d1805","modified":1720959559451},{"_id":"public/2023/02/11/MethodologyRefactoring/index.html","hash":"4d0a92a85259f5015b56cd5353ba4d69a43697f7","modified":1720959559451},{"_id":"public/2023/01/11/APIMutationObserver/index.html","hash":"e3004abebdd4f6bf9915ab8299011d9fb94920fa","modified":1720959559451},{"_id":"public/2022/11/02/ReprintTypscriptDecorator/index.html","hash":"dfff71f850e175f88becd43b9bb7abe14b373e18","modified":1720959559451},{"_id":"public/2022/06/15/MethodologyStateManagement/index.html","hash":"cc10ae5f9db761cc21a9c63284b9d74eb569a772","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy01/index.html","hash":"93237df7e10a2d0fe910f162bcebd237c9141527","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy02/index.html","hash":"0e0a208a697057315c29e701d61bf5a28be3500b","modified":1720959559451},{"_id":"public/2022/06/03/vueSourceCodeStudy03/index.html","hash":"bb69c660fa8df7dd61bc7cfa0363a9de37137f13","modified":1720959559451},{"_id":"public/2022/05/02/ReprintVueCompositionAPI/index.html","hash":"83082333e9901cb237ac9e654b1505f93988945c","modified":1720959559451},{"_id":"public/2022/05/02/ReprintAngularOptimization/index.html","hash":"2955ab9cf518aa98e3adb10c247ae42a8dd59c76","modified":1720959559451},{"_id":"public/2022/03/20/MethodologyFrontendHistory/index.html","hash":"6ddb8bd5e82a75415741951d12edb52d60a33f81","modified":1720959559451},{"_id":"public/2021/10/15/PracticeCallApply/index.html","hash":"6d0e0fe25bd36a70f3fa00a52f6943d1d192261a","modified":1720959559451},{"_id":"public/2021/09/12/ReprintJSEventLoop/index.html","hash":"9fcfd8648c55a243c041b4125afcb270f56ee362","modified":1720959559451},{"_id":"public/2021/09/08/PracticePromise/index.html","hash":"04732d1f8ca12c9355c63b53275c3d189a221567","modified":1720959559451},{"_id":"public/2021/03/27/someInterestingQuestions06/index.html","hash":"4f2a2727fdc217f0c4155957be6d10cc82fbc129","modified":1720959559451},{"_id":"public/2021/03/14/someInterestingQuestions04/index.html","hash":"5fc04c9062cddb8337193b574c5d3c7fd50c8088","modified":1720959559451},{"_id":"public/2021/03/20/someInterestingQuestions05/index.html","hash":"4f621122cd66155e751e7fa98e9875f0dfae3069","modified":1720959559451},{"_id":"public/2021/03/06/someInterestingQuestions03/index.html","hash":"75910d8d9bc491aaa9975bfcbf7e1d07ffc99c5d","modified":1720959559451},{"_id":"public/archives/index.html","hash":"582f2d29253f2279473b297ff8a3b4e2d9de4c9d","modified":1720959559451},{"_id":"public/2021/03/02/ReprintBrowserRender/index.html","hash":"eff4f63eaea73d6dc746abfdeb658b52595c0959","modified":1720959559451},{"_id":"public/2021/02/23/someInterestingQuestions01/index.html","hash":"6cbc08a0b70d9729ab73e7078c5e5df5a34fe5e5","modified":1720959559451},{"_id":"public/2021/02/25/someInterestingQuestions02/index.html","hash":"893979329661fd6d7508fcb8b09c47a938b088e0","modified":1720959559451},{"_id":"public/archives/page/2/index.html","hash":"84dab170d07b2baf9f15d5ba85ef71248d43daef","modified":1720959559451},{"_id":"public/archives/page/3/index.html","hash":"55c71efce8701d4c44ddc35160b7a564a92b7e1a","modified":1720959559451},{"_id":"public/archives/2021/index.html","hash":"cf4f10b409bfd0446208196178ec86c4c4421f3e","modified":1720959559451},{"_id":"public/archives/2021/02/index.html","hash":"d5e11bbdbc622bb217c82662c352cadb5ec4f6fe","modified":1720959559451},{"_id":"public/archives/2021/03/index.html","hash":"02e345da4ea524e700dc2430f166b1566545951e","modified":1720959559451},{"_id":"public/archives/2021/09/index.html","hash":"9e9a429806b117576ebab040e5139d4998775d5d","modified":1720959559451},{"_id":"public/archives/2021/10/index.html","hash":"2c3d6f5a985f603de32b8f1d8dfb2c373695257f","modified":1720959559451},{"_id":"public/archives/2022/index.html","hash":"34b4324903c75b4d38c5356a0d9625f962585c4e","modified":1720959559451},{"_id":"public/archives/2022/03/index.html","hash":"b3e43508e0902cc07fadd9105e7c755f40a37493","modified":1720959559451},{"_id":"public/archives/2022/05/index.html","hash":"abb74f0e8d93951f7be1a1ae47fc5070ffba564f","modified":1720959559451},{"_id":"public/archives/2022/06/index.html","hash":"ba6c7a22f89ced24df9dca23a6b4a40c0507b2a3","modified":1720959559451},{"_id":"public/archives/2022/11/index.html","hash":"6be0caad1c89488c41290735a977e3b6655ad556","modified":1720959559451},{"_id":"public/archives/2023/index.html","hash":"217acb625a73cdbe4fa608d479cbdc45eae06c50","modified":1720959559451},{"_id":"public/archives/2023/01/index.html","hash":"6add276db57349b0f986ba37fff1bc6e6bcdd7fc","modified":1720959559451},{"_id":"public/archives/2023/03/index.html","hash":"436aad5fa90a628f0062e75f841d21107b4578c9","modified":1720959559451},{"_id":"public/archives/2023/02/index.html","hash":"ade9fc3d60ab0af73c3a71c78ee84d277aba51c5","modified":1720959559451},{"_id":"public/archives/2023/08/index.html","hash":"bc505e2f7b4b0e3cf86407a1035b2db977a9c871","modified":1720959559451},{"_id":"public/archives/2023/09/index.html","hash":"b777f1d9573a18130fb9c004c154f24e478e8406","modified":1720959559451},{"_id":"public/archives/2024/index.html","hash":"e08b85bddf3074b96b50d6efcf7466d20a07e6b3","modified":1720959559451},{"_id":"public/archives/2024/03/index.html","hash":"613b46a3b2e688eb014bc9fde865874b1e379cc2","modified":1720959559451},{"_id":"public/categories/数据结构/index.html","hash":"cf01ae4278fb05e262f7a202c3d9454f3f923a7a","modified":1720959559451},{"_id":"public/categories/算法/index.html","hash":"61b4bb7a330ed6e094b7594927152c484eaede7e","modified":1720959559451},{"_id":"public/categories/API/index.html","hash":"276cf604a8c3462f916ba27a3947c4be00ce4712","modified":1720959559451},{"_id":"public/categories/方法论/index.html","hash":"61599ded6847caa6daaaf8eadb4eeef5a679462f","modified":1720959559451},{"_id":"public/categories/数据结构/算法/index.html","hash":"5d93414441825ba65488a9959f6275b73ccf2794","modified":1720959559451},{"_id":"public/categories/算法/ReprintTypscriptDecorator/index.html","hash":"9c1f622eca49279cf184f101f1e388b345e866c2","modified":1720959559451},{"_id":"public/categories/实践/index.html","hash":"bebbdb968f86087bc6b925cf37f28dae6f9091a0","modified":1720959559451},{"_id":"public/categories/转载/index.html","hash":"7627b0409def39420b72157107dfe24c38ed1eac","modified":1720959559451},{"_id":"public/categories/一些有趣的问题/index.html","hash":"63bcbeb29ab622c25a373161f38b2401b6c41ea0","modified":1720959559451},{"_id":"public/categories/源码/index.html","hash":"d3f971e82c0e9123c0ca5d5884502876d46c8e1b","modified":1720959559451},{"_id":"public/categories/数据结构/算法/ReprintTypscriptDecorator/index.html","hash":"a28efb2c0a07712ef3f5547f750db88abe92f374","modified":1720959559451},{"_id":"public/page/2/index.html","hash":"bef25208e55992760b521329add851070b5084df","modified":1720959559451},{"_id":"public/page/3/index.html","hash":"2fa01fcf74fdc7b82533593e8e1528a228161a35","modified":1720959559451},{"_id":"public/index.html","hash":"b73fa9660c15a1f3e55e66db81b823cb08aa0e4d","modified":1720959559451},{"_id":"public/tags/JS/index.html","hash":"8f60d3b9bc766e44b47bedfed7acf4ec5772a681","modified":1720959559451},{"_id":"public/tags/算法/index.html","hash":"390f81ee18d2e3289591162fcf72d41367e346c9","modified":1720959559451},{"_id":"public/tags/JS/page/2/index.html","hash":"d51ed332606ecdd1d835cb97626a8765e0b6e7b9","modified":1720959559451},{"_id":"public/tags/API/index.html","hash":"ea33828ae0d2d3a558c01ea81b6f1a2d841fdae0","modified":1720959559451},{"_id":"public/tags/前端工程化/index.html","hash":"f600d821cf40bd9654d0c8b1feece2d1e9ea199b","modified":1720959559451},{"_id":"public/tags/npm/index.html","hash":"f86a8b99244272fef8c3c0a3445848770bb7cb89","modified":1720959559451},{"_id":"public/tags/TS/index.html","hash":"0a0382db662a2a0f14966ac0cce6141638fc7b8f","modified":1720959559451},{"_id":"public/tags/typescript/index.html","hash":"b4c96bd2a82d7003d23500296b7d51254c0e5652","modified":1720959559451},{"_id":"public/tags/模块化/index.html","hash":"b1c4ded7aa304da962280a53f38e8c5d1041d43d","modified":1720959559451},{"_id":"public/tags/JS进阶/index.html","hash":"8fc9e233346934924595b295814f0e4f8660b56e","modified":1720959559451},{"_id":"public/tags/angular/index.html","hash":"78f2c53fb6440d9fdd0590d988db617f6ad4e9be","modified":1720959559451},{"_id":"public/tags/browser/index.html","hash":"992f3817c134e4c7ebf859f16016776100ad9f3b","modified":1720959559451},{"_id":"public/tags/有趣的问题/index.html","hash":"a4fbdd76857cc3af38a1385c4db03b68a0e1b8e6","modified":1720959559451},{"_id":"public/tags/vue/index.html","hash":"e0106ee54ffb59ba241c2341a5f34568650c619b","modified":1720959559451},{"_id":"public/tags/sourceCode/index.html","hash":"268e00aaa977d53b1880ec6ca6e2589d90a61cf3","modified":1720959559451},{"_id":"public/images/avatar.jpeg","hash":"3498dfe2e4ab38489258f337f4111992b326bab5","modified":1720959559451},{"_id":"public/images/bg01.webp","hash":"047bec81d1c202639a25680d12feeecbd1a717ba","modified":1720959559451},{"_id":"public/images/redefine-logo.webp","hash":"0a07e3fb6d9125dee44798c8c110187b16fb42a9","modified":1720959559451},{"_id":"public/images/wallhaven-wqery6-light.webp","hash":"d25389973d0359b78f1e9c74a850ef425690ba40","modified":1720959559451},{"_id":"public/images/wallhaven-wqery6-dark.webp","hash":"d0066e0b025ae748448a3d6a96165d45a55d2f22","modified":1720959559451},{"_id":"public/webfonts/fa-v4compatibility.woff2","hash":"d02b1adc81fd5bec023e25a7770779b99d6dd742","modified":1720959559451},{"_id":"public/webfonts/fa-v4compatibility.ttf","hash":"b54531dd09c5089eb93b12ce8f90ff521855ff8a","modified":1720959559451},{"_id":"public/fonts/Chillax/Chillax-Variable.woff","hash":"fc0e791429c274c4c9312d810e7ae9503cab34ab","modified":1720959559451},{"_id":"public/fonts/Chillax/Chillax-Variable.woff2","hash":"fc5d99b40db9deca7d151f9bd16b96ff160828b7","modified":1720959559451},{"_id":"public/fonts/GeistMono/GeistMonoVF.woff2","hash":"11e9a061ce255fc4cc45ac3eeb8cab09a49f5ccc","modified":1720959559451},{"_id":"public/fonts/Geist/GeistVF.woff2","hash":"772998a8569a6caa04927d876fbe9e0fb859658b","modified":1720959559451},{"_id":"public/js/libs/SwupPreloadPlugin.min.js.map","hash":"40513fec1323b601667876a97a9ef8a0c88bff63","modified":1720959559451},{"_id":"public/js/libs/SwupScrollPlugin.min.js.map","hash":"63cf04ba556b256379e103ef7d3ba12d629449a4","modified":1720959559451},{"_id":"public/lib/hbe.js","hash":"abd3b27238e26dc3bdd65e0e69fa514fa432a75b","modified":1720959559451},{"_id":"public/css/hbe.style.css","hash":"29be8fc47be885e9954e310cbc68dfadd3b4cee6","modified":1720959559451},{"_id":"public/webfonts/fa-brands-400.woff2","hash":"a358912d781e6249a8d291e4ce9ebd0a9ab9452e","modified":1720959559451},{"_id":"public/fonts/GeistMono/GeistMonoVF.ttf","hash":"d72ec9d729305fc24f38e1ba69174e93b700cd69","modified":1720959559451},{"_id":"public/fonts/GeistMono/GeistMonoVF.woff","hash":"fd8c986a8767d59a36e2d194299466720c916ee2","modified":1720959559451},{"_id":"public/fonts/Geist/GeistVF.ttf","hash":"9a531509e4e768e9102d11f5d7d293e3f04d9c64","modified":1720959559451},{"_id":"public/fonts/Geist/GeistVF.woff","hash":"d06c767b3837999a8b98426e4eb16ca0a8080880","modified":1720959559451},{"_id":"public/js/libs/Swup.min.js.map","hash":"f74755d9318a86939791027767f631472b876207","modified":1720959559451},{"_id":"public/2024/03/15/MethodologyFrontendEngineering/mono.png","hash":"009da9c08d63d2ea43923588adad61698be6cb11","modified":1720959559451},{"_id":"public/assets/odometer-theme-minimal.css","hash":"c526d6574eeb0c56d560a2f44c806c0117de78fe","modified":1720959559451},{"_id":"public/assets/hbe.style.css","hash":"e94a573eb11412493b6146a057535776d068efb7","modified":1720959559451},{"_id":"public/fontawesome/brands.min.css","hash":"5119c35bbd273d2ea2501997827f6d644da93164","modified":1720959559451},{"_id":"public/fontawesome/regular.min.css","hash":"d27c4fed54dacff688010e51f611d950dd6e0aca","modified":1720959559451},{"_id":"public/fontawesome/fontawesome.min.css","hash":"44e6d666b45a6875e4fce11159876129e7a1cceb","modified":1720959559451},{"_id":"public/fontawesome/all.min.css","hash":"630bf0e29410ec27622f65d1270c6bc435cdff21","modified":1720959559451},{"_id":"public/fontawesome/duotone.min.css","hash":"0becc4b085bd9d377a8ff4b5160f8e19c8ec27a0","modified":1720959559451},{"_id":"public/fontawesome/light.min.css","hash":"18a176eb2486db4e938e568083fa578b641ccc83","modified":1720959559451},{"_id":"public/fontawesome/sharp-solid.min.css","hash":"7d1a13c6b8178b29f5bcb1a639a1998fc9de16c4","modified":1720959559451},{"_id":"public/fontawesome/solid.min.css","hash":"e727feabedb171fb0b398151870d7739ef4e2432","modified":1720959559451},{"_id":"public/fontawesome/svg-with-js.min.css","hash":"f4c08e37c4d44b3ed7a3f377d1cb5d7fca4d04bc","modified":1720959559451},{"_id":"public/fontawesome/thin.min.css","hash":"3d46be31379b07ffb24d69c6c915725eaa2e89e9","modified":1720959559451},{"_id":"public/css/style.css","hash":"1e85302dcbae6b05026216ec8a6d3f3da0b29f1c","modified":1720959559451},{"_id":"public/fontawesome/v4-font-face.min.css","hash":"0be987628c8b485b39f064da41c90f15c0596c1f","modified":1720959559451},{"_id":"public/fontawesome/v5-font-face.min.css","hash":"260ea7a5e0b89963a5dcf2600a4decdf0f408f3f","modified":1720959559451},{"_id":"public/fontawesome/v4-shims.min.css","hash":"96f037860b8e9b59af8e47571ea98791616dbfd8","modified":1720959559451},{"_id":"public/js/main.js","hash":"bc9005d02cc70d2136822f6dccaea8020d5cde19","modified":1720959559451},{"_id":"public/js/utils.js","hash":"b1172e9133ebc4ba83c51b3b84b66b5b651a08f4","modified":1720959559451},{"_id":"public/assets/build/styles.css","hash":"ed9261bfa34661bf777d57f97ddd4ff14395e6d0","modified":1720959559451},{"_id":"public/css/common/animated.css","hash":"6bce6cd2bc3ba5374216b35d1da320bdbeaac795","modified":1720959559451},{"_id":"public/css/common/basic.css","hash":"e7babda7fe6049998d72677132c37eca0ab59f73","modified":1720959559451},{"_id":"public/css/layout/archive-content.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1720959559451},{"_id":"public/css/common/markdown.css","hash":"1c4ddbb7d2d6e05370033fa377a8ce9f750069a9","modified":1720959559451},{"_id":"public/css/common/variables.css","hash":"c5dd38df6d3c84a39b527d6bd940f69d3994d28b","modified":1720959559451},{"_id":"public/css/common/redefine-theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1720959559451},{"_id":"public/css/layout/article-content.css","hash":"ef2d5f521a68c1175099dfb4b2e4b9aaee92e6c0","modified":1720959559451},{"_id":"public/js/layouts/categoryList.js","hash":"d3d60c34c8ce9fa124e13c7565978760e3599bf5","modified":1720959559451},{"_id":"public/css/layout/category-content.css","hash":"907c1bc9e9f7f5f17896dab9df1a3a2863d3e9ea","modified":1720959559451},{"_id":"public/css/layout/category-list.css","hash":"d6e072db9b3507558749ed5098fe679061cd9e1a","modified":1720959559451},{"_id":"public/js/layouts/lazyload.js","hash":"4eace9fc93e7d824085e78aa435e40b3cd87b550","modified":1720959559451},{"_id":"public/css/layout/home-sidebar.css","hash":"29dcade274f094bb6f6765e6f3f634a70aafc8cf","modified":1720959559451},{"_id":"public/css/layout/home-content.css","hash":"a9998bd7c0060225b58345c1f956fe7812e8e384","modified":1720959559451},{"_id":"public/css/layout/tag-content.css","hash":"6adcf57d14973cb5cc544f50d927352f758bbf14","modified":1720959559451},{"_id":"public/css/layout/page.css","hash":"63b7197d071670b98ab7aeb19baffa351fc1cb6c","modified":1720959559451},{"_id":"public/js/layouts/navbarShrink.js","hash":"9d2e5fef64f545e5ec18fa800f369c2dd39bae23","modified":1720959559451},{"_id":"public/js/layouts/toc.js","hash":"1c36ca4a1814536a0a0aa7cb39eb523d771fbf88","modified":1720959559451},{"_id":"public/fonts/Chillax/chillax.css","hash":"85f2404cbd2e8a78dcb8d3335e4f7b3c33dbdb05","modified":1720959559451},{"_id":"public/fonts/GeistMono/geist-mono.css","hash":"615d9aeaf00e11485d3e5a5a68ed2a125dd94056","modified":1720959559451},{"_id":"public/fonts/Geist/geist.css","hash":"c74d4b28d9a1280f2958ce3f0417b863dec698e7","modified":1720959559451},{"_id":"public/js/libs/APlayer.min.js","hash":"22caa28ff6b41a16ff40f15d38f1739e22359478","modified":1720959559451},{"_id":"public/js/libs/Swup.min.js","hash":"cc054d34e74a1feecfae75064f6a4d6107607396","modified":1720959559451},{"_id":"public/js/libs/SwupPreloadPlugin.min.js","hash":"d911512891ecbe1935203bcd3d93427ad75e45c8","modified":1720959559451},{"_id":"public/js/libs/SwupScriptsPlugin.min.js","hash":"b17f3434035f1339d6f9cd5c8a055d2a1b6602e9","modified":1720959559451},{"_id":"public/js/libs/SwupScrollPlugin.min.js","hash":"6c3afca9bb98f79d14516c093f27e3e50a3fd82e","modified":1720959559451},{"_id":"public/js/libs/Typed.min.js","hash":"e8ce2b674a637b0c0396a3106c1aedf10186249c","modified":1720959559451},{"_id":"public/js/libs/anime.min.js","hash":"47cb482a8a488620a793d50ba8f6752324b46af3","modified":1720959559451},{"_id":"public/js/libs/SwupSlideTheme.min.js","hash":"e9d143780e879d958164b1356b7f918ec25e838a","modified":1720959559451},{"_id":"public/js/libs/SwupProgressPlugin.min.js","hash":"fd30fe1c43072017f67bbaac18b962a5ac218711","modified":1720959559451},{"_id":"public/js/libs/odometer.min.js","hash":"fe5beb60997c84ab2f91b54535c4221443cdd21f","modified":1720959559451},{"_id":"public/js/libs/minimasonry.min.js","hash":"9681cc509cb8aa733d36aad032e6e8acdb33c08c","modified":1720959559451},{"_id":"public/js/plugins/aplayer.js","hash":"27510fbd590d2e34e62959964b9bcdde507cd042","modified":1720959559451},{"_id":"public/js/plugins/hbe.js","hash":"667bf18bce944739dd9033d35c66094e468796b5","modified":1720959559451},{"_id":"public/js/plugins/masonry.js","hash":"c1fdb5d9f6544cf19d36d4112c85afaded3fc916","modified":1720959559451},{"_id":"public/js/tools/codeBlock.js","hash":"64593d23e1fa8d160731ed23b0cc23645126a500","modified":1720959559451},{"_id":"public/js/libs/pjax.min.js","hash":"3d796e5be9cdd4067c94e190ea2482d7fdb4856c","modified":1720959559451},{"_id":"public/js/plugins/mermaid.js","hash":"8a83ea6c83ec2990e65983326efa163cae3cd050","modified":1720959559451},{"_id":"public/js/tools/imageViewer.js","hash":"dea82da7c5581bc41fe2347e7df7137ad727d391","modified":1720959559451},{"_id":"public/js/tools/lightDarkSwitch.js","hash":"6a26ed3714db81987aa022f22be985f0f0548281","modified":1720959559451},{"_id":"public/js/plugins/typed.js","hash":"1e0c8fdb30979d43b91b46f29e62d2c51ab2e502","modified":1720959559451},{"_id":"public/js/plugins/tabs.js","hash":"5be23a96d4640f43694c9d5dd9136e641b936269","modified":1720959559451},{"_id":"public/js/tools/localSearch.js","hash":"29f737a44cdc5d5622fe45e81ff1845e0ccad78e","modified":1720959559451},{"_id":"public/css/common/codeblock/code-block.css","hash":"62c6bd6f9826676b1ba6952910daf3bc3a4b7a25","modified":1720959559451},{"_id":"public/css/common/codeblock/code-theme.css","hash":"57e29d22f95e1ea42febdbe930d16f1e49054471","modified":1720959559451},{"_id":"public/css/common/codeblock/highlight.css","hash":"9c68eeea30c6a00e43c1caa84718a0733caa4450","modified":1720959559451},{"_id":"public/js/tools/tocToggle.js","hash":"4181e9ab7528cc978fc05676fb4ada667f63216e","modified":1720959559451},{"_id":"public/js/tools/scrollTopBottom.js","hash":"56907e71e5ef31a008d91487605b582cec555196","modified":1720959559451},{"_id":"public/js/tools/runtime.js","hash":"07c898f41f58f01515ea30e5f31421c89cbde29b","modified":1720959559451},{"_id":"public/webfonts/fa-brands-400.ttf","hash":"ba9322d66c19f635e15e458cc39fcb509818332f","modified":1720959559451},{"_id":"public/fonts/Chillax/Chillax-Variable.eot","hash":"50a4e2ab17155fe7449e0ee488a6242180f3b256","modified":1720959559451},{"_id":"public/fonts/Chillax/Chillax-Variable.ttf","hash":"01aafadc0ca4ace59127a5594a8f534e83b84879","modified":1720959559451},{"_id":"public/js/libs/APlayer.min.js.map","hash":"31a19da0f0cb6b00ec212eafa847f31af86788df","modified":1720959559451},{"_id":"public/js/libs/waline.mjs","hash":"d94e0f396776a003b603d6e90a732a548c2fda33","modified":1720959559451},{"_id":"public/js/libs/mermaid.min.js","hash":"c11ca6043d8dae028448a808105f8c888faac8f5","modified":1720959559451},{"_id":"public/webfonts/fa-sharp-solid-900.woff2","hash":"74d0af1108ab8157993ca03cef80e89e35e2408d","modified":1720959559451},{"_id":"public/webfonts/fa-solid-900.woff2","hash":"e73d164db2aff2c91d18c07da03e8db9d0c5dfd4","modified":1720959559451},{"_id":"public/webfonts/fa-duotone-900.woff2","hash":"2cc24434345b80a844a6bda1139539fe41e4df53","modified":1720959559451},{"_id":"public/webfonts/fa-regular-400.woff2","hash":"486fed640153de1de84f460834c73daef060ed20","modified":1720959559451},{"_id":"public/webfonts/fa-light-300.woff2","hash":"def760895375328ccdcf62b2b9b9001a21947acd","modified":1720959559451},{"_id":"public/webfonts/fa-thin-100.woff2","hash":"e0a4482c20f6b67784df54965539a317a3bd681b","modified":1720959559451},{"_id":"public/webfonts/fa-sharp-solid-900.ttf","hash":"0d710cd7bd1b7ff574e88bb812de82babe45e415","modified":1720959559451},{"_id":"public/webfonts/fa-solid-900.ttf","hash":"40b536c3667547db70ee9ca6f3c94fbc33e0cab7","modified":1720959559451},{"_id":"public/webfonts/fa-regular-400.ttf","hash":"cdec068700dc440530e5bbeff7e8bb33a01b4132","modified":1720959559451},{"_id":"public/js/libs/waline.mjs.map","hash":"37c5b3e6aa5e1b70358426345a1a1329d6b896d3","modified":1720959559451},{"_id":"public/webfonts/fa-light-300.ttf","hash":"cc5d9f4f994c82e23f58cdde1eec8792d81633c7","modified":1720959559451},{"_id":"public/webfonts/fa-thin-100.ttf","hash":"c1fee6e6986b14533ce022afada5fbe10c0f6562","modified":1720959559451},{"_id":"public/webfonts/fa-duotone-900.ttf","hash":"e0313a772ea710cb5ea4bd08f5dedb0a0025f8ca","modified":1720959559451},{"_id":"public/js/libs/mermaid.min.js.map","hash":"7d303cf926754817c4360f92e6c39b8c390cdbdb","modified":1720959559451},{"_id":"source/_posts/vueSourceCodeStudy04.md","hash":"35e309b449bac62a7db3a2d2c88f04b098f378ee","modified":1724085939220},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/light/github.styl","hash":"a2a15ed938b319c369569845bf35d00c6624d136","modified":1726072381025},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/a11y-dark.styl","hash":"a9a17eceb406a6d2da4f2ec52b3832052a141f4f","modified":1726072380995},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/light/atom-one-light.styl","hash":"99de67d507bd6ffed5993097a6ce2be6422480b1","modified":1726072381010},{"_id":"node_modules/hexo-theme-redefine/.coderabbit.yaml","hash":"b944fabecbd1d4ad16a7cb4a4f51c564fee6b28d","modified":1726072404088},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/atom-one-dark.styl","hash":"8802725310cf86c4a179d874072188f31d10b224","modified":1726072381008},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/light/default.styl","hash":"c2b8d16ba4dffdd3bae4db4f817bc18cdd7c1d60","modified":1726072381020},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/monokai-sublime.styl","hash":"803773d8c6dd5ecf957596ca57584a6618f373ac","modified":1726072381033},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/agate.styl","hash":"5e18116485877ebd842cd5528e12626fabc0b2a4","modified":1726072380996},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/nord.styl","hash":"9b88c9e8bca2b8995fdc71519c01a9c80121161c","modified":1726072381037},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/night-owl.styl","hash":"323b8a17977768596b0643a9becb0595f290cb88","modified":1726072381035},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/github-dark.styl","hash":"fab5f7f62407b66f8b5f2837b178ef5b09a4badc","modified":1726072381023},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/tokyo-night-dark.styl","hash":"bd7ea8175853e05d5716282491ae024cb987e7f5","modified":1726072381049},{"_id":"node_modules/hexo-theme-redefine/source/css/common/codeblock/hljs-themes/dark/vs2015.styl","hash":"c54d91bf767efe0671c4dfbe874fac678cfde117","modified":1726072381051},{"_id":"node_modules/hexo-theme-solitude/source/img/avatar.jpeg","hash":"3498dfe2e4ab38489258f337f4111992b326bab5","modified":1635714275425},{"_id":"node_modules/hexo-theme-solitude/CONTRIBUTING.md","hash":"17dee0712e0bbaeb3264a23c974505e0f14b1a1a","modified":1736483094463},{"_id":"node_modules/hexo-theme-solitude/LICENSE","hash":"ec1e38113a7c0edad9d857a0f77d6138abdbdba9","modified":1737300758893},{"_id":"node_modules/hexo-theme-solitude/CODE_OF_CONDUCT.md","hash":"793c5088122679378ec1de45c1b5c5c9aba67fec","modified":1726533578316},{"_id":"node_modules/hexo-theme-solitude/README.md","hash":"7effbf6f96f167b689f92eeeefaed8d16ec14e21","modified":1737300759639},{"_id":"node_modules/hexo-theme-solitude/SECURITY.md","hash":"9f2a93af401620b687b50d6a53a6c5f26ad8a57a","modified":1736483094469},{"_id":"node_modules/hexo-theme-solitude/package.json","hash":"c9d9abb4d7180c59128fe1bd059b64f7495d0099","modified":1737300759633},{"_id":"node_modules/hexo-theme-solitude/README_zh-Hans.md","hash":"349cdd694e28983dcfb7d7dd4f0b70d82572a13b","modified":1728228807319},{"_id":"node_modules/hexo-theme-solitude/_config.yml","hash":"22c2bdb83c1e82eb7da7c4d59ca83822ffa148ba","modified":1737300759907},{"_id":"node_modules/hexo-theme-solitude/README_zh-Hant.md","hash":"3d6bccf49f87aabd2167a783d60a8bf7d40beb77","modified":1737300759638},{"_id":"node_modules/hexo-theme-solitude/plugins.yml","hash":"19afc9359bde856cd1d3c2ac95d363cef410c7b2","modified":1737300760085},{"_id":"node_modules/hexo-theme-solitude/.github/FUNDING.yml","hash":"0c899ac00affc763ca377d51d067f772b35facc4","modified":1737300759915},{"_id":"node_modules/hexo-theme-solitude/languages/default.yml","hash":"0f29b6e912cd76ab390228b7121dcef5f479b4ce","modified":1737300759912},{"_id":"node_modules/hexo-theme-solitude/languages/zh-TW.yml","hash":"67f2b19cd91070a9cce4961559ac2f8cf99708e0","modified":1737300760089},{"_id":"node_modules/hexo-theme-solitude/languages/zh-CN.yml","hash":"827f68cdd2c49999587a1932178ca17c7812a67d","modified":1737300760087},{"_id":"node_modules/hexo-theme-solitude/languages/en.yml","hash":"5181dac0cdfe9cbdf9aa0e68d7962c7d97f03e5c","modified":1737300759913},{"_id":"node_modules/hexo-theme-solitude/.github/PULL_REQUEST_TEMPLATE.md","hash":"e9ce1f4d8be77228220f130cdacaa02c2baef2ec","modified":1726533578319},{"_id":"node_modules/hexo-theme-solitude/.github/screenshot.avif","hash":"754f17d48c26591344813eded47ebdf7ee9ad3cb","modified":1736483093993},{"_id":"node_modules/hexo-theme-solitude/layout/category.pug","hash":"e7b44ce1d4d0579908e29ce66bd9f57b0fc7c37e","modified":1736483094569},{"_id":"node_modules/hexo-theme-solitude/layout/404.pug","hash":"6f4ad73c2ef09f5c78c6e6b27f44507fc06997fc","modified":1726533578328},{"_id":"node_modules/hexo-theme-solitude/layout/archive.pug","hash":"5dd0e0576ad99a5464ab5b4f9927f94ff995a1f5","modified":1736483094480},{"_id":"node_modules/hexo-theme-solitude/layout/tag.pug","hash":"18c97a76efd9e73e4859aad3233a8359c4448a6a","modified":1736483094640},{"_id":"node_modules/hexo-theme-solitude/layout/post.pug","hash":"4870f5af7ad9907f959d295cfd856bb58d814de9","modified":1736483094625},{"_id":"node_modules/hexo-theme-solitude/layout/index.pug","hash":"a527c15d992ce90880f5b209f5a220418ab8738e","modified":1737300759729},{"_id":"node_modules/hexo-theme-solitude/.github/ISSUE_TEMPLATE/config.yml","hash":"bedc4eff3d779859779202a8fb989f90b97fe667","modified":1737300759909},{"_id":"node_modules/hexo-theme-solitude/.github/ISSUE_TEMPLATE/bug_report.yml","hash":"1028998d7d40813b4b8d9da58593c61c7aec7e58","modified":1726533578578},{"_id":"node_modules/hexo-theme-solitude/layout/page.pug","hash":"a08a084b89beb52291c8894452abfbca4bdfcc86","modified":1736483094621},{"_id":"node_modules/hexo-theme-solitude/.github/workflows/code-review-bot.yml","hash":"bf4ee3aa43d076c25d09b90c1c7d7e0429c80758","modified":1726533578579},{"_id":"node_modules/hexo-theme-solitude/.github/workflows/issue_invalid.yml","hash":"8cdde230c8f9330cc7cd5c149ea5fc258ffb0b8b","modified":1726533578586},{"_id":"node_modules/hexo-theme-solitude/.github/workflows/issue_close_question.yml","hash":"1c22fb4b1db12a72c0815719f8125f405f3d8450","modified":1726533578586},{"_id":"node_modules/hexo-theme-solitude/.github/ISSUE_TEMPLATE/feature_request.yml","hash":"b119e97a6c06d0088416d854bc713b7a1cffee62","modified":1726533578584},{"_id":"node_modules/hexo-theme-solitude/.github/workflows/issue_question.yml","hash":"f3bb2a091ac2cf2505931811c4769356125a159e","modified":1726533578587},{"_id":"node_modules/hexo-theme-solitude/.github/workflows/npm-publish.yml","hash":"de728e617fdb99471600875f0bc7f8359f4a6e15","modified":1737300759917},{"_id":"node_modules/hexo-theme-solitude/.github/workflows/issue_wontfix.yml","hash":"208345603e592330f72901c82eedd422efc28420","modified":1726533578588},{"_id":"node_modules/hexo-theme-solitude/layout/includes/console.pug","hash":"62d4aaf596ef975e29936731a44127e0b9659b39","modified":1726533578383},{"_id":"node_modules/hexo-theme-solitude/layout/includes/footer.pug","hash":"5e2a03fe97ef940d3fc0dfc9e9ada9734a51e9cd","modified":1737300759714},{"_id":"node_modules/hexo-theme-solitude/layout/includes/header.pug","hash":"be2f9d23220bfbb004e3e4e1332a281a4266e659","modified":1737300759722},{"_id":"node_modules/hexo-theme-solitude/layout/includes/head.pug","hash":"63895d3aca7fdaa0c287a65e477e12cf6d5baad7","modified":1726533578395},{"_id":"node_modules/hexo-theme-solitude/layout/includes/keyboard.pug","hash":"a758ae0a5a6854962c56ac41e4e6c2567bc7e5fd","modified":1730126498515},{"_id":"node_modules/hexo-theme-solitude/layout/includes/nav.pug","hash":"4a153e83e1ffe76ea1c5f353e54044cea2b40619","modified":1726533578416},{"_id":"node_modules/hexo-theme-solitude/scripts/event/cdn.js","hash":"3fa2df390b2e396fc301a07107621be52120ea43","modified":1736483094324},{"_id":"node_modules/hexo-theme-solitude/layout/includes/layout.pug","hash":"d98de3f31456e66ee47eceeff9adc880363e2c22","modified":1728228807434},{"_id":"node_modules/hexo-theme-solitude/scripts/event/init.js","hash":"d10faee4d0bcef5d3fde9d79150b3fa49c4fda4f","modified":1736483094335},{"_id":"node_modules/hexo-theme-solitude/scripts/event/merge_config.js","hash":"b9e57cbdda5cec9d28688257bb1dc47f00aa35c7","modified":1737300759614},{"_id":"node_modules/hexo-theme-solitude/scripts/event/page.js","hash":"92f3bab75b602e326f0f909d0ff72ed78dcb8846","modified":1730126498404},{"_id":"node_modules/hexo-theme-solitude/scripts/event/welcome.js","hash":"5e337394f30f086b333b154d4f47fb19d3f4a70e","modified":1736483094459},{"_id":"node_modules/hexo-theme-solitude/scripts/filter/checkThemeConfig.js","hash":"db78014e14b1178ba511be6f18d734d1919f350d","modified":1737300759599},{"_id":"node_modules/hexo-theme-solitude/scripts/filter/comment.js","hash":"047365413fdc87b97be09de76cdbf090751be2b6","modified":1726533578274},{"_id":"node_modules/hexo-theme-solitude/scripts/filter/default.js","hash":"68b7ec0bf40a30f8c51d5137a217dcf9ab04a19b","modified":1737300759601},{"_id":"node_modules/hexo-theme-solitude/scripts/filter/lazyload.js","hash":"4ed7afc1fbc711a1d575c219a8d4f85c425ed541","modified":1736483094338},{"_id":"node_modules/hexo-theme-solitude/scripts/filter/post_image.js","hash":"b304b4d342e29c6885761031da53c2b859615544","modified":1726533578294},{"_id":"node_modules/hexo-theme-solitude/scripts/filter/randomPosts.js","hash":"1dfe8e768a15e167079147b707c6ea63c3c1f984","modified":1736483094351},{"_id":"node_modules/hexo-theme-solitude/scripts/helper/getArchiveLength.js","hash":"5c5c2fa73722074dd57753fa1eeb8272c2ce8b44","modified":1736483094334},{"_id":"node_modules/hexo-theme-solitude/layout/includes/rightmenu.pug","hash":"d49dacf0d9b88d5db7c4c409a940acf96ee9832f","modified":1736483094635},{"_id":"node_modules/hexo-theme-solitude/layout/includes/loading.pug","hash":"38a56a999cd89f72460d207e24c1a1525ad382cc","modified":1736483094606},{"_id":"node_modules/hexo-theme-solitude/scripts/helper/inject_head_js.js","hash":"f2a4c4ac78baf9518f7f96e581f73143fd608ae9","modified":1726533578280},{"_id":"node_modules/hexo-theme-solitude/scripts/helper/page.js","hash":"b98b06d5f74fc2843c9b77ab93a00c0d3e7dc36a","modified":1736483094347},{"_id":"node_modules/hexo-theme-solitude/scripts/helper/related_post.js","hash":"4ac3ba1db6367530a5c48b36ab38a15746322508","modified":1736483094352},{"_id":"node_modules/hexo-theme-solitude/scripts/helper/stylus.js","hash":"1921b13d374883a31b8e77be276e930c638685b5","modified":1737300759624},{"_id":"node_modules/hexo-theme-solitude/scripts/tags/article.js","hash":"2bb421ce93833cbc11269b646864ba1624305231","modified":1726533578265},{"_id":"node_modules/hexo-theme-solitude/scripts/tags/chart.js","hash":"e05a1ee02be79162c383870880b331f8aa394fde","modified":1726533578270},{"_id":"node_modules/hexo-theme-solitude/scripts/tags/gallery.js","hash":"4e2564aadb7c0a029617cd04b68ec1074e369dfa","modified":1726533578277},{"_id":"node_modules/hexo-theme-solitude/scripts/tags/mermaid.js","hash":"c9596471225c13e7905586a7be765b54db90f358","modified":1726533578288},{"_id":"node_modules/hexo-theme-solitude/scripts/tags/typeit.js","hash":"b4060dc317abeb03174c4756b81cfd63da1c99de","modified":1730126498415},{"_id":"node_modules/hexo-theme-solitude/scripts/tags/tabs.js","hash":"cac3f09588315b2615906b1c8214e3d5d8f17230","modified":1736483094355},{"_id":"node_modules/hexo-theme-solitude/source/img/404.avif","hash":"c1457bb8020167d65f83aba7bc3dd1317595b62a","modified":1726533577633},{"_id":"node_modules/hexo-theme-solitude/layout/includes/sidebar.pug","hash":"3d6de52183032bab4713031214fbfa4acc009c8d","modified":1737300759769},{"_id":"node_modules/hexo-theme-solitude/source/img/default.avif","hash":"3ea1493ebc8b3abc3c90aa1d200aeafc800e7143","modified":1726533577636},{"_id":"node_modules/hexo-theme-solitude/source/css/index.styl","hash":"65bea9c711221f8c7a775aa0ae3b62fcc76ef4b8","modified":1737300759861},{"_id":"node_modules/hexo-theme-solitude/source/css/var.styl","hash":"804eec6bcbf91d68290c9ad7723a403b084aa480","modified":1737300759905},{"_id":"node_modules/hexo-theme-solitude/source/img/error_load.avif","hash":"0f3a009195d641b69b1db8a901394b571668a5ff","modified":1736483093928},{"_id":"node_modules/hexo-theme-solitude/source/img/loading.avif","hash":"82c6e14e40975f9ae0acee8a30d2dc1f46c2831f","modified":1726533577651},{"_id":"node_modules/hexo-theme-solitude/source/js/music.js","hash":"604eee7164e32e33ff6d4ed45ae5c8d911fdabba","modified":1736483094346},{"_id":"node_modules/hexo-theme-solitude/source/js/tw_cn.js","hash":"f565e57edf0609a074455357da8b46a7d0d9fa1c","modified":1736483094452},{"_id":"node_modules/hexo-theme-solitude/source/js/main.js","hash":"0392fdbe34e0923aef487ae0da99f8415f31fd78","modified":1737300759613},{"_id":"node_modules/hexo-theme-solitude/source/js/right_menu.js","hash":"be5339d62c4cd85ceaed797525632d34d9a86191","modified":1736483094353},{"_id":"node_modules/hexo-theme-solitude/layout/includes/body/gadsense.pug","hash":"04749b45bb928a0a4aa02fb25d2f5ffd777d8fb4","modified":1726533578392},{"_id":"node_modules/hexo-theme-solitude/source/js/utils.js","hash":"5ad98865f65193a7f8b6a2c5bde394f375212175","modified":1736483094456},{"_id":"node_modules/hexo-theme-solitude/layout/includes/inject/body.pug","hash":"46b90e6c918567d22881b2cd151f550907e8c129","modified":1737300759698},{"_id":"node_modules/hexo-theme-solitude/layout/includes/inject/head.pug","hash":"9c9fc2eee4975692e96744d04b9a4f8b5601486d","modified":1737300759721},{"_id":"node_modules/hexo-theme-solitude/layout/includes/head/config.pug","hash":"11a4798cec6ac4c2fc48d45bc0babfde113bc832","modified":1737300759706},{"_id":"node_modules/hexo-theme-solitude/layout/includes/mixins/pagination.pug","hash":"e5e9b0411f00b8ec26b08377d4a22808fdf1f13a","modified":1726533578423},{"_id":"node_modules/hexo-theme-solitude/layout/includes/head/opengraph.pug","hash":"271654e099569a817a84d96f8a900821409eae5e","modified":1736483094617},{"_id":"node_modules/hexo-theme-solitude/layout/includes/head/page_config.pug","hash":"a016a7f5832ac33cdb1e9d533b95668ccd09ae44","modified":1736483094620},{"_id":"node_modules/hexo-theme-solitude/layout/includes/head/mode.pug","hash":"a761f72d12a474edb4d23a5c743c0c3da54fcfcb","modified":1726533578412},{"_id":"node_modules/hexo-theme-solitude/layout/includes/page/about.pug","hash":"97635d815b395ffad8d0eb4100bd1fb929541b0f","modified":1726533578330},{"_id":"node_modules/hexo-theme-solitude/layout/includes/mixins/articleSort.pug","hash":"ee88042156ab36294de8a6858108ed2291a2618d","modified":1726533578347},{"_id":"node_modules/hexo-theme-solitude/layout/includes/page/categories.pug","hash":"68557c18b7c885a4b9e685fb1496ec1266a0c9e8","modified":1726533578377},{"_id":"node_modules/hexo-theme-solitude/layout/includes/head/pwa.pug","hash":"f9398b41a64c094eeb96acc0ba4788d63a5481c2","modified":1726533578431},{"_id":"node_modules/hexo-theme-solitude/layout/includes/page/default.pug","hash":"f5facced381a48f63c91ac3af702b2579fa2e748","modified":1736483094582},{"_id":"node_modules/hexo-theme-solitude/layout/includes/page/equipment.pug","hash":"678623c2b6a26e6b6577490d33dd1d65d191b0fa","modified":1726533578389},{"_id":"node_modules/hexo-theme-solitude/layout/includes/page/message.pug","hash":"9fc88429676b9a504239393e0f0d9a5534d1b267","modified":1726533578410},{"_id":"node_modules/hexo-theme-solitude/layout/includes/page/links.pug","hash":"75942a4a021bb64f69d49eb536841a1bca86a47c","modified":1736483094603},{"_id":"node_modules/hexo-theme-solitude/layout/includes/page/music.pug","hash":"a0fed311be3f9a3ade25febfcd1350b7a90f9335","modified":1736483094612},{"_id":"node_modules/hexo-theme-solitude/layout/includes/page/tags.pug","hash":"4c61a3b3c36ff250abc6cb3d3e482473f379e872","modified":1726533578440},{"_id":"node_modules/hexo-theme-solitude/layout/includes/page/recentcomment.pug","hash":"905548e7506efd371ff2925340794cb095c7cbe2","modified":1726533578434},{"_id":"node_modules/hexo-theme-solitude/layout/includes/page/says.pug","hash":"6cda9ba3b82c7b286b92e5c95d6c69b16526bfa7","modified":1726533578437},{"_id":"node_modules/hexo-theme-solitude/layout/includes/page/tlink.pug","hash":"d203b8f68bd8f10d8a576da746e3c529d3beb08f","modified":1726533578442},{"_id":"node_modules/hexo-theme-solitude/source/css/_global/function.styl","hash":"dadb2428445323ad170bd2a01e574af1fca34c30","modified":1730126498621},{"_id":"node_modules/hexo-theme-solitude/source/css/_global/animation.styl","hash":"795bb407118071ab72e2cfc9e0e9818f752d4399","modified":1736483094670},{"_id":"node_modules/hexo-theme-solitude/source/css/_global/index.styl","hash":"9e98c3e10c70bb6d1670326841d742c2a1bf724f","modified":1736483094718},{"_id":"node_modules/hexo-theme-solitude/source/css/_comments/valine.styl","hash":"b74621f4bb81f01d706a18ead8787ed2885fea26","modified":1726533578573},{"_id":"node_modules/hexo-theme-solitude/source/css/_comments/comment.styl","hash":"61ef9db6a90ea3007edb25e2411082ca6e049794","modified":1736483094691},{"_id":"node_modules/hexo-theme-solitude/source/css/_comments/twikoo.styl","hash":"501ff3206ac5d7206b2270ac258ea5f5e09ff1e7","modified":1736483094766},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/article-container.styl","hash":"336b665d24e7efdbc1af767a27013fe900cd121b","modified":1736483094672},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/randomlink.pug","hash":"e816d796cc0753f4a7d91d3e921f36923b1d9882","modified":1726533578433},{"_id":"node_modules/hexo-theme-solitude/source/css/_mode/index.styl","hash":"a7848503e0aed2cb572136394e5e6743438c8526","modified":1726533578515},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/article-sort.styl","hash":"17cd0b192e2e7a37cefef31d360856efe3279671","modified":1726533578469},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/aside.styl","hash":"56b0072915f13aea9011e8a708b7a45798d8257d","modified":1737300759806},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/expire.styl","hash":"71ece963a8ad598909e51188341456623e7d9390","modified":1726533578498},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/console.styl","hash":"fc8749b9c9aa9c6585246457ab51d3e86d4ed73e","modified":1737300759826},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/capsule.styl","hash":"c016485b7aeb9334a04e0a1c79a0cfd35c9e6c12","modified":1730126498592},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/fullpage.styl","hash":"c2a1a5c2176a72eced2dfe0ad18f175bcbfcb9d0","modified":1726533578500},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/keyboard.styl","hash":"01b81e8de4f449100257dba679d36e351ee98bf2","modified":1726533578522},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/footer.styl","hash":"4def29a0f5e672bfa9e51872e9060dbe12ce9881","modified":1737300759838},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/header.styl","hash":"0483d2319493210e4e502fc3d53c0a99e42837ab","modified":1736483094714},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/other.styl","hash":"844d16b1b1e53a38ea390bb4e376132d17105dcc","modified":1726533578535},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/pace.styl","hash":"3f42bc6c0c4aad0c2e7304b748f5b91e51050678","modified":1726533578537},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/pagination.styl","hash":"b5f66655e8cad414c5feea55b6bbce7da53d7332","modified":1726533578538},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/rightmenu.styl","hash":"0fb403d5d0c1241a7217a251538202f4a70ccc7b","modified":1726533578546},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/recent-post.styl","hash":"67d00385371a6d42f5c68cb34c7be32e0b708c81","modified":1736483094750},{"_id":"node_modules/hexo-theme-solitude/source/css/_highlight/color.styl","hash":"619c0e7592248b443849139825aa7905513dc2b9","modified":1726533578483},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/sidebar.styl","hash":"1aa4428efd33e38299a26caa36910e6161be6bd9","modified":1737300759891},{"_id":"node_modules/hexo-theme-solitude/source/css/_highlight/index.styl","hash":"b3cbef790cad49e96d60e67f05d38c11ad711e45","modified":1736483094721},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/category.styl","hash":"3ad97f4bbce49decab88a513918aa95a34bfcd65","modified":1726533578480},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/universe.styl","hash":"f5850f6be5159e90f0db067f9017dab4dbcf94e7","modified":1726533578572},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/equipment.styl","hash":"a914211775d54da80ec254b3f2394f4adc404b75","modified":1728228807555},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/google.styl","hash":"aff534685e24724e0b46009031c838f73ea8a552","modified":1726533578505},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/index.styl","hash":"22b3c2ae3d77d15c4d36dfdb76964a057b962767","modified":1737300759858},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/message.styl","hash":"54d60bc6d6fbb18d62018b06c3d28e038227800c","modified":1726533578530},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/error.styl","hash":"4c4efd0c04b8e6517f957feb78b3ff7a84d84253","modified":1736483094704},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/music.styl","hash":"b7efeca6a790b24648926e9ecb0656d409ab3ad5","modified":1736483094740},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/links.styl","hash":"8c79113a9c870df5250a82b58542576876db6b5b","modified":1736483094734},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/other.styl","hash":"5e7d61502936172d57c38db12c6014f54d067129","modified":1736483094744},{"_id":"node_modules/hexo-theme-solitude/source/css/_tags/mermaid.styl","hash":"5f98bee276d37f8807c4744e8a99673a6ae7b254","modified":1726533578529},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/recentcomment.styl","hash":"9f3e2803e3c80fe3081943e4e1dfbe7b1d4ec2d9","modified":1736483094751},{"_id":"node_modules/hexo-theme-solitude/source/css/_tags/gallery.styl","hash":"290a5109a8a326f15fb6589f4b88139c5b72530b","modified":1736483094710},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/tag.styl","hash":"33352a6b4b1e5c20deccaa3a9fcf01c7d2b3286f","modified":1726533578562},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/says.styl","hash":"805c6fe987328725618d7c9bee8abf7c24fcb0dc","modified":1736483094757},{"_id":"node_modules/hexo-theme-solitude/source/css/_search/local-search.styl","hash":"9ed6a2d214be5f9652bad45e91fefef95544320c","modified":1730126498648},{"_id":"node_modules/hexo-theme-solitude/source/css/_tags/tabs.styl","hash":"ed649474369fa9f538ac3d321064ba434e89dd64","modified":1736483094761},{"_id":"node_modules/hexo-theme-solitude/source/css/_search/algolia-search.styl","hash":"312551fecf102ea135ebed5f8970a51d6a61d81a","modified":1730126498582},{"_id":"node_modules/hexo-theme-solitude/source/css/_post/index.styl","hash":"9f3b388b984cef920e4efc9c33c810d563d7c932","modified":1726533578519},{"_id":"node_modules/hexo-theme-solitude/source/css/_post/ads.styl","hash":"11f79ab8daf53fc3886795bc06e4ad6991a07625","modified":1726533578462},{"_id":"node_modules/hexo-theme-solitude/source/css/_post/copyright.styl","hash":"1a96f975c4f7f3bff4d316b7e776403b4bcc763a","modified":1737300759827},{"_id":"node_modules/hexo-theme-solitude/source/css/_post/commentBarrage.styl","hash":"8e3dbe7b324732903f70e4ae66c5302bef1bdae1","modified":1728228807541},{"_id":"node_modules/hexo-theme-solitude/source/css/_post/pagination.styl","hash":"0615f91ac74f9cc852ea07a29cee0a53479ccbe2","modified":1730126498661},{"_id":"node_modules/hexo-theme-solitude/source/css/_post/postAI.styl","hash":"3fe438ab7c8bb8bdec4d1a175f1b8e370fd0f7ed","modified":1726533578541},{"_id":"node_modules/hexo-theme-solitude/source/css/_post/relatedPost.styl","hash":"717c40d318a2650f3549f51288e5a768db7e20a5","modified":1726533578545},{"_id":"node_modules/hexo-theme-solitude/source/css/_post/meta.styl","hash":"8d1793fd0ab57afa3741490d593021048ae7a0ea","modified":1736483094739},{"_id":"node_modules/hexo-theme-solitude/source/css/third_party/snackbar.min.css","hash":"859ff4766cb4feebb5f5d270de48a97a6dcc6e0e","modified":1726533577788},{"_id":"node_modules/hexo-theme-solitude/source/css/third_party/tianli_talk.styl","hash":"1e83124da113464b41e5ffcb8b2b0d0fce240185","modified":1726533578564},{"_id":"node_modules/hexo-theme-solitude/source/css/_post/tools.styl","hash":"bbe41ecab1df51d68e9c735587d20d9668e54146","modified":1736483094765},{"_id":"node_modules/hexo-theme-solitude/source/img/pwa/favicon.png","hash":"2848fbb8d9a37865f5ecbf5c2a08689fd0cd0042","modified":1726533578327},{"_id":"node_modules/hexo-theme-solitude/source/img/pwa/favicon_16.png","hash":"f518684aa38eb2c5f9004249b4828e59f04460dc","modified":1726533578325},{"_id":"node_modules/hexo-theme-solitude/source/img/pwa/favicon_32.png","hash":"3cf89864b4f6c9b532522a4d260a2e887971c92d","modified":1726533578326},{"_id":"node_modules/hexo-theme-solitude/source/js/covercolor/api.js","hash":"e37dea83ca6827da7a186761d941f8d46be5d012","modified":1736483094317},{"_id":"node_modules/hexo-theme-solitude/source/js/covercolor/ave.js","hash":"a84828eed2fb8e184883f1b97a62bedd9110d61b","modified":1736483094319},{"_id":"node_modules/hexo-theme-solitude/source/js/covercolor/local.js","hash":"e29d2a66159edf3adddc493b942729ee7adf85cd","modified":1736483094339},{"_id":"node_modules/hexo-theme-solitude/source/js/search/algolia.js","hash":"81c50e201dee65d161d061eb91f9b5ce77383037","modified":1730126498371},{"_id":"node_modules/hexo-theme-solitude/source/js/search/local.js","hash":"531ca433f9d4a2da70e3b990b9d9b1efaa3ebb97","modified":1730126498396},{"_id":"node_modules/hexo-theme-solitude/source/js/third_party/post_ai.min.js","hash":"cfd10d5a45f9a553c272607c7ec7dc5018d560ac","modified":1736483094349},{"_id":"node_modules/hexo-theme-solitude/source/js/third_party/envelope.min.js","hash":"ac99b97e978a3903795c6da5b72acdeb79e8f0e6","modified":1736483094332},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/home/bbTimeList.pug","hash":"44a433311f416c077eacc4e01ceb8912a204d39b","modified":1737300759696},{"_id":"node_modules/hexo-theme-solitude/source/js/third_party/barrage.min.js","hash":"f76b699d2e226a65fd36bff1076028873d275b3b","modified":1736483094322},{"_id":"node_modules/hexo-theme-solitude/source/js/third_party/waterfall.min.js","hash":"5de5cf011283621b5ddaf4b5d51716bdfddfab30","modified":1736483094458},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/home/banner.pug","hash":"c0fea1d92edb26c06b94f694ac651e7924cba5a9","modified":1737300759691},{"_id":"node_modules/hexo-theme-solitude/source/js/third_party/universe.min.js","hash":"7fca64ea5e1c936f447d546cda56d1361be05927","modified":1726533578303},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/home/categoryBar.pug","hash":"473e93338244fd13195e52f5e940fc2cdddcdd1a","modified":1726533578379},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/home/hometop.pug","hash":"403046d80b5a8d633679944accad9ad3199d593f","modified":1736483094594},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/home/carousel.pug","hash":"a4890b0bdc7f10333c834c5ba18282a52dca7a60","modified":1726533578376},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/home/postList.pug","hash":"7d778f93d100aa2ca6eae39d550f57d3fb3b8287","modified":1736483094627},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/aside/aside.pug","hash":"faf489ffa2ef8bf8cd8274ff788e429cc98538c5","modified":1737300759672},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/home/topGroup.pug","hash":"44cf68e6ffcc8126e434441d7dae5b35a90a7ae5","modified":1730126498560},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/aside/asideAllInfo.pug","hash":"909af56129391e3fb416912cc4c29f140d210b7a","modified":1726533578350},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/aside/asideAdsense.pug","hash":"13dadcf053b9f8355b437e203b2bd0ae4f16f0f3","modified":1726533578350},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/aside/asideArchive.pug","hash":"6abcb270cc182b15d0b507c59be75af76d89c9a8","modified":1736483094542},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/aside/asideFlipCard.pug","hash":"fe5960ceaa427d03f7a497df408a3d9c34a51520","modified":1726533578353},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/aside/asideNewestPost.pug","hash":"4bb1096c8d3b022340a3fe91d4aa2334b306a34e","modified":1736483094545},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/aside/asideCustom.pug","hash":"793125e321909cec08b4434a3a6483213a3defe8","modified":1726533578353},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/aside/asideInfoCard.pug","hash":"fa028394d8a14edace67172eb33e2f6cece4093f","modified":1737300759677},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/aside/asideNewstComments.pug","hash":"bab59d828cb7d72be4b39d4c7e470f72af1dce37","modified":1726533578356},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/aside/asideTag.pug","hash":"09383aecaea8b588abe166bef4b7ecf49a8a6054","modified":1726533578358},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/nav/group.pug","hash":"c76ece0bd14caf4d10ccee1971e8d2286717ed6e","modified":1726533578394},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/aside/asideSwitch.pug","hash":"bf20d8a022184960f1154d6c43a4bb3a4434e1af","modified":1726533578357},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/aside/asideToc.pug","hash":"96569b21d0022c4176cc4ad3adfd71c5681d1ff2","modified":1726533578359},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/nav/menu.pug","hash":"305453ea227ea47216abaf1c230955f51f30f5e4","modified":1726533578410},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/banner.pug","hash":"0eb735c109989c2aa49df951d61eefcfdec024b0","modified":1726533578368},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/nav/right.pug","hash":"724bcf1cbf85fd5b91f782aee53762468c738ff6","modified":1728228807472},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/aside/asideWebInfo.pug","hash":"14e60eedbe0b2ac3baf1256871e3c1e3d5cf2de5","modified":1728228807372},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/post/post-ai.pug","hash":"63c6a91f7d2330a3965fcc29cd850ecfb70ea5e8","modified":1726533578426},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/post/postInfo.pug","hash":"f1794bbef4485495ce53200acb3b7e52d7ef87f5","modified":1737300759758},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/post/copyright.pug","hash":"4a19e140b495d72880147c06c3c8d860d4e34116","modified":1737300759711},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/post/award.pug","hash":"ccf0d6d7d5002dd0ce6b50338dc63d6478105816","modified":1726533578365},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/post/postMeta.pug","hash":"6c9124233c41eb3732165b9e6da3a9f5e2447481","modified":1726533578429},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/post/postNav.pug","hash":"bffa746e80f81098628f93315a33f18d8d8a92e4","modified":1726533578430},{"_id":"node_modules/hexo-theme-solitude/source/css/_highlight/highlight/diff.styl","hash":"404ee37b06ac1fe68b5d2f7165144e62ee037253","modified":1736483094700},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/post/wave.pug","hash":"2830503992561bac02597081ddf3aaeeb6381e91","modified":1726533578458},{"_id":"node_modules/hexo-theme-solitude/source/css/_highlight/highlight/index.styl","hash":"8629717ea650ba98a2b8539b602bf8edacc8286f","modified":1726533578510},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/music.pug","hash":"13c10589abec35020c89ce4dc70a06d27a2b0b9f","modified":1730126498529},{"_id":"node_modules/hexo-theme-solitude/source/css/_highlight/theme/default.styl","hash":"e0338600f653f5819e28ef57a9fbcaadda3a7e03","modified":1726533578490},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/tianli-talk.pug","hash":"c7bda884fcd052b9c70a58c142beb8ad1162f451","modified":1726533578442},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/pjax.pug","hash":"90a2285044dfdfe558abbc56629e2e4a87e81c3d","modified":1736483094623},{"_id":"node_modules/hexo-theme-solitude/source/css/_highlight/theme/mac.styl","hash":"678a58f97ac5f073d6cb445961bbe631147c1159","modified":1726533578527},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_about/about.styl","hash":"32c48086baff8d6d87bbd1c727b810eaba7f7384","modified":1737300759794},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_about/buff.styl","hash":"a4f0dd595e81d0771eda162f3db6802f4ca3889b","modified":1726533578473},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_about/careers.styl","hash":"0da567d1a2a97889c3051f8fbb54385cb0971b66","modified":1726533578475},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_about/author.styl","hash":"8f5c4679657b3626556dc90c91064d7e9032076f","modified":1726533578472},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_about/game.styl","hash":"6c5fba164eb4b12c719da43309a8f97c7490f3e1","modified":1736483094711},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_about/like.styl","hash":"ecea66672a980eb7ac04e3cff6b0676955ea54b9","modified":1726533578523},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_about/maxim.styl","hash":"13be6971e70444315a74a59e209e5a4779d375f4","modified":1726533578528},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_about/oneself.styl","hash":"3063c0daa04c0aafdb356196c187408b34e717e7","modified":1726533578535},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_about/contentinfo.styl","hash":"981dc969e49174d6275119a7957be7e7df7b0ed7","modified":1737300759827},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_about/personalities.styl","hash":"068605ec579bc964777fbfd53cfb4e761c5558c8","modified":1726533578540},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_about/myphoto.styl","hash":"285714461c9dd130260e22efb6fcfe29c047a816","modified":1726533578534},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_about/statistic.styl","hash":"f6fd73ea0e2645bba98322b669e143327bfefb65","modified":1726533578560},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_about/reward.styl","hash":"5b1650fa77ca2acce4b519df7dcb9a38a434bcd1","modified":1726533578545},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_about/skills.styl","hash":"cb6bad69c2de672f95419d798df9b5cd9b3cc9f8","modified":1736483094759},{"_id":"node_modules/hexo-theme-solitude/source/css/_highlight/prismjs/diff.styl","hash":"6b55ae25f2b0d6f335af9d8e00452e8008bb14a0","modified":1736483094702},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_about/tenyear.styl","hash":"f038c1206f57b39e15f8e9e7be2959f3937263d6","modified":1726533578563},{"_id":"node_modules/hexo-theme-solitude/source/css/_highlight/prismjs/index.styl","hash":"74ed29c33c0db1433866f3a864c1c9cf306ad883","modified":1736483094722},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_gallery/index.styl","hash":"ebf6771a60e01aa5feeb97f975cbe34d0d2ee02f","modified":1726533578517},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_home/carousel.styl","hash":"e17765d82a907cf517c1a2e0d0c15c00496e2186","modified":1726533578477},{"_id":"node_modules/hexo-theme-solitude/source/css/_highlight/prismjs/line-number.styl","hash":"99c89c7018f87302c478f18fb1ac413e2bfa8016","modified":1736483094733},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_home/hot-tip.styl","hash":"7488a3e55ee9a03b22607f249ace0b6c8ea3a9dd","modified":1726533578509},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_home/home-top.styl","hash":"a58b431d2e198365e7b2e614234420d7c30abcdf","modified":1736483094715},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_home/category-bar.styl","hash":"6611a85f9ab96965cdb144561325bafa23ec0c34","modified":1730126498597},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/_home/home.styl","hash":"14230ced60f71e22284dfc57654988e5fffe1cdb","modified":1737300759848},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/home/hot/index.pug","hash":"0aa642b80cbda2b712b58d145dd50b9f4bff4e07","modified":1726533578400},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/equipment/content.pug","hash":"ea5b33cd42133681b7eddf1484feaa0c88e242f2","modified":1726533578386},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/home/hot/artalk.pug","hash":"ada85e8139a4635f10c78a92eaa9b05179458bbb","modified":1726533578335},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/links/banner.pug","hash":"73e59cab0c555fcf056273b68366a375e0d8f4b1","modified":1736483094562},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/links/linksCard.pug","hash":"36be5cf51be31b9bc889c3e0262f99ad168b0896","modified":1736483094604},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/links/linksDiscn.pug","hash":"e754b178c43cc2693f2363fdef94b3ea2d8d97e4","modified":1737300759736},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/links/linksItem.pug","hash":"628dff54edf2333431f0efeb57db74623f4ec559","modified":1736483094606},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/home/hot/twikoo.pug","hash":"929ad6c7becdfc8271ee8231b397ac4888c3c6ac","modified":1726533578444},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/about/award.pug","hash":"624c478cc76e89305480134031b7789fa48a9c5e","modified":1736483094553},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/about/authorinfo.pug","hash":"97dd827681a8c6627b4bd3361cdcdc6319bf2e5a","modified":1726533578362},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/about/hobbies.pug","hash":"ea0f3af02fa31fff250bcb39a311ae0181dcd794","modified":1736483094593},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/about/contentinfo.pug","hash":"26b8991afe08af162da8bbe9d637e9785d7d9991","modified":1737300759710},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/about/motto.pug","hash":"bb5201e7e8b6c65c21bc3e0114460698e76ceace","modified":1726533578413},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/about/personalities.pug","hash":"73500d7b11534fe3f15156f5d01b919d3242c4a1","modified":1726533578424},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/about/other.pug","hash":"2067e64c1a5e0afe46437bbcd4091e7ea5d00114","modified":1726533578420},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/about/skillsinfo.pug","hash":"761dd36a522ec55b841efc7db69ee61a64fc334c","modified":1736483094639},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/about/tenyear.pug","hash":"48a914ef44091a00ae8670abeb31ef6331edbe18","modified":1736483094641},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/message/js.pug","hash":"9e8aa8aaf34863e3d95f3e62fd7519c64c7c0c73","modified":1726533578402},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/message/content.pug","hash":"179917b30d8a370a64b09192fa3dc49473c623f4","modified":1736483094578},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/message/artalk.pug","hash":"3efe88873aaed677238fc0b9de6cf6d646cb7266","modified":1726533578337},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/message/twikoo.pug","hash":"f21212730130ef2f784a300388757443f4b4f19f","modified":1726533578445},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/recentcomment/artalk.pug","hash":"ee3e9b1857503c8d9abf21017f71a3b351d90d5c","modified":1737300759657},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/message/valine.pug","hash":"545b5594b94836260e724f75efab3939a71cc664","modified":1726533578449},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/recentcomment/twikoo.pug","hash":"54becaec14705e426132332247080da989520cdb","modified":1737300759777},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/search/local-search.pug","hash":"4d9908b6eba679e1cfe043ade2c04e0038e2dc3c","modified":1726533578409},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/search/index.pug","hash":"5d8cb650e490f9e6c298512fc3362d1c914cd7cc","modified":1737300759727},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/search/algolia-search.pug","hash":"f13a857441d1be25af4d4e3994ff1059ecc0d73e","modified":1730126498438},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/recentcomment/valine.pug","hash":"16fb1d366e758554dd0cc18eb3452a328754de5c","modified":1737300759783},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/comments/comment.pug","hash":"4f0539611e259ae439599df2d0a9ce15455dd32d","modified":1728228807397},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/recentcomment/waline.pug","hash":"51276b2cc7ef990ef1fd4403f74092b970855315","modified":1737300759788},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/message/waline.pug","hash":"4152a5fb01b6225339ab698c7dc45f61669abd28","modified":1726533578453},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/comments/artalk.pug","hash":"2ad0162189b1967acb4f645fd3647d8d18e97bf9","modified":1726533578343},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/comments/waline.pug","hash":"41469e4acdca5aa149561294f5daeb6ccc4b2d49","modified":1726533578456},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/comments/giscus.pug","hash":"4a5b7784b3d3b68bd6adc7bbca865373849cc413","modified":1728228807417},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/comments/js.pug","hash":"e4d63a124c6cf6d41732512bc29031ee817ed589","modified":1726533578403},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/comments/valine.pug","hash":"2e4a2d355d8b859b649822e45e45dd9c8fdc30a4","modified":1726533578451},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/comments/twikoo.pug","hash":"79076d6a838fe1be6ef631e6f1778020e687a3f3","modified":1726533578447},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/news-comment/artalk.pug","hash":"efa89de71c67ddcf9c5b727734c7d0391d3fe32a","modified":1726533578345},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/news-comment/newest-comment.pug","hash":"5fbae57543d7271617ef352bf66fa31ca1d470e9","modified":1728228807451},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/news-comment/twikoo.pug","hash":"a1ce1e421a738d0f2d989ca1920c2d69d986aa8a","modified":1726533578448},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/news-comment/waline.pug","hash":"8c5c7ead0892efeabbbfaf8550c4a4c1b4252edd","modified":1726533578457},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/news-comment/valine.pug","hash":"6a98a786a1947702954932e9b3ef1847f53cfb01","modified":1726533578452},{"_id":"node_modules/hexo-theme-solitude/source/img/flower.gif","hash":"7032c79c5e077609dde5619c5946bd96873994d8","modified":1726533578257},{"_id":"node_modules/hexo-theme-solitude/layout/includes/rightside.pug","hash":"ead5944b2c366bbfa02ff66c5796c0ebdb066aa4","modified":1736483094636},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/rightside/hide.pug","hash":"4b9a5811a0e8febeb7abb647e97b1787ab43eac2","modified":1736483094592},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/rightside/show.pug","hash":"e6cc890418e9f1db365e9346fc2c016b57d6c828","modified":1736483094636},{"_id":"node_modules/hexo-theme-solitude/source/css/_layout/rightside.styl","hash":"25d1b930302e7be58a09b7e850af9bc3646032af","modified":1736483094756},{"_id":"node_modules/hexo-theme-solitude/README_en-US.md","hash":"1c52db7cd9d4d433c772d5c37a4ca458d34134c8","modified":1737300759637},{"_id":"node_modules/hexo-theme-solitude/layout/includes/page/kit.pug","hash":"6080eb27c6c65d4c511b0d492f2ca9f4ad597d00","modified":1736483094600},{"_id":"node_modules/hexo-theme-solitude/layout/includes/mixins/pace.pug","hash":"59e8c80028583ee8182dcf75816f336b4edcf4b8","modified":1736483094619},{"_id":"node_modules/hexo-theme-solitude/layout/includes/page/brevity.pug","hash":"fdcf6893180f99af3494e73096bd965c1d38c987","modified":1737300759699},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/sidebar/artalk.pug","hash":"a30c052ed48c64f4da9101a64df9b7f7ebf0c8ed","modified":1736483094526},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/sidebar/comment.pug","hash":"bb36441ef757dd1f3a53f6cd327db449147c8a51","modified":1736483094571},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/sidebar/twikoo.pug","hash":"9ad6facab6c103dd4010579172360cff4741d682","modified":1737300759778},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/sidebar/valine.pug","hash":"640e8d7058b71a13a89cf67b0437d0b0695bd66c","modified":1736483094652},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/sidebar/waline.pug","hash":"0a5c87e64b435185b201e03a6dcfada007e299e7","modified":1736483094657},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/hot/index.pug","hash":"0aa642b80cbda2b712b58d145dd50b9f4bff4e07","modified":1736483094594},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/page/kit/content.pug","hash":"3e3ced2401d65111af67749f8b4c908c9e79eb5e","modified":1737300759709},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/hot/twikoo.pug","hash":"5e1611fd81be91e18c9c65de5a1684e500124178","modified":1736483094648},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/hot/artalk.pug","hash":"813f7859ff060d34fe6748875df6b8bd7b964fce","modified":1736483094531},{"_id":"node_modules/hexo-theme-solitude/source/img/default_avatar.avif","hash":"b81c8da6a715a300605a4d453c5d5bfe595c1f69","modified":1737300758897},{"_id":"node_modules/hexo-theme-solitude/.github/workflows/release.yml","hash":"415f01bf2de83b508a3ea6efdab1242be3204c7f","modified":1737300760086},{"_id":"node_modules/hexo-theme-solitude/source/img/logo.png","hash":"6c928a3633bfbf3eaff4a3885edff5b3017ed6c6","modified":1737300759645},{"_id":"node_modules/hexo-theme-solitude/source/css/_components/capsule.styl","hash":"759c67becc318c5eb1b788e0dee123da5279654d","modified":1737300759813},{"_id":"node_modules/hexo-theme-solitude/source/css/_components/index.styl","hash":"303111a5d6e4f0bb9c5dae3e2e03627bc2494193","modified":1737300759850},{"_id":"node_modules/hexo-theme-solitude/source/css/_components/expire.styl","hash":"76b281b6b4f51a993560e06f6e7cff25de14482f","modified":1737300759837},{"_id":"node_modules/hexo-theme-solitude/source/css/_components/keyboard.styl","hash":"a7a6ddc4a548af707c7562fb2deda8522d2649c9","modified":1737300759862},{"_id":"node_modules/hexo-theme-solitude/source/css/_components/pace.styl","hash":"876c7a53ff21ff58e25355d07899dcb2f0f6a599","modified":1737300759878},{"_id":"node_modules/hexo-theme-solitude/source/css/_components/universe.styl","hash":"75a646acfa73f7f9a45ab3959b2009becc951ca1","modified":1737300759902},{"_id":"node_modules/hexo-theme-solitude/source/css/_page/brevity.styl","hash":"516a642ced7c58d04638f561ddf445dfb039a9fb","modified":1737300759810},{"_id":"node_modules/hexo-theme-solitude/layout/includes/widgets/third-party/search/docsearch.pug","hash":"3e8c65a05f34538a7f69340dbb65e5313911f90a","modified":1737300759713},{"_id":"node_modules/hexo-theme-solitude/source/css/_components/rightside.styl","hash":"401951b2e6113e164ccf628a6bfdc0f80c893090","modified":1737300759890}],"Category":[{"name":"数据结构","_id":"clyliw08p0004tch8aw42e54u"},{"name":"API","_id":"clyliw08t000ctch868i55a1d"},{"name":"算法","_id":"clyliw08w000jtch8gskr18fj"},{"name":"方法论","_id":"clyliw08y000ptch81qi539bv"},{"name":"算法","parent":"clyliw08p0004tch8aw42e54u","_id":"clyliw090000wtch89rr926lb"},{"name":"[[ReprintTypscriptDecorator]]","parent":"clyliw08w000jtch8gskr18fj","_id":"clyliw098001rtch8h4ucato0"},{"name":"实践","_id":"clyliw0990020tch84qmc4ta1"},{"name":"转载","_id":"clyliw09a0026tch8asj48pdo"},{"name":"[[ReprintTypscriptDecorator]]","parent":"clyliw090000wtch89rr926lb","_id":"clyliw09a002btch8cjm41lv1"},{"name":"一些有趣的问题","_id":"clyliw09d002utch8bws1esav"},{"name":"源码","_id":"clyliw09k003stch87w8bdlkc"}],"Data":[],"Page":[{"_content":"# ABOUT ME\n\n## `雷猴呀`\n\n这里是我的一些个人信息\n\n## 个人信息\n- 名字：严子诚\n- 手机：15388956175\n- 邮箱：zxc66war3@outlook.com\n- 微信：ped-Yc\n- github：https://github.com/ped-Yc\n- 工作年限：3年+\n\n## 教育背景\n- 毕业院校：湖南科技学院\n- 专业：信息与计算科学\n- 证书：省级数学建模大赛2等奖、CET4\n\n## 技术栈\n- 常用技术栈：Angular+RxJS，Vue+Vite，Webpack，了解过Node和Koa，但不熟练\n- 熟悉常用基础算法，leetcode题目数量100+，通过率60%\n- 对前端工程化有一定理解，撰写过文章，实现过自定义脚手架，实践过Webpack配置、包模块分析\n- 对前端可视化有一定了解，实践过ECharts来实现多图表、大屏等需求\n- 热衷于知识管理，维护项目前端域的开发wiki，独立撰写过项目前端域的新人引导文档\n- 熟悉敏捷开发、DevOps开发流程，能把握在什么时候做什么事\n- 目前专注于做一个更自律更积极的人：工作、锻炼、读书、学习算法、写博客，努力成为更好的自己\n\n## 工作经历\n- 北京易诚互动网络技术股份有限公司 2019~2020\n- 北京中软国际信息技术有限公司 2021~2022\n\n## 重点项目\n- 顺德农商银行手机app\n  - 项目介绍：顺德农商银行手机app是一个中大型的金融银行类app，项目采用大中台、小前台类架构模式，采用敏捷式开发。实现了常用金融项目的全部功能模块，例如基金、理财、风险评估、我的、贷款、取款、私人银行、安全中心等。\n  - 技术栈：ynet（vue2再封装） + mPasS（支付宝移动开发平台） + AntMobile（UI组件库）+ Webpack（打包）\n  - 参与模块：我的、基金、风险评估、理财等。\n  - 负责任务：前后端交流实现需求，贡献部分公共组件、方法，公共组件API撰写，部分Webpack配置。\n  - 难点：\n    - 1.移动端兼容性问题。难点在于定位问题，通过深入ynet框架了解到是配置的mPasS对应的webview版本太高，没做兼容性适配导致的，后来加了判断条件兼容了多种webview。通过这个问题了解npm命令工作流程，也懂得了怎样定位一个并不好定位的问题。\n    - 2.白屏时间过长问题。做了一些优化，按需引用第三方库(babel-plugin-component)，静态资源gzip压缩，对长列表组件进行了优化，改成了虚拟列表懒渲染，做了代码分割，对一些较大较老的公共方法文件进行了优化。\n\n- CloudCMDB\n  - 项目介绍：华为云资源配置管理库，该项目主要用于华为云资源的分配管理，隶属于华为云运维平台，采用DevOps开发工作流程，实现的功能有：标签管理、告警管理、配置管理、系统管理、权限管理、Agent管理、前端监控等。\n  - 技术栈：AngularJS(重构前)、Angular(重构后) + 华为Console框架（提供公共服务和视图） + TinyUI(UI组件库) + Webpack（打包）\n  - 负责任务：重构前代码开发维护、项目重构、新人引导文档撰写、部分公共组件、方法、指令、装饰器编写，少量大屏需求，首屏优化（埋点、重构）。\n  - 难点：\n    - 1.重构初期的选型与实施。因为是第一次做重构，先期有许多要点搞不清楚，怎样保证原有功能的完整性并且构建一个健壮的可维护项目是一个难题，另外旧项目代码量巨大，旧版本AngularJS许多公共方法和组件重叠在一起，要抽离哪些可用方法和组件，删除或重构哪些方法和组件都需要抉择。解决方案是回顾先期需求、要求后端更新完整的API文档、组件和方法遵从由大粒度到小粒度的重构原则，先期约定好代码规范、提交规范，优先抽离全局组件和方法，约定好代码模板和指令装饰器编写方式等等。\n    - 2.首屏优化和不常用功能剥离，主要做的有组件懒加载、本地缓存、通过Webpack Bundle Analyzer分析优化不需要的库和代码（Angular本身会做tree shaking）,使用AoT编译，业务逻辑分离减少首屏http请求等。\n\n\n\n\n## 兴趣爱好\n- 游戏：DOTA2（万古水平）、魂系、ACT类（战神、鬼泣）、魔兽骨灰玩家、解谜类\n- 运动：晚跑、足球（好久没踢了）\n- 音乐：喜欢陈奕迅、张学友、毛不易\n- 读书：喜欢社科类、历史类，喜欢战国策、古文观止，喜欢李白、辛弃疾\n- 编程：前端程序员，喜欢Vue、Typescript，对后端真不熟\n- 其他：对摄影有兴趣，不过还没开始，会一点点口琴，和不会也差不多\n\n## `那就这样咯`\n\n差不多就这样、囧","source":"about/index.md","raw":"# ABOUT ME\n\n## `雷猴呀`\n\n这里是我的一些个人信息\n\n## 个人信息\n- 名字：严子诚\n- 手机：15388956175\n- 邮箱：zxc66war3@outlook.com\n- 微信：ped-Yc\n- github：https://github.com/ped-Yc\n- 工作年限：3年+\n\n## 教育背景\n- 毕业院校：湖南科技学院\n- 专业：信息与计算科学\n- 证书：省级数学建模大赛2等奖、CET4\n\n## 技术栈\n- 常用技术栈：Angular+RxJS，Vue+Vite，Webpack，了解过Node和Koa，但不熟练\n- 熟悉常用基础算法，leetcode题目数量100+，通过率60%\n- 对前端工程化有一定理解，撰写过文章，实现过自定义脚手架，实践过Webpack配置、包模块分析\n- 对前端可视化有一定了解，实践过ECharts来实现多图表、大屏等需求\n- 热衷于知识管理，维护项目前端域的开发wiki，独立撰写过项目前端域的新人引导文档\n- 熟悉敏捷开发、DevOps开发流程，能把握在什么时候做什么事\n- 目前专注于做一个更自律更积极的人：工作、锻炼、读书、学习算法、写博客，努力成为更好的自己\n\n## 工作经历\n- 北京易诚互动网络技术股份有限公司 2019~2020\n- 北京中软国际信息技术有限公司 2021~2022\n\n## 重点项目\n- 顺德农商银行手机app\n  - 项目介绍：顺德农商银行手机app是一个中大型的金融银行类app，项目采用大中台、小前台类架构模式，采用敏捷式开发。实现了常用金融项目的全部功能模块，例如基金、理财、风险评估、我的、贷款、取款、私人银行、安全中心等。\n  - 技术栈：ynet（vue2再封装） + mPasS（支付宝移动开发平台） + AntMobile（UI组件库）+ Webpack（打包）\n  - 参与模块：我的、基金、风险评估、理财等。\n  - 负责任务：前后端交流实现需求，贡献部分公共组件、方法，公共组件API撰写，部分Webpack配置。\n  - 难点：\n    - 1.移动端兼容性问题。难点在于定位问题，通过深入ynet框架了解到是配置的mPasS对应的webview版本太高，没做兼容性适配导致的，后来加了判断条件兼容了多种webview。通过这个问题了解npm命令工作流程，也懂得了怎样定位一个并不好定位的问题。\n    - 2.白屏时间过长问题。做了一些优化，按需引用第三方库(babel-plugin-component)，静态资源gzip压缩，对长列表组件进行了优化，改成了虚拟列表懒渲染，做了代码分割，对一些较大较老的公共方法文件进行了优化。\n\n- CloudCMDB\n  - 项目介绍：华为云资源配置管理库，该项目主要用于华为云资源的分配管理，隶属于华为云运维平台，采用DevOps开发工作流程，实现的功能有：标签管理、告警管理、配置管理、系统管理、权限管理、Agent管理、前端监控等。\n  - 技术栈：AngularJS(重构前)、Angular(重构后) + 华为Console框架（提供公共服务和视图） + TinyUI(UI组件库) + Webpack（打包）\n  - 负责任务：重构前代码开发维护、项目重构、新人引导文档撰写、部分公共组件、方法、指令、装饰器编写，少量大屏需求，首屏优化（埋点、重构）。\n  - 难点：\n    - 1.重构初期的选型与实施。因为是第一次做重构，先期有许多要点搞不清楚，怎样保证原有功能的完整性并且构建一个健壮的可维护项目是一个难题，另外旧项目代码量巨大，旧版本AngularJS许多公共方法和组件重叠在一起，要抽离哪些可用方法和组件，删除或重构哪些方法和组件都需要抉择。解决方案是回顾先期需求、要求后端更新完整的API文档、组件和方法遵从由大粒度到小粒度的重构原则，先期约定好代码规范、提交规范，优先抽离全局组件和方法，约定好代码模板和指令装饰器编写方式等等。\n    - 2.首屏优化和不常用功能剥离，主要做的有组件懒加载、本地缓存、通过Webpack Bundle Analyzer分析优化不需要的库和代码（Angular本身会做tree shaking）,使用AoT编译，业务逻辑分离减少首屏http请求等。\n\n\n\n\n## 兴趣爱好\n- 游戏：DOTA2（万古水平）、魂系、ACT类（战神、鬼泣）、魔兽骨灰玩家、解谜类\n- 运动：晚跑、足球（好久没踢了）\n- 音乐：喜欢陈奕迅、张学友、毛不易\n- 读书：喜欢社科类、历史类，喜欢战国策、古文观止，喜欢李白、辛弃疾\n- 编程：前端程序员，喜欢Vue、Typescript，对后端真不熟\n- 其他：对摄影有兴趣，不过还没开始，会一点点口琴，和不会也差不多\n\n## `那就这样咯`\n\n差不多就这样、囧","date":"2024-07-14T01:09:19.958Z","updated":"2024-07-14T01:09:19.958Z","path":"about/index.html","title":"","comments":1,"layout":"page","_id":"clyliw08n0002tch81vn09j1i","content":"<h1 id=\"ABOUT-ME\"><a href=\"#ABOUT-ME\" class=\"headerlink\" title=\"ABOUT ME\"></a>ABOUT ME</h1><h2 id=\"雷猴呀\"><a href=\"#雷猴呀\" class=\"headerlink\" title=\"雷猴呀\"></a><code>雷猴呀</code></h2><p>这里是我的一些个人信息</p>\n<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>名字：严子诚</li>\n<li>手机：15388956175</li>\n<li>邮箱：<a class=\"link\"   href=\"mailto:&#122;&#120;&#99;&#54;&#54;&#119;&#97;&#x72;&#x33;&#64;&#111;&#117;&#116;&#108;&#111;&#111;&#107;&#x2e;&#99;&#111;&#109;\" >&#122;&#120;&#99;&#54;&#54;&#119;&#97;&#x72;&#x33;&#64;&#111;&#117;&#116;&#108;&#111;&#111;&#107;&#x2e;&#99;&#111;&#109; <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li>微信：ped-Yc</li>\n<li>github：<a class=\"link\"   href=\"https://github.com/ped-Yc\" >https://github.com/ped-Yc <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li>工作年限：3年+</li>\n</ul>\n<h2 id=\"教育背景\"><a href=\"#教育背景\" class=\"headerlink\" title=\"教育背景\"></a>教育背景</h2><ul>\n<li>毕业院校：湖南科技学院</li>\n<li>专业：信息与计算科学</li>\n<li>证书：省级数学建模大赛2等奖、CET4</li>\n</ul>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><ul>\n<li>常用技术栈：Angular+RxJS，Vue+Vite，Webpack，了解过Node和Koa，但不熟练</li>\n<li>熟悉常用基础算法，leetcode题目数量100+，通过率60%</li>\n<li>对前端工程化有一定理解，撰写过文章，实现过自定义脚手架，实践过Webpack配置、包模块分析</li>\n<li>对前端可视化有一定了解，实践过ECharts来实现多图表、大屏等需求</li>\n<li>热衷于知识管理，维护项目前端域的开发wiki，独立撰写过项目前端域的新人引导文档</li>\n<li>熟悉敏捷开发、DevOps开发流程，能把握在什么时候做什么事</li>\n<li>目前专注于做一个更自律更积极的人：工作、锻炼、读书、学习算法、写博客，努力成为更好的自己</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><ul>\n<li>北京易诚互动网络技术股份有限公司 2019~2020</li>\n<li>北京中软国际信息技术有限公司 2021~2022</li>\n</ul>\n<h2 id=\"重点项目\"><a href=\"#重点项目\" class=\"headerlink\" title=\"重点项目\"></a>重点项目</h2><ul>\n<li><p>顺德农商银行手机app</p>\n<ul>\n<li>项目介绍：顺德农商银行手机app是一个中大型的金融银行类app，项目采用大中台、小前台类架构模式，采用敏捷式开发。实现了常用金融项目的全部功能模块，例如基金、理财、风险评估、我的、贷款、取款、私人银行、安全中心等。</li>\n<li>技术栈：ynet（vue2再封装） + mPasS（支付宝移动开发平台） + AntMobile（UI组件库）+ Webpack（打包）</li>\n<li>参与模块：我的、基金、风险评估、理财等。</li>\n<li>负责任务：前后端交流实现需求，贡献部分公共组件、方法，公共组件API撰写，部分Webpack配置。</li>\n<li>难点：<ul>\n<li>1.移动端兼容性问题。难点在于定位问题，通过深入ynet框架了解到是配置的mPasS对应的webview版本太高，没做兼容性适配导致的，后来加了判断条件兼容了多种webview。通过这个问题了解npm命令工作流程，也懂得了怎样定位一个并不好定位的问题。</li>\n<li>2.白屏时间过长问题。做了一些优化，按需引用第三方库(babel-plugin-component)，静态资源gzip压缩，对长列表组件进行了优化，改成了虚拟列表懒渲染，做了代码分割，对一些较大较老的公共方法文件进行了优化。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>CloudCMDB</p>\n<ul>\n<li>项目介绍：华为云资源配置管理库，该项目主要用于华为云资源的分配管理，隶属于华为云运维平台，采用DevOps开发工作流程，实现的功能有：标签管理、告警管理、配置管理、系统管理、权限管理、Agent管理、前端监控等。</li>\n<li>技术栈：AngularJS(重构前)、Angular(重构后) + 华为Console框架（提供公共服务和视图） + TinyUI(UI组件库) + Webpack（打包）</li>\n<li>负责任务：重构前代码开发维护、项目重构、新人引导文档撰写、部分公共组件、方法、指令、装饰器编写，少量大屏需求，首屏优化（埋点、重构）。</li>\n<li>难点：<ul>\n<li>1.重构初期的选型与实施。因为是第一次做重构，先期有许多要点搞不清楚，怎样保证原有功能的完整性并且构建一个健壮的可维护项目是一个难题，另外旧项目代码量巨大，旧版本AngularJS许多公共方法和组件重叠在一起，要抽离哪些可用方法和组件，删除或重构哪些方法和组件都需要抉择。解决方案是回顾先期需求、要求后端更新完整的API文档、组件和方法遵从由大粒度到小粒度的重构原则，先期约定好代码规范、提交规范，优先抽离全局组件和方法，约定好代码模板和指令装饰器编写方式等等。</li>\n<li>2.首屏优化和不常用功能剥离，主要做的有组件懒加载、本地缓存、通过Webpack Bundle Analyzer分析优化不需要的库和代码（Angular本身会做tree shaking）,使用AoT编译，业务逻辑分离减少首屏http请求等。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"兴趣爱好\"><a href=\"#兴趣爱好\" class=\"headerlink\" title=\"兴趣爱好\"></a>兴趣爱好</h2><ul>\n<li>游戏：DOTA2（万古水平）、魂系、ACT类（战神、鬼泣）、魔兽骨灰玩家、解谜类</li>\n<li>运动：晚跑、足球（好久没踢了）</li>\n<li>音乐：喜欢陈奕迅、张学友、毛不易</li>\n<li>读书：喜欢社科类、历史类，喜欢战国策、古文观止，喜欢李白、辛弃疾</li>\n<li>编程：前端程序员，喜欢Vue、Typescript，对后端真不熟</li>\n<li>其他：对摄影有兴趣，不过还没开始，会一点点口琴，和不会也差不多</li>\n</ul>\n<h2 id=\"那就这样咯\"><a href=\"#那就这样咯\" class=\"headerlink\" title=\"那就这样咯\"></a><code>那就这样咯</code></h2><p>差不多就这样、囧</p>\n","excerpt":"","more":"<h1 id=\"ABOUT-ME\"><a href=\"#ABOUT-ME\" class=\"headerlink\" title=\"ABOUT ME\"></a>ABOUT ME</h1><h2 id=\"雷猴呀\"><a href=\"#雷猴呀\" class=\"headerlink\" title=\"雷猴呀\"></a><code>雷猴呀</code></h2><p>这里是我的一些个人信息</p>\n<h2 id=\"个人信息\"><a href=\"#个人信息\" class=\"headerlink\" title=\"个人信息\"></a>个人信息</h2><ul>\n<li>名字：严子诚</li>\n<li>手机：15388956175</li>\n<li>邮箱：<a class=\"link\"   href=\"mailto:&#122;&#120;&#99;&#54;&#54;&#119;&#97;&#x72;&#x33;&#64;&#111;&#117;&#116;&#108;&#111;&#111;&#107;&#x2e;&#99;&#111;&#109;\" >&#122;&#120;&#99;&#54;&#54;&#119;&#97;&#x72;&#x33;&#64;&#111;&#117;&#116;&#108;&#111;&#111;&#107;&#x2e;&#99;&#111;&#109; <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li>微信：ped-Yc</li>\n<li>github：<a class=\"link\"   href=\"https://github.com/ped-Yc\" >https://github.com/ped-Yc <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li>工作年限：3年+</li>\n</ul>\n<h2 id=\"教育背景\"><a href=\"#教育背景\" class=\"headerlink\" title=\"教育背景\"></a>教育背景</h2><ul>\n<li>毕业院校：湖南科技学院</li>\n<li>专业：信息与计算科学</li>\n<li>证书：省级数学建模大赛2等奖、CET4</li>\n</ul>\n<h2 id=\"技术栈\"><a href=\"#技术栈\" class=\"headerlink\" title=\"技术栈\"></a>技术栈</h2><ul>\n<li>常用技术栈：Angular+RxJS，Vue+Vite，Webpack，了解过Node和Koa，但不熟练</li>\n<li>熟悉常用基础算法，leetcode题目数量100+，通过率60%</li>\n<li>对前端工程化有一定理解，撰写过文章，实现过自定义脚手架，实践过Webpack配置、包模块分析</li>\n<li>对前端可视化有一定了解，实践过ECharts来实现多图表、大屏等需求</li>\n<li>热衷于知识管理，维护项目前端域的开发wiki，独立撰写过项目前端域的新人引导文档</li>\n<li>熟悉敏捷开发、DevOps开发流程，能把握在什么时候做什么事</li>\n<li>目前专注于做一个更自律更积极的人：工作、锻炼、读书、学习算法、写博客，努力成为更好的自己</li>\n</ul>\n<h2 id=\"工作经历\"><a href=\"#工作经历\" class=\"headerlink\" title=\"工作经历\"></a>工作经历</h2><ul>\n<li>北京易诚互动网络技术股份有限公司 2019~2020</li>\n<li>北京中软国际信息技术有限公司 2021~2022</li>\n</ul>\n<h2 id=\"重点项目\"><a href=\"#重点项目\" class=\"headerlink\" title=\"重点项目\"></a>重点项目</h2><ul>\n<li><p>顺德农商银行手机app</p>\n<ul>\n<li>项目介绍：顺德农商银行手机app是一个中大型的金融银行类app，项目采用大中台、小前台类架构模式，采用敏捷式开发。实现了常用金融项目的全部功能模块，例如基金、理财、风险评估、我的、贷款、取款、私人银行、安全中心等。</li>\n<li>技术栈：ynet（vue2再封装） + mPasS（支付宝移动开发平台） + AntMobile（UI组件库）+ Webpack（打包）</li>\n<li>参与模块：我的、基金、风险评估、理财等。</li>\n<li>负责任务：前后端交流实现需求，贡献部分公共组件、方法，公共组件API撰写，部分Webpack配置。</li>\n<li>难点：<ul>\n<li>1.移动端兼容性问题。难点在于定位问题，通过深入ynet框架了解到是配置的mPasS对应的webview版本太高，没做兼容性适配导致的，后来加了判断条件兼容了多种webview。通过这个问题了解npm命令工作流程，也懂得了怎样定位一个并不好定位的问题。</li>\n<li>2.白屏时间过长问题。做了一些优化，按需引用第三方库(babel-plugin-component)，静态资源gzip压缩，对长列表组件进行了优化，改成了虚拟列表懒渲染，做了代码分割，对一些较大较老的公共方法文件进行了优化。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>CloudCMDB</p>\n<ul>\n<li>项目介绍：华为云资源配置管理库，该项目主要用于华为云资源的分配管理，隶属于华为云运维平台，采用DevOps开发工作流程，实现的功能有：标签管理、告警管理、配置管理、系统管理、权限管理、Agent管理、前端监控等。</li>\n<li>技术栈：AngularJS(重构前)、Angular(重构后) + 华为Console框架（提供公共服务和视图） + TinyUI(UI组件库) + Webpack（打包）</li>\n<li>负责任务：重构前代码开发维护、项目重构、新人引导文档撰写、部分公共组件、方法、指令、装饰器编写，少量大屏需求，首屏优化（埋点、重构）。</li>\n<li>难点：<ul>\n<li>1.重构初期的选型与实施。因为是第一次做重构，先期有许多要点搞不清楚，怎样保证原有功能的完整性并且构建一个健壮的可维护项目是一个难题，另外旧项目代码量巨大，旧版本AngularJS许多公共方法和组件重叠在一起，要抽离哪些可用方法和组件，删除或重构哪些方法和组件都需要抉择。解决方案是回顾先期需求、要求后端更新完整的API文档、组件和方法遵从由大粒度到小粒度的重构原则，先期约定好代码规范、提交规范，优先抽离全局组件和方法，约定好代码模板和指令装饰器编写方式等等。</li>\n<li>2.首屏优化和不常用功能剥离，主要做的有组件懒加载、本地缓存、通过Webpack Bundle Analyzer分析优化不需要的库和代码（Angular本身会做tree shaking）,使用AoT编译，业务逻辑分离减少首屏http请求等。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"兴趣爱好\"><a href=\"#兴趣爱好\" class=\"headerlink\" title=\"兴趣爱好\"></a>兴趣爱好</h2><ul>\n<li>游戏：DOTA2（万古水平）、魂系、ACT类（战神、鬼泣）、魔兽骨灰玩家、解谜类</li>\n<li>运动：晚跑、足球（好久没踢了）</li>\n<li>音乐：喜欢陈奕迅、张学友、毛不易</li>\n<li>读书：喜欢社科类、历史类，喜欢战国策、古文观止，喜欢李白、辛弃疾</li>\n<li>编程：前端程序员，喜欢Vue、Typescript，对后端真不熟</li>\n<li>其他：对摄影有兴趣，不过还没开始，会一点点口琴，和不会也差不多</li>\n</ul>\n<h2 id=\"那就这样咯\"><a href=\"#那就这样咯\" class=\"headerlink\" title=\"那就这样咯\"></a><code>那就这样咯</code></h2><p>差不多就这样、囧</p>\n"},{"title":"categories","date":"2023-01-31T19:23:07.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2023-02-01 03:23:07\n---\n","updated":"2024-07-14T01:09:19.960Z","path":"categories/index.html","comments":1,"layout":"page","_id":"clyliw08r0006tch83tggezfc","content":"","excerpt":"","more":""},{"title":"tags","date":"2023-01-31T18:28:27.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2023-02-01 02:28:27\n---\n","updated":"2024-07-14T01:09:19.965Z","path":"tags/index.html","comments":1,"layout":"page","_id":"clyliw08t000atch8gqzghxg9","content":"","excerpt":"","more":""},{"_content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>简历</title>\n</head>\n\n<body>\n  <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n  <div id=\"app\">{{ message }}</div>\n\n  <script>\n    const { createApp } = Vue\n\n    createApp({\n      data() {\n        return {\n          message: 'Hello Vue!'\n        }\n      }\n    }).mount('#app')\n  </script>\n\n</body>\n\n</html>","source":"cv/index.html","raw":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>简历</title>\n</head>\n\n<body>\n  <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n  <div id=\"app\">{{ message }}</div>\n\n  <script>\n    const { createApp } = Vue\n\n    createApp({\n      data() {\n        return {\n          message: 'Hello Vue!'\n        }\n      }\n    }).mount('#app')\n  </script>\n\n</body>\n\n</html>","date":"2024-07-14T01:09:19.962Z","updated":"2024-07-14T01:09:19.962Z","path":"cv/index.html","title":"","comments":1,"layout":"page","_id":"clyliw08v000htch87otw1oxe","content":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>简历</title>\n</head>\n\n<body>\n  <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n  <div id=\"app\"></div>\n\n  <script>\n    const { createApp } = Vue\n\n    createApp({\n      data() {\n        return {\n          message: 'Hello Vue!'\n        }\n      }\n    }).mount('#app')\n  </script>\n\n</body>\n\n</html>","excerpt":"","more":"<!DOCTYPE html>\n<html lang=\"en\">\n\n<head>\n  <meta charset=\"UTF-8\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>简历</title>\n</head>\n\n<body>\n  <script src=\"https://unpkg.com/vue@3/dist/vue.global.js\"></script>\n\n  <div id=\"app\"></div>\n\n  <script>\n    const { createApp } = Vue\n\n    createApp({\n      data() {\n        return {\n          message: 'Hello Vue!'\n        }\n      }\n    }).mount('#app')\n  </script>\n\n</body>\n\n</html>"},{"_content":"const editBtn = document.querySelector(\".edit\")\nconst statement = document.querySelector(\".statement .title\")\nconst detail = document.querySelector(\".statement .detail\")\nconst updateTime = document.querySelector(\"#updateTime\")\n\nconsole.log(updateTime);\nupdateTime.innerHTML=`2022-7-13`\neditBtn.onclick = function () {\n  if (document.designMode === \"off\") {\n    document.designMode = \"on\"\n    this.className = \"btn2 onEdit\"\n    this.innerText = \"退出编辑\"\n  } else {\n    document.designMode = \"off\"\n    this.className = \"btn2 edit\"\n    this.innerText = \"编辑\"\n  }\n\n}\n\n// statement.onclick = function () {\n//   detail.classList.toggle('hidden');\n// }\n\n// import htmlToPdf from './utils/htmlToPdf'\n// console.log(htmlToPdf);","source":"cv/index.js","raw":"const editBtn = document.querySelector(\".edit\")\nconst statement = document.querySelector(\".statement .title\")\nconst detail = document.querySelector(\".statement .detail\")\nconst updateTime = document.querySelector(\"#updateTime\")\n\nconsole.log(updateTime);\nupdateTime.innerHTML=`2022-7-13`\neditBtn.onclick = function () {\n  if (document.designMode === \"off\") {\n    document.designMode = \"on\"\n    this.className = \"btn2 onEdit\"\n    this.innerText = \"退出编辑\"\n  } else {\n    document.designMode = \"off\"\n    this.className = \"btn2 edit\"\n    this.innerText = \"编辑\"\n  }\n\n}\n\n// statement.onclick = function () {\n//   detail.classList.toggle('hidden');\n// }\n\n// import htmlToPdf from './utils/htmlToPdf'\n// console.log(htmlToPdf);","date":"2024-07-14T01:09:19.964Z","updated":"2024-07-14T01:09:19.964Z","path":"cv/index.js","layout":"false","title":"","comments":1,"_id":"clyliw08w000ltch82lplf887","content":"let editBtn=document.querySelector(\".edit\"),statement=document.querySelector(\".statement .title\"),detail=document.querySelector(\".statement .detail\"),updateTime=document.querySelector(\"#updateTime\");console.log(updateTime),updateTime.innerHTML=\"2022-7-13\",editBtn.onclick=function(){\"off\"===document.designMode?(document.designMode=\"on\",this.className=\"btn2 onEdit\",this.innerText=\"退出编辑\"):(document.designMode=\"off\",this.className=\"btn2 edit\",this.innerText=\"编辑\")};"}],"Post":[{"title":"【方法论】JS 模块化梳理","date":"2023-03-11T07:39:39.000Z","_content":"\n## 前言\n\n模块化是编程中绕不过去的一环，可以说在我们的开发流程中，每时每刻都在使用着模块化，这无疑是一个非常重要的知识点。本文只讨论 JS 模块化，旨在加强对 JS 模块化的认识。主要涉及以下几点：\n-   JS 模块化的前世今生（为什么要模块化）\n-   JS 模块化的本质（如何实现模块化）\n\n## 一、JS 模块化的前世今生\n\n### 无模块化\n大家都知道模块化是复杂项目中必不可少的一环，良好的模块化能让项目结构更加清晰，提高代码复用性，逻辑与功能分离，加强可维护性。但在一开始，Javascript 中是不存在模块化的，它只是一门玩具语言，为网页添加一点特效而已。功能简单，用法单一。\n\n此时的 js 代码的书写方式是，从上到下，简单明了，直到`ajax`出现。\n\n### 模块化萌芽\nGoogle 将 ajax 概念发扬光大，在 Gmail 和 Google 地球等网页应用中大量使用了 ajax 技术，此时人们才惊觉利用 javascript 能够在网页中做到什么。于是越来越多的大型 web 项目开始出现，随之而来的是越来越复杂的业务逻辑与项目结构。问题不可避免的出现了。\n\n1. `全局变量污染`\n因为大家写的代码都在同一个全局作用域中，一不小心就可能声明一个已经存在的全局变量，往往就会发生难以预测的错误，这里举一个例子：\n```html\n<!-- 这是我写的 -->\n<script src=\"a.js\"></script>\n<script src=\"b.js\"></script>\n<!-- 这是同事写的 -->\n<script src=\"c.js\"></script>\n```\n\n```javascript\n// a.js\nvar name = '这里请不要改'\n\n// c.js\nfunction name(){\n\t...\n}\n```\n上面有 3 个脚本，a.js、b.js 是我写的，c.js 是同事写的，我定义了一个全局变量 name，同事不知道，他定义了一个全局方法 name()，于是我俩都得懵逼。\n\n*解决方案*\n\n解决方法之一是使用自执行函数包裹：\n```javascript\nmyModule = function(){\n\tvar id = 'user_id'\n\t...\n}()\n```\n这种方式解决了全局变量污染的问题，但仍暴露了一个全局函数在全局，仍可能存在命名冲突，并且有时需定义许多个这种类型的函数，不够优雅。\n\n2. `函数命名冲突`\n我们经常将一些功能性的函数抽离出来，放在同一个功能文件中，例如 utils.js 文件下放了一个 format 方法，这时同事需要一个不同的 format 方法，他就只能新建一个 format2 或者其他名字的方法，类似的事情很多。\n\n*解决方案*\n\n解决方法之一是使用命名空间，构造类似 java 的方式，于是代码变成了这样：\n```javascript\nobj.MyNameSpace.Utils.format()\n```\n这种类型的代码确实有用，但大大增加了书写的负担，你只想调用一个方法，却不得不写一长串的前缀。\n\n3. `文件依赖混乱`\n文件的依赖往往是无法避免的，例如实现一个 dialog 组件，它调用了一些 utils.js 文件里的方法，那么在引入`<script src=\"dialog\">`之前，需要先引入`<script src=\"utils\">`，当类似的情况越来越多时，依赖就难免混杂，从而增加维护难度。\n\n*解决方案*\n\n这是 Yahoo! 的 YUI3 框架解决方案，通过 requires 一个依赖数组来指定依赖：\n```javascript\nYUI.add('my-module', function (Y) {\n  // ...\n}, '0.0.1', {\n    requires: ['node', 'event']\n});\n```\n这种类型的代码确实解决了依赖混乱的问题，但当一个文件依赖增多时，这种配置型的代码就会变得复杂而且难看。\n\n在这个时期，不同的 web 团队为了解决项目中遇到的这类难题提出了自己的解决方案，但没有哪种解决方案可以解决所有的问题。\n\n### 几种模块化规范\n\n从以上的例子中可以观察到一些模块化所面临的难题：\n1. 如何安全的包装一个模块（不污染模块外的代码）\n2. 如何定义模块的唯一标识（解决命名冲突）\n3. 如何优雅的暴露模块（不增加复杂依赖）\n4. 模块间互相引用的循环依赖问题\n\n在 nodeJS 出现后，Javascript 可以用来编写服务端程序，这时 Javascript 没有模块化的缺点变得更加令人难以忍受，nodeJS 社区开始制定 JS 模块化规范。[Modules/1.0 规范]([Modules/1.0 - CommonJS Spec Wiki](https://wiki.commonjs.org/wiki/Modules/1.0))，首次定义了一个模块应该如何编写：\n>1. 模块的标识应遵循的规则（书写规范）\n> 2. 定义全局函数 require，通过传入模块标识来引入其他模块，执行的结果即为别的模块暴漏出来的 API\n> 3. 如果被 require 函数引入的模块中也包含依赖，那么依次加载这些依赖\n> 4. 如果引入模块失败，那么 require 函数应该报一个异常\n> 5. 模块通过变量 exports 来向往暴漏 API，exports 只能是一个对象，暴漏的 API 须作为此对象的属性。\n\n一开始实现 Modules/1.0 规范的是 ServerJS（CommonJS 改名之前的叫法），它的写法如下：\n```javascript\n// math.js\nexports.add = function(){\n\tvar sum = 0,i = 0, args = arguments;\n\twhile(i < 1){\n\t\tsum += args[i++];\n\t}\n\treturn sum;\n};\n\n// increment.js\nvar add = require('math').add;\nexports.increment = function(val){\n\treturn add(val,1);\n}\n\n// program.js\nvar inc = require('increment').increment;\nvar a = 1;\ninc(a); //2\n```\n相比于之前的阶段，此时的代码更加简洁明了，但它只能在服务端运行而难以向浏览器端推广，原因如下：\n1. 外层没有 function 包裹，变量直接暴露在全局（如上 increment.js 中的 add 方法）\n2. 资源加载方式不同，在服务端，require 一个模块可以直接从内存中读取，消耗时间很小，但在浏览器端，require 一个模块需要向服务器发起一个 http 请求，下载完成后才能运行模块中的代码，也就是说 require 之后的代码必须等到 require 完成后才能执行。\n因为这些问题，社区中的主张分裂为 3 种，分别是\n- Modules/1.x 派\n- Modules/Async 派\n- Modules/2.0 派\n\n`Modules/1.x,CommonJS,browserify`\n这一派人认为既然 ServerJS 能够在服务端运行良好，只需要在现有基础上进行改进就能适应浏览器端的需求，浏览器端需要 function 包裹（为了保护变量）、需要异步加载，那么就使用一种工具将现有模块转化为适合浏览器端的代码，基于这种想法有基于这个主张，制定了 [Modules/Transport 规范](https://wiki.commonjs.org/wiki/Modules/Transport)，`browserify`是这种规范的一种实现，它是一种浏览器端的打包工具，能够将 nodeJS 模块转化为浏览器端可用的模块。\n\n`Modules/Async,AMD,RequireJS`\n这一派人认为浏览器端与服务端差别巨大，不能沿用原有模块标准。既然浏览器端需要异步加载代码，就通过回调的形式设计规范。其原理是：在模块定义时就指明并加载依赖，当依赖加载完毕后再执行回调中的本模块。因为这种异步的特性设计的规范名为 [AMD（Asynchronous Module Definition）](https://github.com/amdjs/amdjs-api/wiki/AMD-（中文版）)，根据 AMD 规范出现了`RequireJS`的实现，它的写法如下：\n```javascript\ndefine(id?, dependencies?, factory);\n\ndefine('increment',['math','other'],function(math){\n\t// 此时 math 和 other 模块内的代码已经执行完毕\n\tfunction increment(val){\n\t\treturn math.add(val,1)\n\t}\n\t// 即使 other 没有被使用到，other 还是被提前执行了\n\tif(false){\n\t\tother.doSomething();\n\t}\n})\n```\n\n`Modules/2.0 CMD Sea.js`\n这一派人有点类似中间派，既不想丢弃旧的规范，也不像 AMD 那样推倒重来，最终他们制定了 [Modules/Wrappings 规范]([http://wiki.commonjs.org/wiki/Modules/Wrappings](http://wiki.commonjs.org/wiki/Modules/Wrappings)),`SeaJS`是它的一个实现。写法如下：\n```javascript\ndefine(factory);\n\ndefine(function(require,exports,module){\n\t// 就近原则，哪里使用哪里声明\n\tvar math = require('math');\n\treturn{\n\t\tincrement:function(val){\n\t\t\treturn math.add(val,1);\n\t\t}\n\t}\n}\n```\n可以看到，它的写法和 RequireJS 很像，那么不同之处在哪里呢？RequireJS 会在依赖加载的第一时间加载并执行依赖内的代码，然后再执行回调内的模块代码；而 SeaJS 会在声明依赖之后才会执行依赖内的代码。总的来说就是：`AMD 推崇依赖前置、提前执行，CMD 推崇依赖就近、延迟执行。`\n\n`ES6 Module`\n从 ES6 开始，Javascript 开始有了标准层面的模块化，旨在成为浏览器端和服务器端的通用模块化方案。它的写法很简单，具体如下：\n```javascript\n// math.js\nfunction add(){\n...\n}\nexport {add};\n\n//increment.js\nimport {add} from './math';\nfunction increment(val){\n\treturn add(val,1);\n}\n```\n那么它和上面提到的几种模块化方案有哪些不同呢？\n1. 动态只读引用\n> ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令`import`，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的`import`有点像 Unix 系统的“符号连接”，原始值变了，`import`加载的值也会跟着变。因此\n2. 编译时输出\n> ES6 模块不是对象，而是通过 `export` 命令显式指定输出的代码，`import`时采用静态命令的形式。即在`import`时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。模块内部引用的变化，会反应在外部。\n\n### 总结\n1.  AMD/CMD/CommonJs 是 js 模块化开发的规范，对应的实现是 require.js/sea.js/Node.js，ES Module 是 ES6 在语言规范上的模块化实现。\n2. CommonJS 主要针对服务端，AMD/CMD/ES Module 主要针对浏览器端，容易混淆的是 AMD/CMD。针对服务器端和针对浏览器端有什么本质的区别呢？服务器端一般采用同步加载文件，也就是说需要某个模块，服务器端便停下来，等待它加载再执行，因为这部分很快。而浏览器端采用异步加载，因为需要发送 http 请求，这就需要一个预处理，提前将所需要的模块文件并行加载好。\n3. AMD/CMD 的区别：虽然都是并行加载 js 文件，但还是有所区别，AMD 是预加载，在并行加载 js 文件同时，还会解析执行该模块（因为还需要执行，所以在加载某个模块前，这个模块的依赖模块需要先加载完成）；而 CMD 是懒加载，虽然会一开始就并行加载 js 文件，但是不会执行，而是在需要的时候才执行。\n4. AMD/CMD 的优缺点：JS 引擎是单线程的，单位时间内只能执行单个任务，所以在加载多个大文件时，会阻塞脚本执行。AMD 会在文件全部加载完毕后才执行代码，CMD 则会遇见依赖再加载代码，在此种情况 CMD 会更快，其他情形则相差不多。\n5. \n## 二、模块化的本质\n\n> 模块化的本质在于外部只能访问模块暴露出来的属性和方法，可以通过闭包的特性实现。\n\n```javascript\n// 原生模块模式\nfunction moduleA() {\n    var something = \"something\";\n    var another = \"another\";\n    function doSomething() {\n        console.log(something);\n    }\n\n    \n    function doAnother() {\n        console.log(another);\n    }\n    return {\n        doSomething: doSomething,\n        doAnother: doAnother\n    };\n}\n// 调用模块内方法\nvar foo = moduleA();\nfoo.doSomething(); // something\nfoo.another; // undefined\n\n// jQuery 类型的模块\n// var $ = window.jQuery()\n```\n在这里通过调用 moduleA() 这个函数来创建模块实例 foo，通过这个模块实例可以调用模块内暴露的变量和方法，但仍存在问题，在于 moduleA 是一个全局函数，可能会造成函数名污染。也可以使用 IIFE 的方式创建：\n```javascript\n// IIFE\nvar foo = (function(){\n\tvar something = \"something\";\n\tvar another = \"another\";\n\tfunction doSomething(){...}\n\tfunction doAnother(){...}\n\treturn {\n\t\tdoSomething: doSomething,\n\t\tdoAnother: doAnother\n\t};\n})()\n```\n这种形式避免了函数名冲突，并且实现了单例模式。\n\n大多数模块加载器本质上就是将这种模块定义封装进一个 API，下面给出进一步实现：\n```javascript\nvar moduleCreater = (function Manager(){\n\tvar modules = {};\n\t// 通过 define 方法定义模块\n\tfunction define(id,deps,impl){\n\t\tfor(let i = 0;i < deps.length;i++){\n\t\t\t// 在这里解包依赖数组\n\t\t\tdeps[i] = modules[deps[i]];\n\t\t}\n\t\tmodules[id] = impl.apply(imply,deps);\n\t}\n\tfunction get(id){\n\t\treturn modules[id];\n\t}\n\treturn {\n\t\tdefine: define,\n\t\tget: get\n\t}\n})()\n```\n## 参考资料\n\t\n- 《你不知道的 Javascript》（上卷）\n- [js 模块化历程](https://www.cnblogs.com/lvdabao/p/js-modules-develop.html)\n- [js 模块化编程之彻底弄懂 CommonJS 和 AMD/CMD！](https://www.cnblogs.com/moxiaowohuwei/p/8692359.html)\n- [前端模块化开发那点历史 · Issue #588 · seajs/seajs (github.com)](https://github.com/seajs/seajs/issues/588)\n- [从 CommonJS 到 Sea.js · Issue #269 · seajs/seajs (github.com)](https://github.com/seajs/seajs/issues/269)","source":"_posts/MethodologyFrontendJSModularity .md","raw":"---\ntitle: 【方法论】JS 模块化梳理\ndate: 2023-03-11 15:39:39\ntags:\n  - JS\n  - 模块化\n  - 前端工程化\ncategories:\n  - 方法论\n---\n\n## 前言\n\n模块化是编程中绕不过去的一环，可以说在我们的开发流程中，每时每刻都在使用着模块化，这无疑是一个非常重要的知识点。本文只讨论 JS 模块化，旨在加强对 JS 模块化的认识。主要涉及以下几点：\n-   JS 模块化的前世今生（为什么要模块化）\n-   JS 模块化的本质（如何实现模块化）\n\n## 一、JS 模块化的前世今生\n\n### 无模块化\n大家都知道模块化是复杂项目中必不可少的一环，良好的模块化能让项目结构更加清晰，提高代码复用性，逻辑与功能分离，加强可维护性。但在一开始，Javascript 中是不存在模块化的，它只是一门玩具语言，为网页添加一点特效而已。功能简单，用法单一。\n\n此时的 js 代码的书写方式是，从上到下，简单明了，直到`ajax`出现。\n\n### 模块化萌芽\nGoogle 将 ajax 概念发扬光大，在 Gmail 和 Google 地球等网页应用中大量使用了 ajax 技术，此时人们才惊觉利用 javascript 能够在网页中做到什么。于是越来越多的大型 web 项目开始出现，随之而来的是越来越复杂的业务逻辑与项目结构。问题不可避免的出现了。\n\n1. `全局变量污染`\n因为大家写的代码都在同一个全局作用域中，一不小心就可能声明一个已经存在的全局变量，往往就会发生难以预测的错误，这里举一个例子：\n```html\n<!-- 这是我写的 -->\n<script src=\"a.js\"></script>\n<script src=\"b.js\"></script>\n<!-- 这是同事写的 -->\n<script src=\"c.js\"></script>\n```\n\n```javascript\n// a.js\nvar name = '这里请不要改'\n\n// c.js\nfunction name(){\n\t...\n}\n```\n上面有 3 个脚本，a.js、b.js 是我写的，c.js 是同事写的，我定义了一个全局变量 name，同事不知道，他定义了一个全局方法 name()，于是我俩都得懵逼。\n\n*解决方案*\n\n解决方法之一是使用自执行函数包裹：\n```javascript\nmyModule = function(){\n\tvar id = 'user_id'\n\t...\n}()\n```\n这种方式解决了全局变量污染的问题，但仍暴露了一个全局函数在全局，仍可能存在命名冲突，并且有时需定义许多个这种类型的函数，不够优雅。\n\n2. `函数命名冲突`\n我们经常将一些功能性的函数抽离出来，放在同一个功能文件中，例如 utils.js 文件下放了一个 format 方法，这时同事需要一个不同的 format 方法，他就只能新建一个 format2 或者其他名字的方法，类似的事情很多。\n\n*解决方案*\n\n解决方法之一是使用命名空间，构造类似 java 的方式，于是代码变成了这样：\n```javascript\nobj.MyNameSpace.Utils.format()\n```\n这种类型的代码确实有用，但大大增加了书写的负担，你只想调用一个方法，却不得不写一长串的前缀。\n\n3. `文件依赖混乱`\n文件的依赖往往是无法避免的，例如实现一个 dialog 组件，它调用了一些 utils.js 文件里的方法，那么在引入`<script src=\"dialog\">`之前，需要先引入`<script src=\"utils\">`，当类似的情况越来越多时，依赖就难免混杂，从而增加维护难度。\n\n*解决方案*\n\n这是 Yahoo! 的 YUI3 框架解决方案，通过 requires 一个依赖数组来指定依赖：\n```javascript\nYUI.add('my-module', function (Y) {\n  // ...\n}, '0.0.1', {\n    requires: ['node', 'event']\n});\n```\n这种类型的代码确实解决了依赖混乱的问题，但当一个文件依赖增多时，这种配置型的代码就会变得复杂而且难看。\n\n在这个时期，不同的 web 团队为了解决项目中遇到的这类难题提出了自己的解决方案，但没有哪种解决方案可以解决所有的问题。\n\n### 几种模块化规范\n\n从以上的例子中可以观察到一些模块化所面临的难题：\n1. 如何安全的包装一个模块（不污染模块外的代码）\n2. 如何定义模块的唯一标识（解决命名冲突）\n3. 如何优雅的暴露模块（不增加复杂依赖）\n4. 模块间互相引用的循环依赖问题\n\n在 nodeJS 出现后，Javascript 可以用来编写服务端程序，这时 Javascript 没有模块化的缺点变得更加令人难以忍受，nodeJS 社区开始制定 JS 模块化规范。[Modules/1.0 规范]([Modules/1.0 - CommonJS Spec Wiki](https://wiki.commonjs.org/wiki/Modules/1.0))，首次定义了一个模块应该如何编写：\n>1. 模块的标识应遵循的规则（书写规范）\n> 2. 定义全局函数 require，通过传入模块标识来引入其他模块，执行的结果即为别的模块暴漏出来的 API\n> 3. 如果被 require 函数引入的模块中也包含依赖，那么依次加载这些依赖\n> 4. 如果引入模块失败，那么 require 函数应该报一个异常\n> 5. 模块通过变量 exports 来向往暴漏 API，exports 只能是一个对象，暴漏的 API 须作为此对象的属性。\n\n一开始实现 Modules/1.0 规范的是 ServerJS（CommonJS 改名之前的叫法），它的写法如下：\n```javascript\n// math.js\nexports.add = function(){\n\tvar sum = 0,i = 0, args = arguments;\n\twhile(i < 1){\n\t\tsum += args[i++];\n\t}\n\treturn sum;\n};\n\n// increment.js\nvar add = require('math').add;\nexports.increment = function(val){\n\treturn add(val,1);\n}\n\n// program.js\nvar inc = require('increment').increment;\nvar a = 1;\ninc(a); //2\n```\n相比于之前的阶段，此时的代码更加简洁明了，但它只能在服务端运行而难以向浏览器端推广，原因如下：\n1. 外层没有 function 包裹，变量直接暴露在全局（如上 increment.js 中的 add 方法）\n2. 资源加载方式不同，在服务端，require 一个模块可以直接从内存中读取，消耗时间很小，但在浏览器端，require 一个模块需要向服务器发起一个 http 请求，下载完成后才能运行模块中的代码，也就是说 require 之后的代码必须等到 require 完成后才能执行。\n因为这些问题，社区中的主张分裂为 3 种，分别是\n- Modules/1.x 派\n- Modules/Async 派\n- Modules/2.0 派\n\n`Modules/1.x,CommonJS,browserify`\n这一派人认为既然 ServerJS 能够在服务端运行良好，只需要在现有基础上进行改进就能适应浏览器端的需求，浏览器端需要 function 包裹（为了保护变量）、需要异步加载，那么就使用一种工具将现有模块转化为适合浏览器端的代码，基于这种想法有基于这个主张，制定了 [Modules/Transport 规范](https://wiki.commonjs.org/wiki/Modules/Transport)，`browserify`是这种规范的一种实现，它是一种浏览器端的打包工具，能够将 nodeJS 模块转化为浏览器端可用的模块。\n\n`Modules/Async,AMD,RequireJS`\n这一派人认为浏览器端与服务端差别巨大，不能沿用原有模块标准。既然浏览器端需要异步加载代码，就通过回调的形式设计规范。其原理是：在模块定义时就指明并加载依赖，当依赖加载完毕后再执行回调中的本模块。因为这种异步的特性设计的规范名为 [AMD（Asynchronous Module Definition）](https://github.com/amdjs/amdjs-api/wiki/AMD-（中文版）)，根据 AMD 规范出现了`RequireJS`的实现，它的写法如下：\n```javascript\ndefine(id?, dependencies?, factory);\n\ndefine('increment',['math','other'],function(math){\n\t// 此时 math 和 other 模块内的代码已经执行完毕\n\tfunction increment(val){\n\t\treturn math.add(val,1)\n\t}\n\t// 即使 other 没有被使用到，other 还是被提前执行了\n\tif(false){\n\t\tother.doSomething();\n\t}\n})\n```\n\n`Modules/2.0 CMD Sea.js`\n这一派人有点类似中间派，既不想丢弃旧的规范，也不像 AMD 那样推倒重来，最终他们制定了 [Modules/Wrappings 规范]([http://wiki.commonjs.org/wiki/Modules/Wrappings](http://wiki.commonjs.org/wiki/Modules/Wrappings)),`SeaJS`是它的一个实现。写法如下：\n```javascript\ndefine(factory);\n\ndefine(function(require,exports,module){\n\t// 就近原则，哪里使用哪里声明\n\tvar math = require('math');\n\treturn{\n\t\tincrement:function(val){\n\t\t\treturn math.add(val,1);\n\t\t}\n\t}\n}\n```\n可以看到，它的写法和 RequireJS 很像，那么不同之处在哪里呢？RequireJS 会在依赖加载的第一时间加载并执行依赖内的代码，然后再执行回调内的模块代码；而 SeaJS 会在声明依赖之后才会执行依赖内的代码。总的来说就是：`AMD 推崇依赖前置、提前执行，CMD 推崇依赖就近、延迟执行。`\n\n`ES6 Module`\n从 ES6 开始，Javascript 开始有了标准层面的模块化，旨在成为浏览器端和服务器端的通用模块化方案。它的写法很简单，具体如下：\n```javascript\n// math.js\nfunction add(){\n...\n}\nexport {add};\n\n//increment.js\nimport {add} from './math';\nfunction increment(val){\n\treturn add(val,1);\n}\n```\n那么它和上面提到的几种模块化方案有哪些不同呢？\n1. 动态只读引用\n> ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令`import`，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的`import`有点像 Unix 系统的“符号连接”，原始值变了，`import`加载的值也会跟着变。因此\n2. 编译时输出\n> ES6 模块不是对象，而是通过 `export` 命令显式指定输出的代码，`import`时采用静态命令的形式。即在`import`时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。模块内部引用的变化，会反应在外部。\n\n### 总结\n1.  AMD/CMD/CommonJs 是 js 模块化开发的规范，对应的实现是 require.js/sea.js/Node.js，ES Module 是 ES6 在语言规范上的模块化实现。\n2. CommonJS 主要针对服务端，AMD/CMD/ES Module 主要针对浏览器端，容易混淆的是 AMD/CMD。针对服务器端和针对浏览器端有什么本质的区别呢？服务器端一般采用同步加载文件，也就是说需要某个模块，服务器端便停下来，等待它加载再执行，因为这部分很快。而浏览器端采用异步加载，因为需要发送 http 请求，这就需要一个预处理，提前将所需要的模块文件并行加载好。\n3. AMD/CMD 的区别：虽然都是并行加载 js 文件，但还是有所区别，AMD 是预加载，在并行加载 js 文件同时，还会解析执行该模块（因为还需要执行，所以在加载某个模块前，这个模块的依赖模块需要先加载完成）；而 CMD 是懒加载，虽然会一开始就并行加载 js 文件，但是不会执行，而是在需要的时候才执行。\n4. AMD/CMD 的优缺点：JS 引擎是单线程的，单位时间内只能执行单个任务，所以在加载多个大文件时，会阻塞脚本执行。AMD 会在文件全部加载完毕后才执行代码，CMD 则会遇见依赖再加载代码，在此种情况 CMD 会更快，其他情形则相差不多。\n5. \n## 二、模块化的本质\n\n> 模块化的本质在于外部只能访问模块暴露出来的属性和方法，可以通过闭包的特性实现。\n\n```javascript\n// 原生模块模式\nfunction moduleA() {\n    var something = \"something\";\n    var another = \"another\";\n    function doSomething() {\n        console.log(something);\n    }\n\n    \n    function doAnother() {\n        console.log(another);\n    }\n    return {\n        doSomething: doSomething,\n        doAnother: doAnother\n    };\n}\n// 调用模块内方法\nvar foo = moduleA();\nfoo.doSomething(); // something\nfoo.another; // undefined\n\n// jQuery 类型的模块\n// var $ = window.jQuery()\n```\n在这里通过调用 moduleA() 这个函数来创建模块实例 foo，通过这个模块实例可以调用模块内暴露的变量和方法，但仍存在问题，在于 moduleA 是一个全局函数，可能会造成函数名污染。也可以使用 IIFE 的方式创建：\n```javascript\n// IIFE\nvar foo = (function(){\n\tvar something = \"something\";\n\tvar another = \"another\";\n\tfunction doSomething(){...}\n\tfunction doAnother(){...}\n\treturn {\n\t\tdoSomething: doSomething,\n\t\tdoAnother: doAnother\n\t};\n})()\n```\n这种形式避免了函数名冲突，并且实现了单例模式。\n\n大多数模块加载器本质上就是将这种模块定义封装进一个 API，下面给出进一步实现：\n```javascript\nvar moduleCreater = (function Manager(){\n\tvar modules = {};\n\t// 通过 define 方法定义模块\n\tfunction define(id,deps,impl){\n\t\tfor(let i = 0;i < deps.length;i++){\n\t\t\t// 在这里解包依赖数组\n\t\t\tdeps[i] = modules[deps[i]];\n\t\t}\n\t\tmodules[id] = impl.apply(imply,deps);\n\t}\n\tfunction get(id){\n\t\treturn modules[id];\n\t}\n\treturn {\n\t\tdefine: define,\n\t\tget: get\n\t}\n})()\n```\n## 参考资料\n\t\n- 《你不知道的 Javascript》（上卷）\n- [js 模块化历程](https://www.cnblogs.com/lvdabao/p/js-modules-develop.html)\n- [js 模块化编程之彻底弄懂 CommonJS 和 AMD/CMD！](https://www.cnblogs.com/moxiaowohuwei/p/8692359.html)\n- [前端模块化开发那点历史 · Issue #588 · seajs/seajs (github.com)](https://github.com/seajs/seajs/issues/588)\n- [从 CommonJS 到 Sea.js · Issue #269 · seajs/seajs (github.com)](https://github.com/seajs/seajs/issues/269)","slug":"MethodologyFrontendJSModularity ","published":1,"updated":"2024-07-14T12:19:00.333Z","comments":1,"layout":"post","photos":[],"_id":"clyliw08v000itch88etu2n0p","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模块化是编程中绕不过去的一环，可以说在我们的开发流程中，每时每刻都在使用着模块化，这无疑是一个非常重要的知识点。本文只讨论 JS 模块化，旨在加强对 JS 模块化的认识。主要涉及以下几点：</p>\n<ul>\n<li>JS 模块化的前世今生（为什么要模块化）</li>\n<li>JS 模块化的本质（如何实现模块化）</li>\n</ul>\n<h2 id=\"一、JS-模块化的前世今生\"><a href=\"#一、JS-模块化的前世今生\" class=\"headerlink\" title=\"一、JS 模块化的前世今生\"></a>一、JS 模块化的前世今生</h2><h3 id=\"无模块化\"><a href=\"#无模块化\" class=\"headerlink\" title=\"无模块化\"></a>无模块化</h3><p>大家都知道模块化是复杂项目中必不可少的一环，良好的模块化能让项目结构更加清晰，提高代码复用性，逻辑与功能分离，加强可维护性。但在一开始，Javascript 中是不存在模块化的，它只是一门玩具语言，为网页添加一点特效而已。功能简单，用法单一。</p>\n<p>此时的 js 代码的书写方式是，从上到下，简单明了，直到<code>ajax</code>出现。</p>\n<h3 id=\"模块化萌芽\"><a href=\"#模块化萌芽\" class=\"headerlink\" title=\"模块化萌芽\"></a>模块化萌芽</h3><p>Google 将 ajax 概念发扬光大，在 Gmail 和 Google 地球等网页应用中大量使用了 ajax 技术，此时人们才惊觉利用 javascript 能够在网页中做到什么。于是越来越多的大型 web 项目开始出现，随之而来的是越来越复杂的业务逻辑与项目结构。问题不可避免的出现了。</p>\n<ol>\n<li><code>全局变量污染</code><br>因为大家写的代码都在同一个全局作用域中，一不小心就可能声明一个已经存在的全局变量，往往就会发生难以预测的错误，这里举一个例子：<div class=\"highlight-container\" data-rel=\"Html\"><figure class=\"iseeu highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这是我写的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;a.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;b.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是同事写的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;c.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></div></li>\n</ol>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;这里请不要改&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// c.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">name</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>上面有 3 个脚本，a.js、b.js 是我写的，c.js 是同事写的，我定义了一个全局变量 name，同事不知道，他定义了一个全局方法 name()，于是我俩都得懵逼。</p>\n<p><em>解决方案</em></p>\n<p>解决方法之一是使用自执行函数包裹：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myModule = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id = <span class=\"string\">&#x27;user_id&#x27;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure></div>\n<p>这种方式解决了全局变量污染的问题，但仍暴露了一个全局函数在全局，仍可能存在命名冲突，并且有时需定义许多个这种类型的函数，不够优雅。</p>\n<ol start=\"2\">\n<li><code>函数命名冲突</code><br>我们经常将一些功能性的函数抽离出来，放在同一个功能文件中，例如 utils.js 文件下放了一个 format 方法，这时同事需要一个不同的 format 方法，他就只能新建一个 format2 或者其他名字的方法，类似的事情很多。</li>\n</ol>\n<p><em>解决方案</em></p>\n<p>解决方法之一是使用命名空间，构造类似 java 的方式，于是代码变成了这样：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.<span class=\"property\">MyNameSpace</span>.<span class=\"property\">Utils</span>.<span class=\"title function_\">format</span>()</span><br></pre></td></tr></table></figure></div>\n<p>这种类型的代码确实有用，但大大增加了书写的负担，你只想调用一个方法，却不得不写一长串的前缀。</p>\n<ol start=\"3\">\n<li><code>文件依赖混乱</code><br>文件的依赖往往是无法避免的，例如实现一个 dialog 组件，它调用了一些 utils.js 文件里的方法，那么在引入<code>&lt;script src=&quot;dialog&quot;&gt;</code>之前，需要先引入<code>&lt;script src=&quot;utils&quot;&gt;</code>，当类似的情况越来越多时，依赖就难免混杂，从而增加维护难度。</li>\n</ol>\n<p><em>解决方案</em></p>\n<p>这是 Yahoo! 的 YUI3 框架解决方案，通过 requires 一个依赖数组来指定依赖：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">YUI</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;my-module&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">Y</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;, <span class=\"string\">&#x27;0.0.1&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">requires</span>: [<span class=\"string\">&#x27;node&#x27;</span>, <span class=\"string\">&#x27;event&#x27;</span>]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure></div>\n<p>这种类型的代码确实解决了依赖混乱的问题，但当一个文件依赖增多时，这种配置型的代码就会变得复杂而且难看。</p>\n<p>在这个时期，不同的 web 团队为了解决项目中遇到的这类难题提出了自己的解决方案，但没有哪种解决方案可以解决所有的问题。</p>\n<h3 id=\"几种模块化规范\"><a href=\"#几种模块化规范\" class=\"headerlink\" title=\"几种模块化规范\"></a>几种模块化规范</h3><p>从以上的例子中可以观察到一些模块化所面临的难题：</p>\n<ol>\n<li>如何安全的包装一个模块（不污染模块外的代码）</li>\n<li>如何定义模块的唯一标识（解决命名冲突）</li>\n<li>如何优雅的暴露模块（不增加复杂依赖）</li>\n<li>模块间互相引用的循环依赖问题</li>\n</ol>\n<p>在 nodeJS 出现后，Javascript 可以用来编写服务端程序，这时 Javascript 没有模块化的缺点变得更加令人难以忍受，nodeJS 社区开始制定 JS 模块化规范。[Modules&#x2F;1.0 规范](<a class=\"link\"   href=\"https://wiki.commonjs.org/wiki/Modules/1.0\" >Modules&#x2F;1.0 - CommonJS Spec Wiki <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>)，首次定义了一个模块应该如何编写：</p>\n<blockquote>\n<ol>\n<li>模块的标识应遵循的规则（书写规范）</li>\n<li>定义全局函数 require，通过传入模块标识来引入其他模块，执行的结果即为别的模块暴漏出来的 API</li>\n<li>如果被 require 函数引入的模块中也包含依赖，那么依次加载这些依赖</li>\n<li>如果引入模块失败，那么 require 函数应该报一个异常</li>\n<li>模块通过变量 exports 来向往暴漏 API，exports 只能是一个对象，暴漏的 API 须作为此对象的属性。</li>\n</ol>\n</blockquote>\n<p>一开始实现 Modules&#x2F;1.0 规范的是 ServerJS（CommonJS 改名之前的叫法），它的写法如下：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math.js</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">add</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>,i = <span class=\"number\">0</span>, args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i &lt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\tsum += args[i++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// increment.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;math&#x27;</span>).<span class=\"property\">add</span>;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">increment</span> = <span class=\"keyword\">function</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">add</span>(val,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// program.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> inc = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;increment&#x27;</span>).<span class=\"property\">increment</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"title function_\">inc</span>(a); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure></div>\n<p>相比于之前的阶段，此时的代码更加简洁明了，但它只能在服务端运行而难以向浏览器端推广，原因如下：</p>\n<ol>\n<li>外层没有 function 包裹，变量直接暴露在全局（如上 increment.js 中的 add 方法）</li>\n<li>资源加载方式不同，在服务端，require 一个模块可以直接从内存中读取，消耗时间很小，但在浏览器端，require 一个模块需要向服务器发起一个 http 请求，下载完成后才能运行模块中的代码，也就是说 require 之后的代码必须等到 require 完成后才能执行。<br>因为这些问题，社区中的主张分裂为 3 种，分别是</li>\n</ol>\n<ul>\n<li>Modules&#x2F;1.x 派</li>\n<li>Modules&#x2F;Async 派</li>\n<li>Modules&#x2F;2.0 派</li>\n</ul>\n<p><code>Modules/1.x,CommonJS,browserify</code><br>这一派人认为既然 ServerJS 能够在服务端运行良好，只需要在现有基础上进行改进就能适应浏览器端的需求，浏览器端需要 function 包裹（为了保护变量）、需要异步加载，那么就使用一种工具将现有模块转化为适合浏览器端的代码，基于这种想法有基于这个主张，制定了 <a class=\"link\"   href=\"https://wiki.commonjs.org/wiki/Modules/Transport\" >Modules&#x2F;Transport 规范 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>，<code>browserify</code>是这种规范的一种实现，它是一种浏览器端的打包工具，能够将 nodeJS 模块转化为浏览器端可用的模块。</p>\n<p><code>Modules/Async,AMD,RequireJS</code><br>这一派人认为浏览器端与服务端差别巨大，不能沿用原有模块标准。既然浏览器端需要异步加载代码，就通过回调的形式设计规范。其原理是：在模块定义时就指明并加载依赖，当依赖加载完毕后再执行回调中的本模块。因为这种异步的特性设计的规范名为 <a class=\"link\"   href=\"https://github.com/amdjs/amdjs-api/wiki/AMD-%EF%BC%88%E4%B8%AD%E6%96%87%E7%89%88%EF%BC%89\" >AMD（Asynchronous Module Definition） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>，根据 AMD 规范出现了<code>RequireJS</code>的实现，它的写法如下：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(id?, dependencies?, factory);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"string\">&#x27;increment&#x27;</span>,[<span class=\"string\">&#x27;math&#x27;</span>,<span class=\"string\">&#x27;other&#x27;</span>],<span class=\"keyword\">function</span>(<span class=\"params\">math</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 此时 math 和 other 模块内的代码已经执行完毕</span></span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> math.<span class=\"title function_\">add</span>(val,<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 即使 other 没有被使用到，other 还是被提前执行了</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">\t\tother.<span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></div>\n\n<p><code>Modules/2.0 CMD Sea.js</code><br>这一派人有点类似中间派，既不想丢弃旧的规范，也不像 AMD 那样推倒重来，最终他们制定了 <a href=\"%5Bhttp://wiki.commonjs.org/wiki/Modules/Wrappings%5D(http://wiki.commonjs.org/wiki/Modules/Wrappings)\">Modules&#x2F;Wrappings 规范</a>,<code>SeaJS</code>是它的一个实现。写法如下：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(factory);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>,<span class=\"built_in\">exports</span>,<span class=\"variable language_\">module</span></span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 就近原则，哪里使用哪里声明</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;math&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">increment</span>:<span class=\"keyword\">function</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> math.<span class=\"title function_\">add</span>(val,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>可以看到，它的写法和 RequireJS 很像，那么不同之处在哪里呢？RequireJS 会在依赖加载的第一时间加载并执行依赖内的代码，然后再执行回调内的模块代码；而 SeaJS 会在声明依赖之后才会执行依赖内的代码。总的来说就是：<code>AMD 推崇依赖前置、提前执行，CMD 推崇依赖就近、延迟执行。</code></p>\n<p><code>ES6 Module</code><br>从 ES6 开始，Javascript 开始有了标准层面的模块化，旨在成为浏览器端和服务器端的通用模块化方案。它的写法很简单，具体如下：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;add&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//increment.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./math&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">add</span>(val,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>那么它和上面提到的几种模块化方案有哪些不同呢？</p>\n<ol>\n<li>动态只读引用<blockquote>\n<p>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的<code>import</code>有点像 Unix 系统的“符号连接”，原始值变了，<code>import</code>加载的值也会跟着变。因此</p>\n</blockquote>\n</li>\n<li>编译时输出<blockquote>\n<p>ES6 模块不是对象，而是通过 <code>export</code> 命令显式指定输出的代码，<code>import</code>时采用静态命令的形式。即在<code>import</code>时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。模块内部引用的变化，会反应在外部。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>AMD&#x2F;CMD&#x2F;CommonJs 是 js 模块化开发的规范，对应的实现是 require.js&#x2F;sea.js&#x2F;Node.js，ES Module 是 ES6 在语言规范上的模块化实现。</li>\n<li>CommonJS 主要针对服务端，AMD&#x2F;CMD&#x2F;ES Module 主要针对浏览器端，容易混淆的是 AMD&#x2F;CMD。针对服务器端和针对浏览器端有什么本质的区别呢？服务器端一般采用同步加载文件，也就是说需要某个模块，服务器端便停下来，等待它加载再执行，因为这部分很快。而浏览器端采用异步加载，因为需要发送 http 请求，这就需要一个预处理，提前将所需要的模块文件并行加载好。</li>\n<li>AMD&#x2F;CMD 的区别：虽然都是并行加载 js 文件，但还是有所区别，AMD 是预加载，在并行加载 js 文件同时，还会解析执行该模块（因为还需要执行，所以在加载某个模块前，这个模块的依赖模块需要先加载完成）；而 CMD 是懒加载，虽然会一开始就并行加载 js 文件，但是不会执行，而是在需要的时候才执行。</li>\n<li>AMD&#x2F;CMD 的优缺点：JS 引擎是单线程的，单位时间内只能执行单个任务，所以在加载多个大文件时，会阻塞脚本执行。AMD 会在文件全部加载完毕后才执行代码，CMD 则会遇见依赖再加载代码，在此种情况 CMD 会更快，其他情形则相差不多。</li>\n<li></li>\n</ol>\n<h2 id=\"二、模块化的本质\"><a href=\"#二、模块化的本质\" class=\"headerlink\" title=\"二、模块化的本质\"></a>二、模块化的本质</h2><blockquote>\n<p>模块化的本质在于外部只能访问模块暴露出来的属性和方法，可以通过闭包的特性实现。</p>\n</blockquote>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原生模块模式</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">moduleA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> something = <span class=\"string\">&quot;something&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> another = <span class=\"string\">&quot;another&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(something);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">doAnother</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(another);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">doSomething</span>: doSomething,</span><br><span class=\"line\">        <span class=\"attr\">doAnother</span>: doAnother</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用模块内方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"title function_\">moduleA</span>();</span><br><span class=\"line\">foo.<span class=\"title function_\">doSomething</span>(); <span class=\"comment\">// something</span></span><br><span class=\"line\">foo.<span class=\"property\">another</span>; <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jQuery 类型的模块</span></span><br><span class=\"line\"><span class=\"comment\">// var $ = window.jQuery()</span></span><br></pre></td></tr></table></figure></div>\n<p>在这里通过调用 moduleA() 这个函数来创建模块实例 foo，通过这个模块实例可以调用模块内暴露的变量和方法，但仍存在问题，在于 moduleA 是一个全局函数，可能会造成函数名污染。也可以使用 IIFE 的方式创建：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IIFE</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> something = <span class=\"string\">&quot;something&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> another = <span class=\"string\">&quot;another&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\"></span>)&#123;...&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">doAnother</span>(<span class=\"params\"></span>)&#123;...&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">doSomething</span>: doSomething,</span><br><span class=\"line\">\t\t<span class=\"attr\">doAnother</span>: doAnother</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></div>\n<p>这种形式避免了函数名冲突，并且实现了单例模式。</p>\n<p>大多数模块加载器本质上就是将这种模块定义封装进一个 API，下面给出进一步实现：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> moduleCreater = (<span class=\"keyword\">function</span> <span class=\"title function_\">Manager</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> modules = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">// 通过 define 方法定义模块</span></span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">define</span>(<span class=\"params\">id,deps,impl</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i &lt; deps.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 在这里解包依赖数组</span></span><br><span class=\"line\">\t\t\tdeps[i] = modules[deps[i]];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmodules[id] = impl.<span class=\"title function_\">apply</span>(imply,deps);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">get</span>(<span class=\"params\">id</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> modules[id];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">define</span>: define,</span><br><span class=\"line\">\t\t<span class=\"attr\">get</span>: get</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure></div>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>《你不知道的 Javascript》（上卷）</li>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/lvdabao/p/js-modules-develop.html\" >js 模块化历程 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/moxiaowohuwei/p/8692359.html\" >js 模块化编程之彻底弄懂 CommonJS 和 AMD&#x2F;CMD！ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/seajs/seajs/issues/588\" >前端模块化开发那点历史 · Issue #588 · seajs&#x2F;seajs (github.com) <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/seajs/seajs/issues/269\" >从 CommonJS 到 Sea.js · Issue #269 · seajs&#x2F;seajs (github.com) <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>模块化是编程中绕不过去的一环，可以说在我们的开发流程中，每时每刻都在使用着模块化，这无疑是一个非常重要的知识点。本文只讨论 JS 模块化，旨在加强对 JS 模块化的认识。主要涉及以下几点：</p>\n<ul>\n<li>JS 模块化的前世今生（为什么要模块化）</li>\n<li>JS 模块化的本质（如何实现模块化）</li>\n</ul>\n<h2 id=\"一、JS-模块化的前世今生\"><a href=\"#一、JS-模块化的前世今生\" class=\"headerlink\" title=\"一、JS 模块化的前世今生\"></a>一、JS 模块化的前世今生</h2><h3 id=\"无模块化\"><a href=\"#无模块化\" class=\"headerlink\" title=\"无模块化\"></a>无模块化</h3><p>大家都知道模块化是复杂项目中必不可少的一环，良好的模块化能让项目结构更加清晰，提高代码复用性，逻辑与功能分离，加强可维护性。但在一开始，Javascript 中是不存在模块化的，它只是一门玩具语言，为网页添加一点特效而已。功能简单，用法单一。</p>\n<p>此时的 js 代码的书写方式是，从上到下，简单明了，直到<code>ajax</code>出现。</p>\n<h3 id=\"模块化萌芽\"><a href=\"#模块化萌芽\" class=\"headerlink\" title=\"模块化萌芽\"></a>模块化萌芽</h3><p>Google 将 ajax 概念发扬光大，在 Gmail 和 Google 地球等网页应用中大量使用了 ajax 技术，此时人们才惊觉利用 javascript 能够在网页中做到什么。于是越来越多的大型 web 项目开始出现，随之而来的是越来越复杂的业务逻辑与项目结构。问题不可避免的出现了。</p>\n<ol>\n<li><code>全局变量污染</code><br>因为大家写的代码都在同一个全局作用域中，一不小心就可能声明一个已经存在的全局变量，往往就会发生难以预测的错误，这里举一个例子：<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 这是我写的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;a.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;b.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 这是同事写的 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;c.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure></li>\n</ol>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// a.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> name = <span class=\"string\">&#x27;这里请不要改&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// c.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">name</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>上面有 3 个脚本，a.js、b.js 是我写的，c.js 是同事写的，我定义了一个全局变量 name，同事不知道，他定义了一个全局方法 name()，于是我俩都得懵逼。</p>\n<p><em>解决方案</em></p>\n<p>解决方法之一是使用自执行函数包裹：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">myModule = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> id = <span class=\"string\">&#x27;user_id&#x27;</span></span><br><span class=\"line\">\t...</span><br><span class=\"line\">&#125;()</span><br></pre></td></tr></table></figure>\n<p>这种方式解决了全局变量污染的问题，但仍暴露了一个全局函数在全局，仍可能存在命名冲突，并且有时需定义许多个这种类型的函数，不够优雅。</p>\n<ol start=\"2\">\n<li><code>函数命名冲突</code><br>我们经常将一些功能性的函数抽离出来，放在同一个功能文件中，例如 utils.js 文件下放了一个 format 方法，这时同事需要一个不同的 format 方法，他就只能新建一个 format2 或者其他名字的方法，类似的事情很多。</li>\n</ol>\n<p><em>解决方案</em></p>\n<p>解决方法之一是使用命名空间，构造类似 java 的方式，于是代码变成了这样：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">obj.<span class=\"property\">MyNameSpace</span>.<span class=\"property\">Utils</span>.<span class=\"title function_\">format</span>()</span><br></pre></td></tr></table></figure>\n<p>这种类型的代码确实有用，但大大增加了书写的负担，你只想调用一个方法，却不得不写一长串的前缀。</p>\n<ol start=\"3\">\n<li><code>文件依赖混乱</code><br>文件的依赖往往是无法避免的，例如实现一个 dialog 组件，它调用了一些 utils.js 文件里的方法，那么在引入<code>&lt;script src=&quot;dialog&quot;&gt;</code>之前，需要先引入<code>&lt;script src=&quot;utils&quot;&gt;</code>，当类似的情况越来越多时，依赖就难免混杂，从而增加维护难度。</li>\n</ol>\n<p><em>解决方案</em></p>\n<p>这是 Yahoo! 的 YUI3 框架解决方案，通过 requires 一个依赖数组来指定依赖：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable constant_\">YUI</span>.<span class=\"title function_\">add</span>(<span class=\"string\">&#x27;my-module&#x27;</span>, <span class=\"keyword\">function</span> (<span class=\"params\">Y</span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// ...</span></span><br><span class=\"line\">&#125;, <span class=\"string\">&#x27;0.0.1&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"attr\">requires</span>: [<span class=\"string\">&#x27;node&#x27;</span>, <span class=\"string\">&#x27;event&#x27;</span>]</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n<p>这种类型的代码确实解决了依赖混乱的问题，但当一个文件依赖增多时，这种配置型的代码就会变得复杂而且难看。</p>\n<p>在这个时期，不同的 web 团队为了解决项目中遇到的这类难题提出了自己的解决方案，但没有哪种解决方案可以解决所有的问题。</p>\n<h3 id=\"几种模块化规范\"><a href=\"#几种模块化规范\" class=\"headerlink\" title=\"几种模块化规范\"></a>几种模块化规范</h3><p>从以上的例子中可以观察到一些模块化所面临的难题：</p>\n<ol>\n<li>如何安全的包装一个模块（不污染模块外的代码）</li>\n<li>如何定义模块的唯一标识（解决命名冲突）</li>\n<li>如何优雅的暴露模块（不增加复杂依赖）</li>\n<li>模块间互相引用的循环依赖问题</li>\n</ol>\n<p>在 nodeJS 出现后，Javascript 可以用来编写服务端程序，这时 Javascript 没有模块化的缺点变得更加令人难以忍受，nodeJS 社区开始制定 JS 模块化规范。[Modules&#x2F;1.0 规范](<a class=\"link\"   href=\"https://wiki.commonjs.org/wiki/Modules/1.0\" >Modules&#x2F;1.0 - CommonJS Spec Wiki <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>)，首次定义了一个模块应该如何编写：</p>\n<blockquote>\n<ol>\n<li>模块的标识应遵循的规则（书写规范）</li>\n<li>定义全局函数 require，通过传入模块标识来引入其他模块，执行的结果即为别的模块暴漏出来的 API</li>\n<li>如果被 require 函数引入的模块中也包含依赖，那么依次加载这些依赖</li>\n<li>如果引入模块失败，那么 require 函数应该报一个异常</li>\n<li>模块通过变量 exports 来向往暴漏 API，exports 只能是一个对象，暴漏的 API 须作为此对象的属性。</li>\n</ol>\n</blockquote>\n<p>一开始实现 Modules&#x2F;1.0 规范的是 ServerJS（CommonJS 改名之前的叫法），它的写法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math.js</span></span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">add</span> = <span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> sum = <span class=\"number\">0</span>,i = <span class=\"number\">0</span>, args = <span class=\"variable language_\">arguments</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">while</span>(i &lt; <span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">\t\tsum += args[i++];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// increment.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> add = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;math&#x27;</span>).<span class=\"property\">add</span>;</span><br><span class=\"line\"><span class=\"built_in\">exports</span>.<span class=\"property\">increment</span> = <span class=\"keyword\">function</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">add</span>(val,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// program.js</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> inc = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;increment&#x27;</span>).<span class=\"property\">increment</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">1</span>;</span><br><span class=\"line\"><span class=\"title function_\">inc</span>(a); <span class=\"comment\">//2</span></span><br></pre></td></tr></table></figure>\n<p>相比于之前的阶段，此时的代码更加简洁明了，但它只能在服务端运行而难以向浏览器端推广，原因如下：</p>\n<ol>\n<li>外层没有 function 包裹，变量直接暴露在全局（如上 increment.js 中的 add 方法）</li>\n<li>资源加载方式不同，在服务端，require 一个模块可以直接从内存中读取，消耗时间很小，但在浏览器端，require 一个模块需要向服务器发起一个 http 请求，下载完成后才能运行模块中的代码，也就是说 require 之后的代码必须等到 require 完成后才能执行。<br>因为这些问题，社区中的主张分裂为 3 种，分别是</li>\n</ol>\n<ul>\n<li>Modules&#x2F;1.x 派</li>\n<li>Modules&#x2F;Async 派</li>\n<li>Modules&#x2F;2.0 派</li>\n</ul>\n<p><code>Modules/1.x,CommonJS,browserify</code><br>这一派人认为既然 ServerJS 能够在服务端运行良好，只需要在现有基础上进行改进就能适应浏览器端的需求，浏览器端需要 function 包裹（为了保护变量）、需要异步加载，那么就使用一种工具将现有模块转化为适合浏览器端的代码，基于这种想法有基于这个主张，制定了 <a class=\"link\"   href=\"https://wiki.commonjs.org/wiki/Modules/Transport\" >Modules&#x2F;Transport 规范 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>，<code>browserify</code>是这种规范的一种实现，它是一种浏览器端的打包工具，能够将 nodeJS 模块转化为浏览器端可用的模块。</p>\n<p><code>Modules/Async,AMD,RequireJS</code><br>这一派人认为浏览器端与服务端差别巨大，不能沿用原有模块标准。既然浏览器端需要异步加载代码，就通过回调的形式设计规范。其原理是：在模块定义时就指明并加载依赖，当依赖加载完毕后再执行回调中的本模块。因为这种异步的特性设计的规范名为 <a class=\"link\"   href=\"https://github.com/amdjs/amdjs-api/wiki/AMD-%EF%BC%88%E4%B8%AD%E6%96%87%E7%89%88%EF%BC%89\" >AMD（Asynchronous Module Definition） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>，根据 AMD 规范出现了<code>RequireJS</code>的实现，它的写法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(id?, dependencies?, factory);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"string\">&#x27;increment&#x27;</span>,[<span class=\"string\">&#x27;math&#x27;</span>,<span class=\"string\">&#x27;other&#x27;</span>],<span class=\"keyword\">function</span>(<span class=\"params\">math</span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 此时 math 和 other 模块内的代码已经执行完毕</span></span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> math.<span class=\"title function_\">add</span>(val,<span class=\"number\">1</span>)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"comment\">// 即使 other 没有被使用到，other 还是被提前执行了</span></span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(<span class=\"literal\">false</span>)&#123;</span><br><span class=\"line\">\t\tother.<span class=\"title function_\">doSomething</span>();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p><code>Modules/2.0 CMD Sea.js</code><br>这一派人有点类似中间派，既不想丢弃旧的规范，也不像 AMD 那样推倒重来，最终他们制定了 <a href=\"%5Bhttp://wiki.commonjs.org/wiki/Modules/Wrappings%5D(http://wiki.commonjs.org/wiki/Modules/Wrappings)\">Modules&#x2F;Wrappings 规范</a>,<code>SeaJS</code>是它的一个实现。写法如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"title function_\">define</span>(factory);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title function_\">define</span>(<span class=\"keyword\">function</span>(<span class=\"params\"><span class=\"built_in\">require</span>,<span class=\"built_in\">exports</span>,<span class=\"variable language_\">module</span></span>)&#123;</span><br><span class=\"line\">\t<span class=\"comment\">// 就近原则，哪里使用哪里声明</span></span><br><span class=\"line\">\t<span class=\"keyword\">var</span> math = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;math&#x27;</span>);</span><br><span class=\"line\">\t<span class=\"keyword\">return</span>&#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">increment</span>:<span class=\"keyword\">function</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> math.<span class=\"title function_\">add</span>(val,<span class=\"number\">1</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>可以看到，它的写法和 RequireJS 很像，那么不同之处在哪里呢？RequireJS 会在依赖加载的第一时间加载并执行依赖内的代码，然后再执行回调内的模块代码；而 SeaJS 会在声明依赖之后才会执行依赖内的代码。总的来说就是：<code>AMD 推崇依赖前置、提前执行，CMD 推崇依赖就近、延迟执行。</code></p>\n<p><code>ES6 Module</code><br>从 ES6 开始，Javascript 开始有了标准层面的模块化，旨在成为浏览器端和服务器端的通用模块化方案。它的写法很简单，具体如下：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// math.js</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">add</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> &#123;add&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//increment.js</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;add&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./math&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">increment</span>(<span class=\"params\">val</span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> <span class=\"title function_\">add</span>(val,<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>那么它和上面提到的几种模块化方案有哪些不同呢？</p>\n<ol>\n<li>动态只读引用<blockquote>\n<p>ES6 模块的运行机制与 CommonJS 不一样。JS 引擎对脚本静态分析的时候，遇到模块加载命令<code>import</code>，就会生成一个只读引用。等到脚本真正执行时，再根据这个只读引用，到被加载的那个模块里面去取值。换句话说，ES6 的<code>import</code>有点像 Unix 系统的“符号连接”，原始值变了，<code>import</code>加载的值也会跟着变。因此</p>\n</blockquote>\n</li>\n<li>编译时输出<blockquote>\n<p>ES6 模块不是对象，而是通过 <code>export</code> 命令显式指定输出的代码，<code>import</code>时采用静态命令的形式。即在<code>import</code>时可以指定加载某个输出值，而不是加载整个模块，这种加载称为“编译时加载”。模块内部引用的变化，会反应在外部。</p>\n</blockquote>\n</li>\n</ol>\n<h3 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h3><ol>\n<li>AMD&#x2F;CMD&#x2F;CommonJs 是 js 模块化开发的规范，对应的实现是 require.js&#x2F;sea.js&#x2F;Node.js，ES Module 是 ES6 在语言规范上的模块化实现。</li>\n<li>CommonJS 主要针对服务端，AMD&#x2F;CMD&#x2F;ES Module 主要针对浏览器端，容易混淆的是 AMD&#x2F;CMD。针对服务器端和针对浏览器端有什么本质的区别呢？服务器端一般采用同步加载文件，也就是说需要某个模块，服务器端便停下来，等待它加载再执行，因为这部分很快。而浏览器端采用异步加载，因为需要发送 http 请求，这就需要一个预处理，提前将所需要的模块文件并行加载好。</li>\n<li>AMD&#x2F;CMD 的区别：虽然都是并行加载 js 文件，但还是有所区别，AMD 是预加载，在并行加载 js 文件同时，还会解析执行该模块（因为还需要执行，所以在加载某个模块前，这个模块的依赖模块需要先加载完成）；而 CMD 是懒加载，虽然会一开始就并行加载 js 文件，但是不会执行，而是在需要的时候才执行。</li>\n<li>AMD&#x2F;CMD 的优缺点：JS 引擎是单线程的，单位时间内只能执行单个任务，所以在加载多个大文件时，会阻塞脚本执行。AMD 会在文件全部加载完毕后才执行代码，CMD 则会遇见依赖再加载代码，在此种情况 CMD 会更快，其他情形则相差不多。</li>\n<li></li>\n</ol>\n<h2 id=\"二、模块化的本质\"><a href=\"#二、模块化的本质\" class=\"headerlink\" title=\"二、模块化的本质\"></a>二、模块化的本质</h2><blockquote>\n<p>模块化的本质在于外部只能访问模块暴露出来的属性和方法，可以通过闭包的特性实现。</p>\n</blockquote>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 原生模块模式</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">moduleA</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> something = <span class=\"string\">&quot;something&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> another = <span class=\"string\">&quot;another&quot;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(something);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    <span class=\"keyword\">function</span> <span class=\"title function_\">doAnother</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(another);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">        <span class=\"attr\">doSomething</span>: doSomething,</span><br><span class=\"line\">        <span class=\"attr\">doAnother</span>: doAnother</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 调用模块内方法</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = <span class=\"title function_\">moduleA</span>();</span><br><span class=\"line\">foo.<span class=\"title function_\">doSomething</span>(); <span class=\"comment\">// something</span></span><br><span class=\"line\">foo.<span class=\"property\">another</span>; <span class=\"comment\">// undefined</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// jQuery 类型的模块</span></span><br><span class=\"line\"><span class=\"comment\">// var $ = window.jQuery()</span></span><br></pre></td></tr></table></figure>\n<p>在这里通过调用 moduleA() 这个函数来创建模块实例 foo，通过这个模块实例可以调用模块内暴露的变量和方法，但仍存在问题，在于 moduleA 是一个全局函数，可能会造成函数名污染。也可以使用 IIFE 的方式创建：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// IIFE</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> foo = (<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> something = <span class=\"string\">&quot;something&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> another = <span class=\"string\">&quot;another&quot;</span>;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">doSomething</span>(<span class=\"params\"></span>)&#123;...&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">doAnother</span>(<span class=\"params\"></span>)&#123;...&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">doSomething</span>: doSomething,</span><br><span class=\"line\">\t\t<span class=\"attr\">doAnother</span>: doAnother</span><br><span class=\"line\">\t&#125;;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<p>这种形式避免了函数名冲突，并且实现了单例模式。</p>\n<p>大多数模块加载器本质上就是将这种模块定义封装进一个 API，下面给出进一步实现：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> moduleCreater = (<span class=\"keyword\">function</span> <span class=\"title function_\">Manager</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">var</span> modules = &#123;&#125;;</span><br><span class=\"line\">\t<span class=\"comment\">// 通过 define 方法定义模块</span></span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">define</span>(<span class=\"params\">id,deps,impl</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>;i &lt; deps.<span class=\"property\">length</span>;i++)&#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// 在这里解包依赖数组</span></span><br><span class=\"line\">\t\t\tdeps[i] = modules[deps[i]];</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tmodules[id] = impl.<span class=\"title function_\">apply</span>(imply,deps);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">function</span> <span class=\"title function_\">get</span>(<span class=\"params\">id</span>)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> modules[id];</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"attr\">define</span>: define,</span><br><span class=\"line\">\t\t<span class=\"attr\">get</span>: get</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)()</span><br></pre></td></tr></table></figure>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h2><ul>\n<li>《你不知道的 Javascript》（上卷）</li>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/lvdabao/p/js-modules-develop.html\" >js 模块化历程 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/moxiaowohuwei/p/8692359.html\" >js 模块化编程之彻底弄懂 CommonJS 和 AMD&#x2F;CMD！ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/seajs/seajs/issues/588\" >前端模块化开发那点历史 · Issue #588 · seajs&#x2F;seajs (github.com) <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://github.com/seajs/seajs/issues/269\" >从 CommonJS 到 Sea.js · Issue #269 · seajs&#x2F;seajs (github.com) <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n"},{"url":"https://mirone.me/zh-hans/a-complete-guide-to-typescript-decorator/","title":"【转载】TypeScript 装饰器完全指南 _ Disenchanted","date":"2022-11-02T12:34:17.000Z","_content":"> 原文转自：https://mirone.me/zh-hans/a-complete-guide-to-typescript-decorator/\n\n\n装饰器让 TypeScript 的世界更好。 我们使用的许多库都基于这一强大特性构建，例如 [Angular](https://angular.io/) 和 [Nestjs](https://nestjs.com/)。 在这篇博客中我将介绍装饰器和它的许多细节。 我希望在读完这篇文章后，你可以理解何时和如何使用这一强的的特性。\n\n装饰器本质上是一种特殊的函数被应用在于：\n\n1.  类\n2.  类属性\n3.  类方法\n4.  类访问器\n5.  类方法的参数\n\n所以应用装饰器其实很像是组合一系列函数，类似于高阶函数和类。 通过装饰器我们可以轻松实现 [代理模式](https://zh.wikipedia.org/zh-hans/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F) 来使代码更简洁以及实现其它一些更有趣的能力。\n\n装饰器的语法十分简单，只需要在想使用的装饰器前加上`@`符号，装饰器就会被应用到目标上：\n\n```\nfunction simpleDecorator() {\n  console.log('---hi I am a decorator---')\n}\n\n@simpleDecorator\nclass A {}\n\n```\n\n一共有 5 种装饰器可被我们使用：\n\n1.  类装饰器\n2.  属性装饰器\n3.  方法装饰器\n4.  访问器装饰器\n5.  参数装饰器\n\n让我们来快速认识一下这五种装饰器：\n\n```\n@classDecorator\nclass Bird {\n\n  \n  @propertyDecorator\n  name: string;\n  \n  @methodDecorator\n  fly(\n    \n    @parameterDecorator\n      meters: number\n  ) {}\n  \n  @accessorDecorator\n  get egg() {}\n}\n\n```\n\n## 时机\n\n装饰器只在解释执行时应用一次，例如：\n\n```\nfunction f(C) {\n  console.log('apply decorator')\n  return C\n}\n\n@f\nclass A {}\n\n```\n\n这里的代码会在终端中打印`apply decorator`，即便我们其实并没有使用类 A。\n\n## 执行顺序\n\n不同类型的装饰器的执行顺序是明确定义的：\n\n1.  实例成员：\n\n参数装饰器 -> 方法 / 访问器 / 属性 装饰器 2. 静态成员：\n参数装饰器 -> 方法 / 访问器 / 属性 装饰器 3. 构造器：参数装饰器 4. 类装饰器\n\n例如，考虑以下代码：\n\n```\nfunction f(key: string): any {\n  console.log(\"evaluate: \", key);\n  return function () {\n    console.log(\"call: \", key);\n  };\n}\n\n@f(\"Class Decorator\")\nclass C {\n  @f(\"Static Property\")\n  static prop?: number;\n\n  @f(\"Static Method\")\n  static method(@f(\"Static Method Parameter\") foo) {}\n\n  constructor(@f(\"Constructor Parameter\") foo) {}\n\n  @f(\"Instance Method\")\n  method(@f(\"Instance Method Parameter\") foo) {}\n\n  @f(\"Instance Property\")\n  prop?: number;\n}\n\n```\n\n它将会打印出以下信息：\n\n```\nevaluate:  Instance Method\nevaluate:  Instance Method Parameter\ncall:  Instance Method Parameter\ncall:  Instance Method\nevaluate:  Instance Property\ncall:  Instance Property\nevaluate:  Static Property\ncall:  Static Property\nevaluate:  Static Method\nevaluate:  Static Method Parameter\ncall:  Static Method Parameter\ncall:  Static Method\nevaluate:  Class Decorator\nevaluate:  Constructor Parameter\ncall:  Constructor Parameter\ncall:  Class Decorator\n\n```\n\n你也许会注意到执行实例属性`prop`晚于实例方法`method` 然而执行静态属性`static prop`早于静态方法`static method`。 这是因为对于属性 / 方法 / 访问器装饰器而言，执行顺序取决于声明它们的顺序。\n\n然而，同一方法中不同参数的装饰器的执行顺序是相反的， 最后一个参数的装饰器会最先被执行：\n\n```\nfunction f(key: string): any {\n  console.log(\"evaluate: \", key);\n  return function () {\n    console.log(\"call: \", key);\n  };\n}\n\nclass C {\n  method(\n    @f(\"Parameter Foo\") foo,\n    @f(\"Parameter Bar\") bar\n  ) {}\n}\n\n```\n\n这里的代码打印出的结果为：\n\n```\nevaluate:  Parameter Foo\nevaluate:  Parameter Bar\ncall:  Parameter Bar\ncall:  Parameter Foo\n\n```\n\n## 多个装饰器的组合\n\n你可以对同一目标应用多个装饰器。它们的组合顺序为：\n\n1.  求值外层装饰器\n2.  求值内层装饰器\n3.  调用内层装饰器\n4.  调用外层装饰器\n\n例如：\n```\nfunction f(key: string) {\n  console.log(\"evaluate: \", key);\n  return function () {\n    console.log(\"call: \", key);\n  };\n}\n\nclass C {\n  @f(\"Outer Method\")\n  @f(\"Inner Method\")\n  method() {}\n}\n\n```\n\n这里的代码打印出的结果为：\n\n```\nevaluate: Outer Method\nevaluate: Inner Method\ncall: Inner Method\ncall: Outer Method\n\n```\n\n## 类装饰器\n\n类型声明：\n\n```\ntype ClassDecorator = <TFunction extends Function>\n  (target: TFunction) => TFunction | void;\n\n```\n\n*   @参数：\n    1.  `target`: 类的构造器。\n*   @返回：\n    如果类装饰器返回了一个值，她将会被用来代替原有的类构造器的声明。\n\n因此，类装饰器适合用于继承一个现有类并添加一些属性和方法。\n\n例如我们可以添加一个`toString`方法给所有的类来覆盖它原有的`toString`方法。\n\n```\ntype Consturctor = { new (...args: any[]): any };\n\nfunction toString<T extends Consturctor>(BaseClass: T) {\n  return class extends BaseClass {\n    toString() {\n      return JSON.stringify(this);\n    }\n  };\n}\n\n@toString\nclass C {\n  public foo = \"foo\";\n  public num = 24;\n}\n\nconsole.log(new C().toString())\n\n```\n\n遗憾的是装饰器并没有类型保护，这意味着：\n\n```\ndeclare function Blah<T>(target: T): T & {foo: number}\n\n@Blah\nclass Foo {\n  bar() {\n    return this.foo; \n  }\n}\n\nnew Foo().foo; \n\n```\n\n这是 [一个 TypeScript 的已知的缺陷](https://github.com/microsoft/TypeScript/issues/4881)。 目前我们能做的只有额外提供一个类用于提供类型信息：\n\n```\ndeclare function Blah<T>(target: T): T & {foo: number}\n\nclass Base {\n  foo: number;\n}\n\n@Blah\nclass Foo extends Base {\n  bar() {\n    return this.foo;\n  }\n}\n\nnew Foo().foo;\n\n```\n\n## 属性装饰器\n\n类型声明：\n\n```\ntype PropertyDecorator =\n  (target: Object, propertyKey: string | symbol) => void;\n\n```\n\n*   @参数：\n    1.  `target`: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。\n    2.  `propertyKey`: 属性的名称。\n*   @返回：\n    返回的结果将被忽略。\n\n除了用于收集信息外，属性装饰器也可以用来给类添加额外的方法和属性。 例如我们可以写一个装饰器来给某些属性添加监听器。\n\n```\nfunction capitalizeFirstLetter(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction observable(target: any, key: string): any {\n  \n  const targetKey = \"on\" + capitalizeFirstLetter(key) + \"Change\";\n\n  target[targetKey] =\n    function (fn: (prev: any, next: any) => void) {\n      let prev = this[key];\n      Reflect.defineProperty(this, key, {\n        set(next) {\n          fn(prev, next);\n          prev = next;\n        }\n      })\n    };\n}\n\nclass C {\n  @observable\n  foo = -1;\n\n  @observable\n  bar = \"bar\";\n}\n\nconst c = new C();\n\nc.onFooChange((prev, next) => console.log(`prev: ${prev}, next: ${next}`))\nc.onBarChange((prev, next) => console.log(`prev: ${prev}, next: ${next}`))\n\nc.foo = 100; \nc.foo = -3.14; \nc.bar = \"baz\"; \nc.bar = \"sing\"; \n\n```\n\n## 方法装饰器\n\n类型声明：\n\n```\ntype MethodDecorator = <T>(\n  target: Object,\n  propertyKey: string | symbol,\n  descriptor: TypedPropertyDescriptor<T>\n) => TypedPropertyDescriptor<T> | void;\n\n```\n\n*   @参数：\n    1.  `target`: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。\n    2.  `propertyKey`: 属性的名称。\n    3.  `descriptor`: 属性的 [描述器](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor)。\n*   @返回： 如果返回了值，它会被用于替代属性的描述器。\n\n方法装饰器不同于属性装饰器的地方在于`descriptor`参数。 通过这个参数我们可以修改方法原本的实现，添加一些共用逻辑。 例如我们可以给一些方法添加打印输入与输出的能力：\n\n```\nfunction logger(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  const original = descriptor.value;\n\n  descriptor.value = function (...args) {\n    console.log('params: ', ...args);\n    const result = original.call(this, ...args);\n    console.log('result: ', result);\n    return result;\n  }\n}\n\nclass C {\n  @logger\n  add(x: number, y:number ) {\n    return x + y;\n  }\n}\n\nconst c = new C();\nc.add(1, 2);\n\n```\n\n## 访问器装饰器\n\n访问器装饰器总体上讲和方法装饰器很接近，唯一的区别在于描述器中有的 key 不同：\n\n方法装饰器的描述器的 key 为：\n\n*   `value`\n*   `writable`\n*   `enumerable`\n*   `configurable`\n\n访问器装饰器的描述器的 key 为：\n\n*   `get`\n*   `set`\n*   `enumerable`\n*   `configurable`\n\n例如，我们可以将某个属性设为不可变值：\n\n```\nfunction immutable(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  const original = descriptor.set;\n\n  descriptor.set = function (value: any) {\n    return original.call(this, { ...value })\n  }\n}\n\nclass C {\n  private _point = { x: 0, y: 0 }\n\n  @immutable\n  set point(value: { x: number, y: number }) {\n    this._point = value;\n  }\n\n  get point() {\n    return this._point;\n  }\n}\n\nconst c = new C();\nconst point = { x: 1, y: 1 }\nc.point = point;\n\nconsole.log(c.point === point)\n\n```\n\n## 参数装饰器\n\n类型声明：\n\n```\ntype ParameterDecorator = (\n  target: Object,\n  propertyKey: string | symbol,\n  parameterIndex: number\n) => void;\n\n```\n\n*   @参数：\n    1.  `target`: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。\n    2.  `propertyKey`: 属性的名称 （注意是方法的名称，而不是参数的名称）。\n    3.  `parameterIndex`: 参数在方法中所处的位置的下标。\n*   @返回：  \n    返回的值将会被忽略。\n\n单独的参数装饰器能做的事情很有限，它一般都被用于记录可被其它装饰器使用的信息。\n\n对于一些复杂场景， 我们可能需要结合使用不同的装饰器。 例如如果我们不仅想给我们的接口添加静态检查，还想加上运行时检查的能力。\n\n我们可以用 3 个步骤来实现这个功能：\n\n1.  标记需要检查的参数 （因为参数装饰器先于方法装饰器执行）。\n2.  改变方法的`descriptor`的`value`的值，先运行参数检查器，如果失败就抛出异常。\n3.  运行原有的接口实现。\n\n以下是代码：\n```\ntype Validator = (x: any) => boolean;\n\nconst validateMap: Record<string, Validator[]> = {};\n\nfunction typedDecoratorFactory(validator: Validator): ParameterDecorator {\n  return (_, key, index) => {\n    const target = validateMap[key as string] ?? [];\n    target[index] = validator;\n    validateMap[key as string] = target;\n  }\n}\n\nfunction validate(_: Object, key: string, descriptor: PropertyDescriptor) {\n  const originalFn = descriptor.value;\n  descriptor.value = function(...args: any[]) {\n\n    \n    const validatorList = validateMap[key];\n    if (validatorList) {\n      args.forEach((arg, index) => {\n        const validator = validatorList[index];\n\n        if (!validator) return;\n\n        const result = validator(arg);\n\n        if (!result) {\n          throw new Error(\n            `Failed for parameter: ${arg} of the index: ${index}`\n          );\n        }\n      });\n    }\n\n    \n    return originalFn.call(this, ...args);\n  }\n}\n\nconst isInt = typedDecoratorFactory((x) => Number.isInteger(x));\nconst isString = typedDecoratorFactory((x) => typeof x === 'string');\n\nclass C {\n  @validate\n  sayRepeat(@isString word: string, @isInt x: number) {\n    return Array(x).fill(word).join('');\n  }\n}\n\nconst c = new C();\nc.sayRepeat('hello', 2); \nc.sayRepeat('', 'lol' as any); \n\n```\n\n正如例子中展示的， 对我们来说同时理解不同种类装饰器的执行顺序和职责都很重要。\n\n严格地说，元数据和装饰器是 EcmaScript 中两个独立的部分。 然而，如果你想实现像是 [反射](https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%B0%84_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)) 这样的能力，你总是同时需要它们。\n\n如果我们回顾上一个例子，如果我们不想写各种不同的检查器呢？ 或者说，能否只写一个检查器能够通过我们编写的 TS 类型声明来自动运行类型检查？\n\n有了 [reflect-metadata](https://github.com/rbuckton/reflect-metadata) 的帮助， 我们可以获取编译期的类型。\n\n```\nimport 'reflect-metadata';\n\nfunction validate(\n  target: Object,\n  key: string,\n  descriptor: PropertyDescriptor\n) {\n  const originalFn = descriptor.value;\n\n  \n  const designParamTypes = Reflect\n    .getMetadata('design:paramtypes', target, key);\n\n  descriptor.value = function (...args: any[]) {\n    args.forEach((arg, index) => {\n\n      const paramType = designParamTypes[index];\n\n      const result = arg.constructor === paramType\n        || arg instanceof paramType;\n\n      if (!result) {\n        throw new Error(\n          `Failed for validating parameter: ${arg} of the index: ${index}`\n        );\n      }\n    });\n\n    return originalFn.call(this, ...args);\n  }\n}\n\nclass C {\n  @validate\n  sayRepeat(word: string, x: number) {\n    return Array(x).fill(word).join('');\n  }\n}\n\nconst c = new C();\nc.sayRepeat('hello', 2); \nc.sayRepeat('', 'lol' as any); \n\n```\n\n目前为止一共有三种编译期类型可以拿到：\n\n*   `design:type`: 属性的类型。\n*   `desin:paramtypes`: 方法的参数的类型。\n*   `design:returntype`: 方法的返回值的类型。\n\n这三种方式拿到的结果都是构造函数（例如`String`和`Number`）。规则是：\n\n*   number -> `Number`\n*   string -> `String`\n*   boolean -> `Boolean`\n*   void/null/never -> `undefined`\n*   Array/Tuple -> `Array`\n*   Class -> 类的构造函数\n*   Enum -> 如果是纯数字枚举则为`Number`, 否则是 `Object`\n*   Function -> `Function`\n*   其余都是`Object`\n\n现在我们可以对于何时使用装饰器得出结论， 在阅读上面的代码中你可能也有所感觉。\n\n我将例举一些常用的使用场景：\n\n*   Before/After 钩子。\n*   监听属性改变或者方法调用。\n*   对方法的参数做转换。\n*   添加额外的方法和属性。\n*   运行时类型检查。\n*   自动编解码。\n*   依赖注入。\n\n我希望读完这篇文章后，你可以找到装饰器的更多使用场景，并且用它来简化你的代码。","source":"_posts/ReprintTypscriptDecorator.md","raw":"---\nurl: https://mirone.me/zh-hans/a-complete-guide-to-typescript-decorator/\ntitle: 【转载】TypeScript 装饰器完全指南 _ Disenchanted\ndate: 2022-11-02 20:34:17\ntags:\n  - TS\ncategories:\n  - 算法\n---\n> 原文转自：https://mirone.me/zh-hans/a-complete-guide-to-typescript-decorator/\n\n\n装饰器让 TypeScript 的世界更好。 我们使用的许多库都基于这一强大特性构建，例如 [Angular](https://angular.io/) 和 [Nestjs](https://nestjs.com/)。 在这篇博客中我将介绍装饰器和它的许多细节。 我希望在读完这篇文章后，你可以理解何时和如何使用这一强的的特性。\n\n装饰器本质上是一种特殊的函数被应用在于：\n\n1.  类\n2.  类属性\n3.  类方法\n4.  类访问器\n5.  类方法的参数\n\n所以应用装饰器其实很像是组合一系列函数，类似于高阶函数和类。 通过装饰器我们可以轻松实现 [代理模式](https://zh.wikipedia.org/zh-hans/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F) 来使代码更简洁以及实现其它一些更有趣的能力。\n\n装饰器的语法十分简单，只需要在想使用的装饰器前加上`@`符号，装饰器就会被应用到目标上：\n\n```\nfunction simpleDecorator() {\n  console.log('---hi I am a decorator---')\n}\n\n@simpleDecorator\nclass A {}\n\n```\n\n一共有 5 种装饰器可被我们使用：\n\n1.  类装饰器\n2.  属性装饰器\n3.  方法装饰器\n4.  访问器装饰器\n5.  参数装饰器\n\n让我们来快速认识一下这五种装饰器：\n\n```\n@classDecorator\nclass Bird {\n\n  \n  @propertyDecorator\n  name: string;\n  \n  @methodDecorator\n  fly(\n    \n    @parameterDecorator\n      meters: number\n  ) {}\n  \n  @accessorDecorator\n  get egg() {}\n}\n\n```\n\n## 时机\n\n装饰器只在解释执行时应用一次，例如：\n\n```\nfunction f(C) {\n  console.log('apply decorator')\n  return C\n}\n\n@f\nclass A {}\n\n```\n\n这里的代码会在终端中打印`apply decorator`，即便我们其实并没有使用类 A。\n\n## 执行顺序\n\n不同类型的装饰器的执行顺序是明确定义的：\n\n1.  实例成员：\n\n参数装饰器 -> 方法 / 访问器 / 属性 装饰器 2. 静态成员：\n参数装饰器 -> 方法 / 访问器 / 属性 装饰器 3. 构造器：参数装饰器 4. 类装饰器\n\n例如，考虑以下代码：\n\n```\nfunction f(key: string): any {\n  console.log(\"evaluate: \", key);\n  return function () {\n    console.log(\"call: \", key);\n  };\n}\n\n@f(\"Class Decorator\")\nclass C {\n  @f(\"Static Property\")\n  static prop?: number;\n\n  @f(\"Static Method\")\n  static method(@f(\"Static Method Parameter\") foo) {}\n\n  constructor(@f(\"Constructor Parameter\") foo) {}\n\n  @f(\"Instance Method\")\n  method(@f(\"Instance Method Parameter\") foo) {}\n\n  @f(\"Instance Property\")\n  prop?: number;\n}\n\n```\n\n它将会打印出以下信息：\n\n```\nevaluate:  Instance Method\nevaluate:  Instance Method Parameter\ncall:  Instance Method Parameter\ncall:  Instance Method\nevaluate:  Instance Property\ncall:  Instance Property\nevaluate:  Static Property\ncall:  Static Property\nevaluate:  Static Method\nevaluate:  Static Method Parameter\ncall:  Static Method Parameter\ncall:  Static Method\nevaluate:  Class Decorator\nevaluate:  Constructor Parameter\ncall:  Constructor Parameter\ncall:  Class Decorator\n\n```\n\n你也许会注意到执行实例属性`prop`晚于实例方法`method` 然而执行静态属性`static prop`早于静态方法`static method`。 这是因为对于属性 / 方法 / 访问器装饰器而言，执行顺序取决于声明它们的顺序。\n\n然而，同一方法中不同参数的装饰器的执行顺序是相反的， 最后一个参数的装饰器会最先被执行：\n\n```\nfunction f(key: string): any {\n  console.log(\"evaluate: \", key);\n  return function () {\n    console.log(\"call: \", key);\n  };\n}\n\nclass C {\n  method(\n    @f(\"Parameter Foo\") foo,\n    @f(\"Parameter Bar\") bar\n  ) {}\n}\n\n```\n\n这里的代码打印出的结果为：\n\n```\nevaluate:  Parameter Foo\nevaluate:  Parameter Bar\ncall:  Parameter Bar\ncall:  Parameter Foo\n\n```\n\n## 多个装饰器的组合\n\n你可以对同一目标应用多个装饰器。它们的组合顺序为：\n\n1.  求值外层装饰器\n2.  求值内层装饰器\n3.  调用内层装饰器\n4.  调用外层装饰器\n\n例如：\n```\nfunction f(key: string) {\n  console.log(\"evaluate: \", key);\n  return function () {\n    console.log(\"call: \", key);\n  };\n}\n\nclass C {\n  @f(\"Outer Method\")\n  @f(\"Inner Method\")\n  method() {}\n}\n\n```\n\n这里的代码打印出的结果为：\n\n```\nevaluate: Outer Method\nevaluate: Inner Method\ncall: Inner Method\ncall: Outer Method\n\n```\n\n## 类装饰器\n\n类型声明：\n\n```\ntype ClassDecorator = <TFunction extends Function>\n  (target: TFunction) => TFunction | void;\n\n```\n\n*   @参数：\n    1.  `target`: 类的构造器。\n*   @返回：\n    如果类装饰器返回了一个值，她将会被用来代替原有的类构造器的声明。\n\n因此，类装饰器适合用于继承一个现有类并添加一些属性和方法。\n\n例如我们可以添加一个`toString`方法给所有的类来覆盖它原有的`toString`方法。\n\n```\ntype Consturctor = { new (...args: any[]): any };\n\nfunction toString<T extends Consturctor>(BaseClass: T) {\n  return class extends BaseClass {\n    toString() {\n      return JSON.stringify(this);\n    }\n  };\n}\n\n@toString\nclass C {\n  public foo = \"foo\";\n  public num = 24;\n}\n\nconsole.log(new C().toString())\n\n```\n\n遗憾的是装饰器并没有类型保护，这意味着：\n\n```\ndeclare function Blah<T>(target: T): T & {foo: number}\n\n@Blah\nclass Foo {\n  bar() {\n    return this.foo; \n  }\n}\n\nnew Foo().foo; \n\n```\n\n这是 [一个 TypeScript 的已知的缺陷](https://github.com/microsoft/TypeScript/issues/4881)。 目前我们能做的只有额外提供一个类用于提供类型信息：\n\n```\ndeclare function Blah<T>(target: T): T & {foo: number}\n\nclass Base {\n  foo: number;\n}\n\n@Blah\nclass Foo extends Base {\n  bar() {\n    return this.foo;\n  }\n}\n\nnew Foo().foo;\n\n```\n\n## 属性装饰器\n\n类型声明：\n\n```\ntype PropertyDecorator =\n  (target: Object, propertyKey: string | symbol) => void;\n\n```\n\n*   @参数：\n    1.  `target`: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。\n    2.  `propertyKey`: 属性的名称。\n*   @返回：\n    返回的结果将被忽略。\n\n除了用于收集信息外，属性装饰器也可以用来给类添加额外的方法和属性。 例如我们可以写一个装饰器来给某些属性添加监听器。\n\n```\nfunction capitalizeFirstLetter(str: string) {\n  return str.charAt(0).toUpperCase() + str.slice(1);\n}\n\nfunction observable(target: any, key: string): any {\n  \n  const targetKey = \"on\" + capitalizeFirstLetter(key) + \"Change\";\n\n  target[targetKey] =\n    function (fn: (prev: any, next: any) => void) {\n      let prev = this[key];\n      Reflect.defineProperty(this, key, {\n        set(next) {\n          fn(prev, next);\n          prev = next;\n        }\n      })\n    };\n}\n\nclass C {\n  @observable\n  foo = -1;\n\n  @observable\n  bar = \"bar\";\n}\n\nconst c = new C();\n\nc.onFooChange((prev, next) => console.log(`prev: ${prev}, next: ${next}`))\nc.onBarChange((prev, next) => console.log(`prev: ${prev}, next: ${next}`))\n\nc.foo = 100; \nc.foo = -3.14; \nc.bar = \"baz\"; \nc.bar = \"sing\"; \n\n```\n\n## 方法装饰器\n\n类型声明：\n\n```\ntype MethodDecorator = <T>(\n  target: Object,\n  propertyKey: string | symbol,\n  descriptor: TypedPropertyDescriptor<T>\n) => TypedPropertyDescriptor<T> | void;\n\n```\n\n*   @参数：\n    1.  `target`: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。\n    2.  `propertyKey`: 属性的名称。\n    3.  `descriptor`: 属性的 [描述器](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor)。\n*   @返回： 如果返回了值，它会被用于替代属性的描述器。\n\n方法装饰器不同于属性装饰器的地方在于`descriptor`参数。 通过这个参数我们可以修改方法原本的实现，添加一些共用逻辑。 例如我们可以给一些方法添加打印输入与输出的能力：\n\n```\nfunction logger(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  const original = descriptor.value;\n\n  descriptor.value = function (...args) {\n    console.log('params: ', ...args);\n    const result = original.call(this, ...args);\n    console.log('result: ', result);\n    return result;\n  }\n}\n\nclass C {\n  @logger\n  add(x: number, y:number ) {\n    return x + y;\n  }\n}\n\nconst c = new C();\nc.add(1, 2);\n\n```\n\n## 访问器装饰器\n\n访问器装饰器总体上讲和方法装饰器很接近，唯一的区别在于描述器中有的 key 不同：\n\n方法装饰器的描述器的 key 为：\n\n*   `value`\n*   `writable`\n*   `enumerable`\n*   `configurable`\n\n访问器装饰器的描述器的 key 为：\n\n*   `get`\n*   `set`\n*   `enumerable`\n*   `configurable`\n\n例如，我们可以将某个属性设为不可变值：\n\n```\nfunction immutable(target: any, propertyKey: string, descriptor: PropertyDescriptor) {\n  const original = descriptor.set;\n\n  descriptor.set = function (value: any) {\n    return original.call(this, { ...value })\n  }\n}\n\nclass C {\n  private _point = { x: 0, y: 0 }\n\n  @immutable\n  set point(value: { x: number, y: number }) {\n    this._point = value;\n  }\n\n  get point() {\n    return this._point;\n  }\n}\n\nconst c = new C();\nconst point = { x: 1, y: 1 }\nc.point = point;\n\nconsole.log(c.point === point)\n\n```\n\n## 参数装饰器\n\n类型声明：\n\n```\ntype ParameterDecorator = (\n  target: Object,\n  propertyKey: string | symbol,\n  parameterIndex: number\n) => void;\n\n```\n\n*   @参数：\n    1.  `target`: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。\n    2.  `propertyKey`: 属性的名称 （注意是方法的名称，而不是参数的名称）。\n    3.  `parameterIndex`: 参数在方法中所处的位置的下标。\n*   @返回：  \n    返回的值将会被忽略。\n\n单独的参数装饰器能做的事情很有限，它一般都被用于记录可被其它装饰器使用的信息。\n\n对于一些复杂场景， 我们可能需要结合使用不同的装饰器。 例如如果我们不仅想给我们的接口添加静态检查，还想加上运行时检查的能力。\n\n我们可以用 3 个步骤来实现这个功能：\n\n1.  标记需要检查的参数 （因为参数装饰器先于方法装饰器执行）。\n2.  改变方法的`descriptor`的`value`的值，先运行参数检查器，如果失败就抛出异常。\n3.  运行原有的接口实现。\n\n以下是代码：\n```\ntype Validator = (x: any) => boolean;\n\nconst validateMap: Record<string, Validator[]> = {};\n\nfunction typedDecoratorFactory(validator: Validator): ParameterDecorator {\n  return (_, key, index) => {\n    const target = validateMap[key as string] ?? [];\n    target[index] = validator;\n    validateMap[key as string] = target;\n  }\n}\n\nfunction validate(_: Object, key: string, descriptor: PropertyDescriptor) {\n  const originalFn = descriptor.value;\n  descriptor.value = function(...args: any[]) {\n\n    \n    const validatorList = validateMap[key];\n    if (validatorList) {\n      args.forEach((arg, index) => {\n        const validator = validatorList[index];\n\n        if (!validator) return;\n\n        const result = validator(arg);\n\n        if (!result) {\n          throw new Error(\n            `Failed for parameter: ${arg} of the index: ${index}`\n          );\n        }\n      });\n    }\n\n    \n    return originalFn.call(this, ...args);\n  }\n}\n\nconst isInt = typedDecoratorFactory((x) => Number.isInteger(x));\nconst isString = typedDecoratorFactory((x) => typeof x === 'string');\n\nclass C {\n  @validate\n  sayRepeat(@isString word: string, @isInt x: number) {\n    return Array(x).fill(word).join('');\n  }\n}\n\nconst c = new C();\nc.sayRepeat('hello', 2); \nc.sayRepeat('', 'lol' as any); \n\n```\n\n正如例子中展示的， 对我们来说同时理解不同种类装饰器的执行顺序和职责都很重要。\n\n严格地说，元数据和装饰器是 EcmaScript 中两个独立的部分。 然而，如果你想实现像是 [反射](https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%B0%84_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)) 这样的能力，你总是同时需要它们。\n\n如果我们回顾上一个例子，如果我们不想写各种不同的检查器呢？ 或者说，能否只写一个检查器能够通过我们编写的 TS 类型声明来自动运行类型检查？\n\n有了 [reflect-metadata](https://github.com/rbuckton/reflect-metadata) 的帮助， 我们可以获取编译期的类型。\n\n```\nimport 'reflect-metadata';\n\nfunction validate(\n  target: Object,\n  key: string,\n  descriptor: PropertyDescriptor\n) {\n  const originalFn = descriptor.value;\n\n  \n  const designParamTypes = Reflect\n    .getMetadata('design:paramtypes', target, key);\n\n  descriptor.value = function (...args: any[]) {\n    args.forEach((arg, index) => {\n\n      const paramType = designParamTypes[index];\n\n      const result = arg.constructor === paramType\n        || arg instanceof paramType;\n\n      if (!result) {\n        throw new Error(\n          `Failed for validating parameter: ${arg} of the index: ${index}`\n        );\n      }\n    });\n\n    return originalFn.call(this, ...args);\n  }\n}\n\nclass C {\n  @validate\n  sayRepeat(word: string, x: number) {\n    return Array(x).fill(word).join('');\n  }\n}\n\nconst c = new C();\nc.sayRepeat('hello', 2); \nc.sayRepeat('', 'lol' as any); \n\n```\n\n目前为止一共有三种编译期类型可以拿到：\n\n*   `design:type`: 属性的类型。\n*   `desin:paramtypes`: 方法的参数的类型。\n*   `design:returntype`: 方法的返回值的类型。\n\n这三种方式拿到的结果都是构造函数（例如`String`和`Number`）。规则是：\n\n*   number -> `Number`\n*   string -> `String`\n*   boolean -> `Boolean`\n*   void/null/never -> `undefined`\n*   Array/Tuple -> `Array`\n*   Class -> 类的构造函数\n*   Enum -> 如果是纯数字枚举则为`Number`, 否则是 `Object`\n*   Function -> `Function`\n*   其余都是`Object`\n\n现在我们可以对于何时使用装饰器得出结论， 在阅读上面的代码中你可能也有所感觉。\n\n我将例举一些常用的使用场景：\n\n*   Before/After 钩子。\n*   监听属性改变或者方法调用。\n*   对方法的参数做转换。\n*   添加额外的方法和属性。\n*   运行时类型检查。\n*   自动编解码。\n*   依赖注入。\n\n我希望读完这篇文章后，你可以找到装饰器的更多使用场景，并且用它来简化你的代码。","slug":"ReprintTypscriptDecorator","published":1,"updated":"2024-07-14T01:09:19.909Z","comments":1,"layout":"post","photos":[],"_id":"clyliw094001dtch8byb55tvf","content":"<blockquote>\n<p>原文转自：<a class=\"link\"   href=\"https://mirone.me/zh-hans/a-complete-guide-to-typescript-decorator/\" >https://mirone.me/zh-hans/a-complete-guide-to-typescript-decorator/ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n</blockquote>\n<p>装饰器让 TypeScript 的世界更好。 我们使用的许多库都基于这一强大特性构建，例如 <a class=\"link\"   href=\"https://angular.io/\" >Angular <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 和 <a class=\"link\"   href=\"https://nestjs.com/\" >Nestjs <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>。 在这篇博客中我将介绍装饰器和它的许多细节。 我希望在读完这篇文章后，你可以理解何时和如何使用这一强的的特性。</p>\n<p>装饰器本质上是一种特殊的函数被应用在于：</p>\n<ol>\n<li>类</li>\n<li>类属性</li>\n<li>类方法</li>\n<li>类访问器</li>\n<li>类方法的参数</li>\n</ol>\n<p>所以应用装饰器其实很像是组合一系列函数，类似于高阶函数和类。 通过装饰器我们可以轻松实现 <a class=\"link\"   href=\"https://zh.wikipedia.org/zh-hans/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\" >代理模式 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 来使代码更简洁以及实现其它一些更有趣的能力。</p>\n<p>装饰器的语法十分简单，只需要在想使用的装饰器前加上<code>@</code>符号，装饰器就会被应用到目标上：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function simpleDecorator() &#123;</span><br><span class=\"line\">  console.log(&#x27;---hi I am a decorator---&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@simpleDecorator</span><br><span class=\"line\">class A &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>一共有 5 种装饰器可被我们使用：</p>\n<ol>\n<li>类装饰器</li>\n<li>属性装饰器</li>\n<li>方法装饰器</li>\n<li>访问器装饰器</li>\n<li>参数装饰器</li>\n</ol>\n<p>让我们来快速认识一下这五种装饰器：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@classDecorator</span><br><span class=\"line\">class Bird &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  @propertyDecorator</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\">  </span><br><span class=\"line\">  @methodDecorator</span><br><span class=\"line\">  fly(</span><br><span class=\"line\">    </span><br><span class=\"line\">    @parameterDecorator</span><br><span class=\"line\">      meters: number</span><br><span class=\"line\">  ) &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  @accessorDecorator</span><br><span class=\"line\">  get egg() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"时机\"><a href=\"#时机\" class=\"headerlink\" title=\"时机\"></a>时机</h2><p>装饰器只在解释执行时应用一次，例如：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f(C) &#123;</span><br><span class=\"line\">  console.log(&#x27;apply decorator&#x27;)</span><br><span class=\"line\">  return C</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@f</span><br><span class=\"line\">class A &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>这里的代码会在终端中打印<code>apply decorator</code>，即便我们其实并没有使用类 A。</p>\n<h2 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h2><p>不同类型的装饰器的执行顺序是明确定义的：</p>\n<ol>\n<li>实例成员：</li>\n</ol>\n<p>参数装饰器 -&gt; 方法 &#x2F; 访问器 &#x2F; 属性 装饰器 2. 静态成员：<br>参数装饰器 -&gt; 方法 &#x2F; 访问器 &#x2F; 属性 装饰器 3. 构造器：参数装饰器 4. 类装饰器</p>\n<p>例如，考虑以下代码：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f(key: string): any &#123;</span><br><span class=\"line\">  console.log(&quot;evaluate: &quot;, key);</span><br><span class=\"line\">  return function () &#123;</span><br><span class=\"line\">    console.log(&quot;call: &quot;, key);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@f(&quot;Class Decorator&quot;)</span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  @f(&quot;Static Property&quot;)</span><br><span class=\"line\">  static prop?: number;</span><br><span class=\"line\"></span><br><span class=\"line\">  @f(&quot;Static Method&quot;)</span><br><span class=\"line\">  static method(@f(&quot;Static Method Parameter&quot;) foo) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(@f(&quot;Constructor Parameter&quot;) foo) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @f(&quot;Instance Method&quot;)</span><br><span class=\"line\">  method(@f(&quot;Instance Method Parameter&quot;) foo) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @f(&quot;Instance Property&quot;)</span><br><span class=\"line\">  prop?: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>它将会打印出以下信息：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evaluate:  Instance Method</span><br><span class=\"line\">evaluate:  Instance Method Parameter</span><br><span class=\"line\">call:  Instance Method Parameter</span><br><span class=\"line\">call:  Instance Method</span><br><span class=\"line\">evaluate:  Instance Property</span><br><span class=\"line\">call:  Instance Property</span><br><span class=\"line\">evaluate:  Static Property</span><br><span class=\"line\">call:  Static Property</span><br><span class=\"line\">evaluate:  Static Method</span><br><span class=\"line\">evaluate:  Static Method Parameter</span><br><span class=\"line\">call:  Static Method Parameter</span><br><span class=\"line\">call:  Static Method</span><br><span class=\"line\">evaluate:  Class Decorator</span><br><span class=\"line\">evaluate:  Constructor Parameter</span><br><span class=\"line\">call:  Constructor Parameter</span><br><span class=\"line\">call:  Class Decorator</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>你也许会注意到执行实例属性<code>prop</code>晚于实例方法<code>method</code> 然而执行静态属性<code>static prop</code>早于静态方法<code>static method</code>。 这是因为对于属性 &#x2F; 方法 &#x2F; 访问器装饰器而言，执行顺序取决于声明它们的顺序。</p>\n<p>然而，同一方法中不同参数的装饰器的执行顺序是相反的， 最后一个参数的装饰器会最先被执行：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f(key: string): any &#123;</span><br><span class=\"line\">  console.log(&quot;evaluate: &quot;, key);</span><br><span class=\"line\">  return function () &#123;</span><br><span class=\"line\">    console.log(&quot;call: &quot;, key);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  method(</span><br><span class=\"line\">    @f(&quot;Parameter Foo&quot;) foo,</span><br><span class=\"line\">    @f(&quot;Parameter Bar&quot;) bar</span><br><span class=\"line\">  ) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>这里的代码打印出的结果为：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evaluate:  Parameter Foo</span><br><span class=\"line\">evaluate:  Parameter Bar</span><br><span class=\"line\">call:  Parameter Bar</span><br><span class=\"line\">call:  Parameter Foo</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"多个装饰器的组合\"><a href=\"#多个装饰器的组合\" class=\"headerlink\" title=\"多个装饰器的组合\"></a>多个装饰器的组合</h2><p>你可以对同一目标应用多个装饰器。它们的组合顺序为：</p>\n<ol>\n<li>求值外层装饰器</li>\n<li>求值内层装饰器</li>\n<li>调用内层装饰器</li>\n<li>调用外层装饰器</li>\n</ol>\n<p>例如：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f(key: string) &#123;</span><br><span class=\"line\">  console.log(&quot;evaluate: &quot;, key);</span><br><span class=\"line\">  return function () &#123;</span><br><span class=\"line\">    console.log(&quot;call: &quot;, key);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  @f(&quot;Outer Method&quot;)</span><br><span class=\"line\">  @f(&quot;Inner Method&quot;)</span><br><span class=\"line\">  method() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>这里的代码打印出的结果为：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evaluate: Outer Method</span><br><span class=\"line\">evaluate: Inner Method</span><br><span class=\"line\">call: Inner Method</span><br><span class=\"line\">call: Outer Method</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h2><p>类型声明：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type ClassDecorator = &lt;TFunction extends Function&gt;</span><br><span class=\"line\">  (target: TFunction) =&gt; TFunction | void;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>@参数：<ol>\n<li><code>target</code>: 类的构造器。</li>\n</ol>\n</li>\n<li>@返回：<br>如果类装饰器返回了一个值，她将会被用来代替原有的类构造器的声明。</li>\n</ul>\n<p>因此，类装饰器适合用于继承一个现有类并添加一些属性和方法。</p>\n<p>例如我们可以添加一个<code>toString</code>方法给所有的类来覆盖它原有的<code>toString</code>方法。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Consturctor = &#123; new (...args: any[]): any &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function toString&lt;T extends Consturctor&gt;(BaseClass: T) &#123;</span><br><span class=\"line\">  return class extends BaseClass &#123;</span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">      return JSON.stringify(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@toString</span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  public foo = &quot;foo&quot;;</span><br><span class=\"line\">  public num = 24;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(new C().toString())</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>遗憾的是装饰器并没有类型保护，这意味着：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare function Blah&lt;T&gt;(target: T): T &amp; &#123;foo: number&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Blah</span><br><span class=\"line\">class Foo &#123;</span><br><span class=\"line\">  bar() &#123;</span><br><span class=\"line\">    return this.foo; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new Foo().foo; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>这是 <a class=\"link\"   href=\"https://github.com/microsoft/TypeScript/issues/4881\" >一个 TypeScript 的已知的缺陷 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>。 目前我们能做的只有额外提供一个类用于提供类型信息：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare function Blah&lt;T&gt;(target: T): T &amp; &#123;foo: number&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Base &#123;</span><br><span class=\"line\">  foo: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Blah</span><br><span class=\"line\">class Foo extends Base &#123;</span><br><span class=\"line\">  bar() &#123;</span><br><span class=\"line\">    return this.foo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new Foo().foo;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"属性装饰器\"><a href=\"#属性装饰器\" class=\"headerlink\" title=\"属性装饰器\"></a>属性装饰器</h2><p>类型声明：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type PropertyDecorator =</span><br><span class=\"line\">  (target: Object, propertyKey: string | symbol) =&gt; void;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>@参数：<ol>\n<li><code>target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。</li>\n<li><code>propertyKey</code>: 属性的名称。</li>\n</ol>\n</li>\n<li>@返回：<br>返回的结果将被忽略。</li>\n</ul>\n<p>除了用于收集信息外，属性装饰器也可以用来给类添加额外的方法和属性。 例如我们可以写一个装饰器来给某些属性添加监听器。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function capitalizeFirstLetter(str: string) &#123;</span><br><span class=\"line\">  return str.charAt(0).toUpperCase() + str.slice(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function observable(target: any, key: string): any &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  const targetKey = &quot;on&quot; + capitalizeFirstLetter(key) + &quot;Change&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  target[targetKey] =</span><br><span class=\"line\">    function (fn: (prev: any, next: any) =&gt; void) &#123;</span><br><span class=\"line\">      let prev = this[key];</span><br><span class=\"line\">      Reflect.defineProperty(this, key, &#123;</span><br><span class=\"line\">        set(next) &#123;</span><br><span class=\"line\">          fn(prev, next);</span><br><span class=\"line\">          prev = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  @observable</span><br><span class=\"line\">  foo = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">  @observable</span><br><span class=\"line\">  bar = &quot;bar&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const c = new C();</span><br><span class=\"line\"></span><br><span class=\"line\">c.onFooChange((prev, next) =&gt; console.log(`prev: $&#123;prev&#125;, next: $&#123;next&#125;`))</span><br><span class=\"line\">c.onBarChange((prev, next) =&gt; console.log(`prev: $&#123;prev&#125;, next: $&#123;next&#125;`))</span><br><span class=\"line\"></span><br><span class=\"line\">c.foo = 100; </span><br><span class=\"line\">c.foo = -3.14; </span><br><span class=\"line\">c.bar = &quot;baz&quot;; </span><br><span class=\"line\">c.bar = &quot;sing&quot;; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"方法装饰器\"><a href=\"#方法装饰器\" class=\"headerlink\" title=\"方法装饰器\"></a>方法装饰器</h2><p>类型声明：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type MethodDecorator = &lt;T&gt;(</span><br><span class=\"line\">  target: Object,</span><br><span class=\"line\">  propertyKey: string | symbol,</span><br><span class=\"line\">  descriptor: TypedPropertyDescriptor&lt;T&gt;</span><br><span class=\"line\">) =&gt; TypedPropertyDescriptor&lt;T&gt; | void;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>@参数：<ol>\n<li><code>target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。</li>\n<li><code>propertyKey</code>: 属性的名称。</li>\n<li><code>descriptor</code>: 属性的 <a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\" >描述器 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>。</li>\n</ol>\n</li>\n<li>@返回： 如果返回了值，它会被用于替代属性的描述器。</li>\n</ul>\n<p>方法装饰器不同于属性装饰器的地方在于<code>descriptor</code>参数。 通过这个参数我们可以修改方法原本的实现，添加一些共用逻辑。 例如我们可以给一些方法添加打印输入与输出的能力：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function logger(target: any, propertyKey: string, descriptor: PropertyDescriptor) &#123;</span><br><span class=\"line\">  const original = descriptor.value;</span><br><span class=\"line\"></span><br><span class=\"line\">  descriptor.value = function (...args) &#123;</span><br><span class=\"line\">    console.log(&#x27;params: &#x27;, ...args);</span><br><span class=\"line\">    const result = original.call(this, ...args);</span><br><span class=\"line\">    console.log(&#x27;result: &#x27;, result);</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  @logger</span><br><span class=\"line\">  add(x: number, y:number ) &#123;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const c = new C();</span><br><span class=\"line\">c.add(1, 2);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"访问器装饰器\"><a href=\"#访问器装饰器\" class=\"headerlink\" title=\"访问器装饰器\"></a>访问器装饰器</h2><p>访问器装饰器总体上讲和方法装饰器很接近，唯一的区别在于描述器中有的 key 不同：</p>\n<p>方法装饰器的描述器的 key 为：</p>\n<ul>\n<li><code>value</code></li>\n<li><code>writable</code></li>\n<li><code>enumerable</code></li>\n<li><code>configurable</code></li>\n</ul>\n<p>访问器装饰器的描述器的 key 为：</p>\n<ul>\n<li><code>get</code></li>\n<li><code>set</code></li>\n<li><code>enumerable</code></li>\n<li><code>configurable</code></li>\n</ul>\n<p>例如，我们可以将某个属性设为不可变值：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function immutable(target: any, propertyKey: string, descriptor: PropertyDescriptor) &#123;</span><br><span class=\"line\">  const original = descriptor.set;</span><br><span class=\"line\"></span><br><span class=\"line\">  descriptor.set = function (value: any) &#123;</span><br><span class=\"line\">    return original.call(this, &#123; ...value &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  private _point = &#123; x: 0, y: 0 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @immutable</span><br><span class=\"line\">  set point(value: &#123; x: number, y: number &#125;) &#123;</span><br><span class=\"line\">    this._point = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  get point() &#123;</span><br><span class=\"line\">    return this._point;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const c = new C();</span><br><span class=\"line\">const point = &#123; x: 1, y: 1 &#125;</span><br><span class=\"line\">c.point = point;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(c.point === point)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"参数装饰器\"><a href=\"#参数装饰器\" class=\"headerlink\" title=\"参数装饰器\"></a>参数装饰器</h2><p>类型声明：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type ParameterDecorator = (</span><br><span class=\"line\">  target: Object,</span><br><span class=\"line\">  propertyKey: string | symbol,</span><br><span class=\"line\">  parameterIndex: number</span><br><span class=\"line\">) =&gt; void;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<ul>\n<li>@参数：<ol>\n<li><code>target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。</li>\n<li><code>propertyKey</code>: 属性的名称 （注意是方法的名称，而不是参数的名称）。</li>\n<li><code>parameterIndex</code>: 参数在方法中所处的位置的下标。</li>\n</ol>\n</li>\n<li>@返回：<br>返回的值将会被忽略。</li>\n</ul>\n<p>单独的参数装饰器能做的事情很有限，它一般都被用于记录可被其它装饰器使用的信息。</p>\n<p>对于一些复杂场景， 我们可能需要结合使用不同的装饰器。 例如如果我们不仅想给我们的接口添加静态检查，还想加上运行时检查的能力。</p>\n<p>我们可以用 3 个步骤来实现这个功能：</p>\n<ol>\n<li>标记需要检查的参数 （因为参数装饰器先于方法装饰器执行）。</li>\n<li>改变方法的<code>descriptor</code>的<code>value</code>的值，先运行参数检查器，如果失败就抛出异常。</li>\n<li>运行原有的接口实现。</li>\n</ol>\n<p>以下是代码：</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Validator = (x: any) =&gt; boolean;</span><br><span class=\"line\"></span><br><span class=\"line\">const validateMap: Record&lt;string, Validator[]&gt; = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function typedDecoratorFactory(validator: Validator): ParameterDecorator &#123;</span><br><span class=\"line\">  return (_, key, index) =&gt; &#123;</span><br><span class=\"line\">    const target = validateMap[key as string] ?? [];</span><br><span class=\"line\">    target[index] = validator;</span><br><span class=\"line\">    validateMap[key as string] = target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function validate(_: Object, key: string, descriptor: PropertyDescriptor) &#123;</span><br><span class=\"line\">  const originalFn = descriptor.value;</span><br><span class=\"line\">  descriptor.value = function(...args: any[]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    const validatorList = validateMap[key];</span><br><span class=\"line\">    if (validatorList) &#123;</span><br><span class=\"line\">      args.forEach((arg, index) =&gt; &#123;</span><br><span class=\"line\">        const validator = validatorList[index];</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!validator) return;</span><br><span class=\"line\"></span><br><span class=\"line\">        const result = validator(arg);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!result) &#123;</span><br><span class=\"line\">          throw new Error(</span><br><span class=\"line\">            `Failed for parameter: $&#123;arg&#125; of the index: $&#123;index&#125;`</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    return originalFn.call(this, ...args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const isInt = typedDecoratorFactory((x) =&gt; Number.isInteger(x));</span><br><span class=\"line\">const isString = typedDecoratorFactory((x) =&gt; typeof x === &#x27;string&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  @validate</span><br><span class=\"line\">  sayRepeat(@isString word: string, @isInt x: number) &#123;</span><br><span class=\"line\">    return Array(x).fill(word).join(&#x27;&#x27;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const c = new C();</span><br><span class=\"line\">c.sayRepeat(&#x27;hello&#x27;, 2); </span><br><span class=\"line\">c.sayRepeat(&#x27;&#x27;, &#x27;lol&#x27; as any); </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>正如例子中展示的， 对我们来说同时理解不同种类装饰器的执行顺序和职责都很重要。</p>\n<p>严格地说，元数据和装饰器是 EcmaScript 中两个独立的部分。 然而，如果你想实现像是 <a class=\"link\"   href=\"https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%B0%84_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)\" >反射 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 这样的能力，你总是同时需要它们。</p>\n<p>如果我们回顾上一个例子，如果我们不想写各种不同的检查器呢？ 或者说，能否只写一个检查器能够通过我们编写的 TS 类型声明来自动运行类型检查？</p>\n<p>有了 <a class=\"link\"   href=\"https://github.com/rbuckton/reflect-metadata\" >reflect-metadata <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 的帮助， 我们可以获取编译期的类型。</p>\n<div class=\"highlight-container\" data-rel=\"Plaintext\"><figure class=\"iseeu highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#x27;reflect-metadata&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">function validate(</span><br><span class=\"line\">  target: Object,</span><br><span class=\"line\">  key: string,</span><br><span class=\"line\">  descriptor: PropertyDescriptor</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  const originalFn = descriptor.value;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  const designParamTypes = Reflect</span><br><span class=\"line\">    .getMetadata(&#x27;design:paramtypes&#x27;, target, key);</span><br><span class=\"line\"></span><br><span class=\"line\">  descriptor.value = function (...args: any[]) &#123;</span><br><span class=\"line\">    args.forEach((arg, index) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      const paramType = designParamTypes[index];</span><br><span class=\"line\"></span><br><span class=\"line\">      const result = arg.constructor === paramType</span><br><span class=\"line\">        || arg instanceof paramType;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (!result) &#123;</span><br><span class=\"line\">        throw new Error(</span><br><span class=\"line\">          `Failed for validating parameter: $&#123;arg&#125; of the index: $&#123;index&#125;`</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return originalFn.call(this, ...args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  @validate</span><br><span class=\"line\">  sayRepeat(word: string, x: number) &#123;</span><br><span class=\"line\">    return Array(x).fill(word).join(&#x27;&#x27;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const c = new C();</span><br><span class=\"line\">c.sayRepeat(&#x27;hello&#x27;, 2); </span><br><span class=\"line\">c.sayRepeat(&#x27;&#x27;, &#x27;lol&#x27; as any); </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n\n<p>目前为止一共有三种编译期类型可以拿到：</p>\n<ul>\n<li><code>design:type</code>: 属性的类型。</li>\n<li><code>desin:paramtypes</code>: 方法的参数的类型。</li>\n<li><code>design:returntype</code>: 方法的返回值的类型。</li>\n</ul>\n<p>这三种方式拿到的结果都是构造函数（例如<code>String</code>和<code>Number</code>）。规则是：</p>\n<ul>\n<li>number -&gt; <code>Number</code></li>\n<li>string -&gt; <code>String</code></li>\n<li>boolean -&gt; <code>Boolean</code></li>\n<li>void&#x2F;null&#x2F;never -&gt; <code>undefined</code></li>\n<li>Array&#x2F;Tuple -&gt; <code>Array</code></li>\n<li>Class -&gt; 类的构造函数</li>\n<li>Enum -&gt; 如果是纯数字枚举则为<code>Number</code>, 否则是 <code>Object</code></li>\n<li>Function -&gt; <code>Function</code></li>\n<li>其余都是<code>Object</code></li>\n</ul>\n<p>现在我们可以对于何时使用装饰器得出结论， 在阅读上面的代码中你可能也有所感觉。</p>\n<p>我将例举一些常用的使用场景：</p>\n<ul>\n<li>Before&#x2F;After 钩子。</li>\n<li>监听属性改变或者方法调用。</li>\n<li>对方法的参数做转换。</li>\n<li>添加额外的方法和属性。</li>\n<li>运行时类型检查。</li>\n<li>自动编解码。</li>\n<li>依赖注入。</li>\n</ul>\n<p>我希望读完这篇文章后，你可以找到装饰器的更多使用场景，并且用它来简化你的代码。</p>\n","excerpt":"","more":"<blockquote>\n<p>原文转自：<a class=\"link\"   href=\"https://mirone.me/zh-hans/a-complete-guide-to-typescript-decorator/\" >https://mirone.me/zh-hans/a-complete-guide-to-typescript-decorator/ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n</blockquote>\n<p>装饰器让 TypeScript 的世界更好。 我们使用的许多库都基于这一强大特性构建，例如 <a class=\"link\"   href=\"https://angular.io/\" >Angular <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 和 <a class=\"link\"   href=\"https://nestjs.com/\" >Nestjs <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>。 在这篇博客中我将介绍装饰器和它的许多细节。 我希望在读完这篇文章后，你可以理解何时和如何使用这一强的的特性。</p>\n<p>装饰器本质上是一种特殊的函数被应用在于：</p>\n<ol>\n<li>类</li>\n<li>类属性</li>\n<li>类方法</li>\n<li>类访问器</li>\n<li>类方法的参数</li>\n</ol>\n<p>所以应用装饰器其实很像是组合一系列函数，类似于高阶函数和类。 通过装饰器我们可以轻松实现 <a class=\"link\"   href=\"https://zh.wikipedia.org/zh-hans/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F\" >代理模式 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 来使代码更简洁以及实现其它一些更有趣的能力。</p>\n<p>装饰器的语法十分简单，只需要在想使用的装饰器前加上<code>@</code>符号，装饰器就会被应用到目标上：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function simpleDecorator() &#123;</span><br><span class=\"line\">  console.log(&#x27;---hi I am a decorator---&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@simpleDecorator</span><br><span class=\"line\">class A &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>一共有 5 种装饰器可被我们使用：</p>\n<ol>\n<li>类装饰器</li>\n<li>属性装饰器</li>\n<li>方法装饰器</li>\n<li>访问器装饰器</li>\n<li>参数装饰器</li>\n</ol>\n<p>让我们来快速认识一下这五种装饰器：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@classDecorator</span><br><span class=\"line\">class Bird &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  @propertyDecorator</span><br><span class=\"line\">  name: string;</span><br><span class=\"line\">  </span><br><span class=\"line\">  @methodDecorator</span><br><span class=\"line\">  fly(</span><br><span class=\"line\">    </span><br><span class=\"line\">    @parameterDecorator</span><br><span class=\"line\">      meters: number</span><br><span class=\"line\">  ) &#123;&#125;</span><br><span class=\"line\">  </span><br><span class=\"line\">  @accessorDecorator</span><br><span class=\"line\">  get egg() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"时机\"><a href=\"#时机\" class=\"headerlink\" title=\"时机\"></a>时机</h2><p>装饰器只在解释执行时应用一次，例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f(C) &#123;</span><br><span class=\"line\">  console.log(&#x27;apply decorator&#x27;)</span><br><span class=\"line\">  return C</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@f</span><br><span class=\"line\">class A &#123;&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里的代码会在终端中打印<code>apply decorator</code>，即便我们其实并没有使用类 A。</p>\n<h2 id=\"执行顺序\"><a href=\"#执行顺序\" class=\"headerlink\" title=\"执行顺序\"></a>执行顺序</h2><p>不同类型的装饰器的执行顺序是明确定义的：</p>\n<ol>\n<li>实例成员：</li>\n</ol>\n<p>参数装饰器 -&gt; 方法 &#x2F; 访问器 &#x2F; 属性 装饰器 2. 静态成员：<br>参数装饰器 -&gt; 方法 &#x2F; 访问器 &#x2F; 属性 装饰器 3. 构造器：参数装饰器 4. 类装饰器</p>\n<p>例如，考虑以下代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f(key: string): any &#123;</span><br><span class=\"line\">  console.log(&quot;evaluate: &quot;, key);</span><br><span class=\"line\">  return function () &#123;</span><br><span class=\"line\">    console.log(&quot;call: &quot;, key);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@f(&quot;Class Decorator&quot;)</span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  @f(&quot;Static Property&quot;)</span><br><span class=\"line\">  static prop?: number;</span><br><span class=\"line\"></span><br><span class=\"line\">  @f(&quot;Static Method&quot;)</span><br><span class=\"line\">  static method(@f(&quot;Static Method Parameter&quot;) foo) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  constructor(@f(&quot;Constructor Parameter&quot;) foo) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @f(&quot;Instance Method&quot;)</span><br><span class=\"line\">  method(@f(&quot;Instance Method Parameter&quot;) foo) &#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @f(&quot;Instance Property&quot;)</span><br><span class=\"line\">  prop?: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>它将会打印出以下信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evaluate:  Instance Method</span><br><span class=\"line\">evaluate:  Instance Method Parameter</span><br><span class=\"line\">call:  Instance Method Parameter</span><br><span class=\"line\">call:  Instance Method</span><br><span class=\"line\">evaluate:  Instance Property</span><br><span class=\"line\">call:  Instance Property</span><br><span class=\"line\">evaluate:  Static Property</span><br><span class=\"line\">call:  Static Property</span><br><span class=\"line\">evaluate:  Static Method</span><br><span class=\"line\">evaluate:  Static Method Parameter</span><br><span class=\"line\">call:  Static Method Parameter</span><br><span class=\"line\">call:  Static Method</span><br><span class=\"line\">evaluate:  Class Decorator</span><br><span class=\"line\">evaluate:  Constructor Parameter</span><br><span class=\"line\">call:  Constructor Parameter</span><br><span class=\"line\">call:  Class Decorator</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>你也许会注意到执行实例属性<code>prop</code>晚于实例方法<code>method</code> 然而执行静态属性<code>static prop</code>早于静态方法<code>static method</code>。 这是因为对于属性 &#x2F; 方法 &#x2F; 访问器装饰器而言，执行顺序取决于声明它们的顺序。</p>\n<p>然而，同一方法中不同参数的装饰器的执行顺序是相反的， 最后一个参数的装饰器会最先被执行：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f(key: string): any &#123;</span><br><span class=\"line\">  console.log(&quot;evaluate: &quot;, key);</span><br><span class=\"line\">  return function () &#123;</span><br><span class=\"line\">    console.log(&quot;call: &quot;, key);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  method(</span><br><span class=\"line\">    @f(&quot;Parameter Foo&quot;) foo,</span><br><span class=\"line\">    @f(&quot;Parameter Bar&quot;) bar</span><br><span class=\"line\">  ) &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里的代码打印出的结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evaluate:  Parameter Foo</span><br><span class=\"line\">evaluate:  Parameter Bar</span><br><span class=\"line\">call:  Parameter Bar</span><br><span class=\"line\">call:  Parameter Foo</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"多个装饰器的组合\"><a href=\"#多个装饰器的组合\" class=\"headerlink\" title=\"多个装饰器的组合\"></a>多个装饰器的组合</h2><p>你可以对同一目标应用多个装饰器。它们的组合顺序为：</p>\n<ol>\n<li>求值外层装饰器</li>\n<li>求值内层装饰器</li>\n<li>调用内层装饰器</li>\n<li>调用外层装饰器</li>\n</ol>\n<p>例如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function f(key: string) &#123;</span><br><span class=\"line\">  console.log(&quot;evaluate: &quot;, key);</span><br><span class=\"line\">  return function () &#123;</span><br><span class=\"line\">    console.log(&quot;call: &quot;, key);</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  @f(&quot;Outer Method&quot;)</span><br><span class=\"line\">  @f(&quot;Inner Method&quot;)</span><br><span class=\"line\">  method() &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这里的代码打印出的结果为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">evaluate: Outer Method</span><br><span class=\"line\">evaluate: Inner Method</span><br><span class=\"line\">call: Inner Method</span><br><span class=\"line\">call: Outer Method</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"类装饰器\"><a href=\"#类装饰器\" class=\"headerlink\" title=\"类装饰器\"></a>类装饰器</h2><p>类型声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type ClassDecorator = &lt;TFunction extends Function&gt;</span><br><span class=\"line\">  (target: TFunction) =&gt; TFunction | void;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>@参数：<ol>\n<li><code>target</code>: 类的构造器。</li>\n</ol>\n</li>\n<li>@返回：<br>如果类装饰器返回了一个值，她将会被用来代替原有的类构造器的声明。</li>\n</ul>\n<p>因此，类装饰器适合用于继承一个现有类并添加一些属性和方法。</p>\n<p>例如我们可以添加一个<code>toString</code>方法给所有的类来覆盖它原有的<code>toString</code>方法。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Consturctor = &#123; new (...args: any[]): any &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function toString&lt;T extends Consturctor&gt;(BaseClass: T) &#123;</span><br><span class=\"line\">  return class extends BaseClass &#123;</span><br><span class=\"line\">    toString() &#123;</span><br><span class=\"line\">      return JSON.stringify(this);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@toString</span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  public foo = &quot;foo&quot;;</span><br><span class=\"line\">  public num = 24;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(new C().toString())</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>遗憾的是装饰器并没有类型保护，这意味着：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare function Blah&lt;T&gt;(target: T): T &amp; &#123;foo: number&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Blah</span><br><span class=\"line\">class Foo &#123;</span><br><span class=\"line\">  bar() &#123;</span><br><span class=\"line\">    return this.foo; </span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new Foo().foo; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>这是 <a class=\"link\"   href=\"https://github.com/microsoft/TypeScript/issues/4881\" >一个 TypeScript 的已知的缺陷 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>。 目前我们能做的只有额外提供一个类用于提供类型信息：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">declare function Blah&lt;T&gt;(target: T): T &amp; &#123;foo: number&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class Base &#123;</span><br><span class=\"line\">  foo: number;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">@Blah</span><br><span class=\"line\">class Foo extends Base &#123;</span><br><span class=\"line\">  bar() &#123;</span><br><span class=\"line\">    return this.foo;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">new Foo().foo;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"属性装饰器\"><a href=\"#属性装饰器\" class=\"headerlink\" title=\"属性装饰器\"></a>属性装饰器</h2><p>类型声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type PropertyDecorator =</span><br><span class=\"line\">  (target: Object, propertyKey: string | symbol) =&gt; void;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>@参数：<ol>\n<li><code>target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。</li>\n<li><code>propertyKey</code>: 属性的名称。</li>\n</ol>\n</li>\n<li>@返回：<br>返回的结果将被忽略。</li>\n</ul>\n<p>除了用于收集信息外，属性装饰器也可以用来给类添加额外的方法和属性。 例如我们可以写一个装饰器来给某些属性添加监听器。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function capitalizeFirstLetter(str: string) &#123;</span><br><span class=\"line\">  return str.charAt(0).toUpperCase() + str.slice(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function observable(target: any, key: string): any &#123;</span><br><span class=\"line\">  </span><br><span class=\"line\">  const targetKey = &quot;on&quot; + capitalizeFirstLetter(key) + &quot;Change&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">  target[targetKey] =</span><br><span class=\"line\">    function (fn: (prev: any, next: any) =&gt; void) &#123;</span><br><span class=\"line\">      let prev = this[key];</span><br><span class=\"line\">      Reflect.defineProperty(this, key, &#123;</span><br><span class=\"line\">        set(next) &#123;</span><br><span class=\"line\">          fn(prev, next);</span><br><span class=\"line\">          prev = next;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;)</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  @observable</span><br><span class=\"line\">  foo = -1;</span><br><span class=\"line\"></span><br><span class=\"line\">  @observable</span><br><span class=\"line\">  bar = &quot;bar&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const c = new C();</span><br><span class=\"line\"></span><br><span class=\"line\">c.onFooChange((prev, next) =&gt; console.log(`prev: $&#123;prev&#125;, next: $&#123;next&#125;`))</span><br><span class=\"line\">c.onBarChange((prev, next) =&gt; console.log(`prev: $&#123;prev&#125;, next: $&#123;next&#125;`))</span><br><span class=\"line\"></span><br><span class=\"line\">c.foo = 100; </span><br><span class=\"line\">c.foo = -3.14; </span><br><span class=\"line\">c.bar = &quot;baz&quot;; </span><br><span class=\"line\">c.bar = &quot;sing&quot;; </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"方法装饰器\"><a href=\"#方法装饰器\" class=\"headerlink\" title=\"方法装饰器\"></a>方法装饰器</h2><p>类型声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type MethodDecorator = &lt;T&gt;(</span><br><span class=\"line\">  target: Object,</span><br><span class=\"line\">  propertyKey: string | symbol,</span><br><span class=\"line\">  descriptor: TypedPropertyDescriptor&lt;T&gt;</span><br><span class=\"line\">) =&gt; TypedPropertyDescriptor&lt;T&gt; | void;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>@参数：<ol>\n<li><code>target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。</li>\n<li><code>propertyKey</code>: 属性的名称。</li>\n<li><code>descriptor</code>: 属性的 <a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getOwnPropertyDescriptor\" >描述器 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>。</li>\n</ol>\n</li>\n<li>@返回： 如果返回了值，它会被用于替代属性的描述器。</li>\n</ul>\n<p>方法装饰器不同于属性装饰器的地方在于<code>descriptor</code>参数。 通过这个参数我们可以修改方法原本的实现，添加一些共用逻辑。 例如我们可以给一些方法添加打印输入与输出的能力：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function logger(target: any, propertyKey: string, descriptor: PropertyDescriptor) &#123;</span><br><span class=\"line\">  const original = descriptor.value;</span><br><span class=\"line\"></span><br><span class=\"line\">  descriptor.value = function (...args) &#123;</span><br><span class=\"line\">    console.log(&#x27;params: &#x27;, ...args);</span><br><span class=\"line\">    const result = original.call(this, ...args);</span><br><span class=\"line\">    console.log(&#x27;result: &#x27;, result);</span><br><span class=\"line\">    return result;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  @logger</span><br><span class=\"line\">  add(x: number, y:number ) &#123;</span><br><span class=\"line\">    return x + y;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const c = new C();</span><br><span class=\"line\">c.add(1, 2);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"访问器装饰器\"><a href=\"#访问器装饰器\" class=\"headerlink\" title=\"访问器装饰器\"></a>访问器装饰器</h2><p>访问器装饰器总体上讲和方法装饰器很接近，唯一的区别在于描述器中有的 key 不同：</p>\n<p>方法装饰器的描述器的 key 为：</p>\n<ul>\n<li><code>value</code></li>\n<li><code>writable</code></li>\n<li><code>enumerable</code></li>\n<li><code>configurable</code></li>\n</ul>\n<p>访问器装饰器的描述器的 key 为：</p>\n<ul>\n<li><code>get</code></li>\n<li><code>set</code></li>\n<li><code>enumerable</code></li>\n<li><code>configurable</code></li>\n</ul>\n<p>例如，我们可以将某个属性设为不可变值：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function immutable(target: any, propertyKey: string, descriptor: PropertyDescriptor) &#123;</span><br><span class=\"line\">  const original = descriptor.set;</span><br><span class=\"line\"></span><br><span class=\"line\">  descriptor.set = function (value: any) &#123;</span><br><span class=\"line\">    return original.call(this, &#123; ...value &#125;)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  private _point = &#123; x: 0, y: 0 &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  @immutable</span><br><span class=\"line\">  set point(value: &#123; x: number, y: number &#125;) &#123;</span><br><span class=\"line\">    this._point = value;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  get point() &#123;</span><br><span class=\"line\">    return this._point;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const c = new C();</span><br><span class=\"line\">const point = &#123; x: 1, y: 1 &#125;</span><br><span class=\"line\">c.point = point;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(c.point === point)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参数装饰器\"><a href=\"#参数装饰器\" class=\"headerlink\" title=\"参数装饰器\"></a>参数装饰器</h2><p>类型声明：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type ParameterDecorator = (</span><br><span class=\"line\">  target: Object,</span><br><span class=\"line\">  propertyKey: string | symbol,</span><br><span class=\"line\">  parameterIndex: number</span><br><span class=\"line\">) =&gt; void;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>@参数：<ol>\n<li><code>target</code>: 对于静态成员来说是类的构造器，对于实例成员来说是类的原型链。</li>\n<li><code>propertyKey</code>: 属性的名称 （注意是方法的名称，而不是参数的名称）。</li>\n<li><code>parameterIndex</code>: 参数在方法中所处的位置的下标。</li>\n</ol>\n</li>\n<li>@返回：<br>返回的值将会被忽略。</li>\n</ul>\n<p>单独的参数装饰器能做的事情很有限，它一般都被用于记录可被其它装饰器使用的信息。</p>\n<p>对于一些复杂场景， 我们可能需要结合使用不同的装饰器。 例如如果我们不仅想给我们的接口添加静态检查，还想加上运行时检查的能力。</p>\n<p>我们可以用 3 个步骤来实现这个功能：</p>\n<ol>\n<li>标记需要检查的参数 （因为参数装饰器先于方法装饰器执行）。</li>\n<li>改变方法的<code>descriptor</code>的<code>value</code>的值，先运行参数检查器，如果失败就抛出异常。</li>\n<li>运行原有的接口实现。</li>\n</ol>\n<p>以下是代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">type Validator = (x: any) =&gt; boolean;</span><br><span class=\"line\"></span><br><span class=\"line\">const validateMap: Record&lt;string, Validator[]&gt; = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">function typedDecoratorFactory(validator: Validator): ParameterDecorator &#123;</span><br><span class=\"line\">  return (_, key, index) =&gt; &#123;</span><br><span class=\"line\">    const target = validateMap[key as string] ?? [];</span><br><span class=\"line\">    target[index] = validator;</span><br><span class=\"line\">    validateMap[key as string] = target;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function validate(_: Object, key: string, descriptor: PropertyDescriptor) &#123;</span><br><span class=\"line\">  const originalFn = descriptor.value;</span><br><span class=\"line\">  descriptor.value = function(...args: any[]) &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    const validatorList = validateMap[key];</span><br><span class=\"line\">    if (validatorList) &#123;</span><br><span class=\"line\">      args.forEach((arg, index) =&gt; &#123;</span><br><span class=\"line\">        const validator = validatorList[index];</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!validator) return;</span><br><span class=\"line\"></span><br><span class=\"line\">        const result = validator(arg);</span><br><span class=\"line\"></span><br><span class=\"line\">        if (!result) &#123;</span><br><span class=\"line\">          throw new Error(</span><br><span class=\"line\">            `Failed for parameter: $&#123;arg&#125; of the index: $&#123;index&#125;`</span><br><span class=\"line\">          );</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    </span><br><span class=\"line\">    return originalFn.call(this, ...args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const isInt = typedDecoratorFactory((x) =&gt; Number.isInteger(x));</span><br><span class=\"line\">const isString = typedDecoratorFactory((x) =&gt; typeof x === &#x27;string&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  @validate</span><br><span class=\"line\">  sayRepeat(@isString word: string, @isInt x: number) &#123;</span><br><span class=\"line\">    return Array(x).fill(word).join(&#x27;&#x27;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const c = new C();</span><br><span class=\"line\">c.sayRepeat(&#x27;hello&#x27;, 2); </span><br><span class=\"line\">c.sayRepeat(&#x27;&#x27;, &#x27;lol&#x27; as any); </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>正如例子中展示的， 对我们来说同时理解不同种类装饰器的执行顺序和职责都很重要。</p>\n<p>严格地说，元数据和装饰器是 EcmaScript 中两个独立的部分。 然而，如果你想实现像是 <a class=\"link\"   href=\"https://zh.wikipedia.org/wiki/%E5%8F%8D%E5%B0%84_(%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6)\" >反射 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 这样的能力，你总是同时需要它们。</p>\n<p>如果我们回顾上一个例子，如果我们不想写各种不同的检查器呢？ 或者说，能否只写一个检查器能够通过我们编写的 TS 类型声明来自动运行类型检查？</p>\n<p>有了 <a class=\"link\"   href=\"https://github.com/rbuckton/reflect-metadata\" >reflect-metadata <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 的帮助， 我们可以获取编译期的类型。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import &#x27;reflect-metadata&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">function validate(</span><br><span class=\"line\">  target: Object,</span><br><span class=\"line\">  key: string,</span><br><span class=\"line\">  descriptor: PropertyDescriptor</span><br><span class=\"line\">) &#123;</span><br><span class=\"line\">  const originalFn = descriptor.value;</span><br><span class=\"line\"></span><br><span class=\"line\">  </span><br><span class=\"line\">  const designParamTypes = Reflect</span><br><span class=\"line\">    .getMetadata(&#x27;design:paramtypes&#x27;, target, key);</span><br><span class=\"line\"></span><br><span class=\"line\">  descriptor.value = function (...args: any[]) &#123;</span><br><span class=\"line\">    args.forEach((arg, index) =&gt; &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">      const paramType = designParamTypes[index];</span><br><span class=\"line\"></span><br><span class=\"line\">      const result = arg.constructor === paramType</span><br><span class=\"line\">        || arg instanceof paramType;</span><br><span class=\"line\"></span><br><span class=\"line\">      if (!result) &#123;</span><br><span class=\"line\">        throw new Error(</span><br><span class=\"line\">          `Failed for validating parameter: $&#123;arg&#125; of the index: $&#123;index&#125;`</span><br><span class=\"line\">        );</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    return originalFn.call(this, ...args);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class C &#123;</span><br><span class=\"line\">  @validate</span><br><span class=\"line\">  sayRepeat(word: string, x: number) &#123;</span><br><span class=\"line\">    return Array(x).fill(word).join(&#x27;&#x27;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const c = new C();</span><br><span class=\"line\">c.sayRepeat(&#x27;hello&#x27;, 2); </span><br><span class=\"line\">c.sayRepeat(&#x27;&#x27;, &#x27;lol&#x27; as any); </span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>目前为止一共有三种编译期类型可以拿到：</p>\n<ul>\n<li><code>design:type</code>: 属性的类型。</li>\n<li><code>desin:paramtypes</code>: 方法的参数的类型。</li>\n<li><code>design:returntype</code>: 方法的返回值的类型。</li>\n</ul>\n<p>这三种方式拿到的结果都是构造函数（例如<code>String</code>和<code>Number</code>）。规则是：</p>\n<ul>\n<li>number -&gt; <code>Number</code></li>\n<li>string -&gt; <code>String</code></li>\n<li>boolean -&gt; <code>Boolean</code></li>\n<li>void&#x2F;null&#x2F;never -&gt; <code>undefined</code></li>\n<li>Array&#x2F;Tuple -&gt; <code>Array</code></li>\n<li>Class -&gt; 类的构造函数</li>\n<li>Enum -&gt; 如果是纯数字枚举则为<code>Number</code>, 否则是 <code>Object</code></li>\n<li>Function -&gt; <code>Function</code></li>\n<li>其余都是<code>Object</code></li>\n</ul>\n<p>现在我们可以对于何时使用装饰器得出结论， 在阅读上面的代码中你可能也有所感觉。</p>\n<p>我将例举一些常用的使用场景：</p>\n<ul>\n<li>Before&#x2F;After 钩子。</li>\n<li>监听属性改变或者方法调用。</li>\n<li>对方法的参数做转换。</li>\n<li>添加额外的方法和属性。</li>\n<li>运行时类型检查。</li>\n<li>自动编解码。</li>\n<li>依赖注入。</li>\n</ul>\n<p>我希望读完这篇文章后，你可以找到装饰器的更多使用场景，并且用它来简化你的代码。</p>\n"},{"title":"【一些有趣的问题】01，作用域与闭包","date":"2021-02-23T01:30:54.000Z","_content":"\n## 问题 1\n`以下语句会如何输出？`\n```javascript\nfor(var i=0;i<5;i++){\n    console.log('i',i)\n    setTimeout(function(){\n        console.log(i);\n    },1000)\n}\n```\n`结果`：![结果](./someInterestingQuestions01/q1.png)\n\n`原因`：异步代码会在同步代码执行完毕后执行\n\n`分析`：在执行 setTimeout 中的 console.log 打印变量 i 时，对标识符 i 进行 RHS 查询，因为在当前作用域找不到对应标识符，所以向上前往父级作用域寻找。所以打印的其实是 for 循环中声明的变量 i，而此时已经经过循环赋值变成了 5\n\n**解决方案一：**\n```javascript\nfor(var i=0;i<5;i++){\n    (function(i){\n        setTimeout(function(){\n            console.log(i);\n        },1000)\n    })(i)\n}\n```\n` 结果`：1 秒后连续打印 0 1 2 3 4 \n\n`原因`：IIFE 使得对打印的标识符 i 的查询终止于当前作用域，不用向上继续查询 分析：console.log 打印变量 i 时，发现该标识符对应当前作用域中的形参，其值为传入的实参。所以每次执行 console.log 语句，变量 i 的值都会被覆盖，第一次为 0，第二次为 1，依次类推打印 0 1 2 3 4，而 for 循环中声明的变量 i，其值为 5\n\n**解决方案二：**\n```javascript\nfor(let i=0;i<5;i++){\n  setTimeourt(function(){\n    console.log(i);\n  },1000)\n}\n```\n`结果`：1 秒后连续打印 0 1 2 3 4\n\n`原因`：let 声明不会产生变量提升，并且会绑定当前作用域。for 循环头部的 let 声明会有一个特殊的行为，这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。\n\n---\n\n## 问题 2\n```javascript\nfunction Foo() {\n    var i = 0;\n    return function() {\n        console.log(i++);\n    }\n}\n\nvar f1 = Foo(),\n    f2 = Foo();\nf1();\nf2();\n```\n`结果`：![结果](./someInterestingQuestions01/q2.png)\n\n`原因`：\n\n第一次调用函数 f1()：打印 0，创建闭包，此时局部变量 i=1；\n\n第二次调用函数 f1()：打印 1，创建闭包，此时局部变量 i=2；\n\n第一次调用函数 f2()：打印 0，因为函数 f1、f2 指向不同对象。\n\n--- \n## 问题 3\n```javascript\nfunction Foo() {\n  // 类变量 a\n  Foo.a = function () {\n    console.log(1);\n  }\n  // 实例变量 a，每个实例都有一个\n  this.a = function () {\n    console.log(2);\n  }\n}\n// 实例变量 a，所有实例共享一个\nFoo.prototype.a = function () {\n  console.log(3);\n}\n// 类变量 a\nFoo.a = function () {\n  console.log(4);\n}\n\nFoo.a();\nlet obj = new Foo();\nobj.a();\nFoo.a();\n```\n`结果`：![结果](./someInterestingQuestions01/q3.png)\n\n`原因`：\n\n打印 4：一开始 Foo 方法并未调用，输出的是函数体外的变量 a，此时可以把 Foo 当作对象，Foo.a 为其对象属性。\n\n打印 2：使用 new 操作符实例化 Foo 后，obj.a 首先查找 obj 上的标识符 a，如果找不到的话沿着原型链向上查找，也找不到的话返回 undefined。\n\n打印 1：此时 Foo 方法已经调用，方法体内的类变量 a 覆盖原来已经赋值的类变量 a。\n","source":"_posts/someInterestingQuestions01.md","raw":"---\ntitle: 【一些有趣的问题】01，作用域与闭包\ndate: 2021-02-23 9:30:54\ntags:\n  - JS\n  - 有趣的问题\ncategories:\n  - 一些有趣的问题\n---\n\n## 问题 1\n`以下语句会如何输出？`\n```javascript\nfor(var i=0;i<5;i++){\n    console.log('i',i)\n    setTimeout(function(){\n        console.log(i);\n    },1000)\n}\n```\n`结果`：![结果](./someInterestingQuestions01/q1.png)\n\n`原因`：异步代码会在同步代码执行完毕后执行\n\n`分析`：在执行 setTimeout 中的 console.log 打印变量 i 时，对标识符 i 进行 RHS 查询，因为在当前作用域找不到对应标识符，所以向上前往父级作用域寻找。所以打印的其实是 for 循环中声明的变量 i，而此时已经经过循环赋值变成了 5\n\n**解决方案一：**\n```javascript\nfor(var i=0;i<5;i++){\n    (function(i){\n        setTimeout(function(){\n            console.log(i);\n        },1000)\n    })(i)\n}\n```\n` 结果`：1 秒后连续打印 0 1 2 3 4 \n\n`原因`：IIFE 使得对打印的标识符 i 的查询终止于当前作用域，不用向上继续查询 分析：console.log 打印变量 i 时，发现该标识符对应当前作用域中的形参，其值为传入的实参。所以每次执行 console.log 语句，变量 i 的值都会被覆盖，第一次为 0，第二次为 1，依次类推打印 0 1 2 3 4，而 for 循环中声明的变量 i，其值为 5\n\n**解决方案二：**\n```javascript\nfor(let i=0;i<5;i++){\n  setTimeourt(function(){\n    console.log(i);\n  },1000)\n}\n```\n`结果`：1 秒后连续打印 0 1 2 3 4\n\n`原因`：let 声明不会产生变量提升，并且会绑定当前作用域。for 循环头部的 let 声明会有一个特殊的行为，这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。\n\n---\n\n## 问题 2\n```javascript\nfunction Foo() {\n    var i = 0;\n    return function() {\n        console.log(i++);\n    }\n}\n\nvar f1 = Foo(),\n    f2 = Foo();\nf1();\nf2();\n```\n`结果`：![结果](./someInterestingQuestions01/q2.png)\n\n`原因`：\n\n第一次调用函数 f1()：打印 0，创建闭包，此时局部变量 i=1；\n\n第二次调用函数 f1()：打印 1，创建闭包，此时局部变量 i=2；\n\n第一次调用函数 f2()：打印 0，因为函数 f1、f2 指向不同对象。\n\n--- \n## 问题 3\n```javascript\nfunction Foo() {\n  // 类变量 a\n  Foo.a = function () {\n    console.log(1);\n  }\n  // 实例变量 a，每个实例都有一个\n  this.a = function () {\n    console.log(2);\n  }\n}\n// 实例变量 a，所有实例共享一个\nFoo.prototype.a = function () {\n  console.log(3);\n}\n// 类变量 a\nFoo.a = function () {\n  console.log(4);\n}\n\nFoo.a();\nlet obj = new Foo();\nobj.a();\nFoo.a();\n```\n`结果`：![结果](./someInterestingQuestions01/q3.png)\n\n`原因`：\n\n打印 4：一开始 Foo 方法并未调用，输出的是函数体外的变量 a，此时可以把 Foo 当作对象，Foo.a 为其对象属性。\n\n打印 2：使用 new 操作符实例化 Foo 后，obj.a 首先查找 obj 上的标识符 a，如果找不到的话沿着原型链向上查找，也找不到的话返回 undefined。\n\n打印 1：此时 Foo 方法已经调用，方法体内的类变量 a 覆盖原来已经赋值的类变量 a。\n","slug":"someInterestingQuestions01","published":1,"updated":"2024-07-14T01:09:19.910Z","comments":1,"layout":"post","photos":[],"_id":"clyliw095001ftch8culveq0f","content":"<h2 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题 1\"></a>问题 1</h2><p><code>以下语句会如何输出？</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i&#x27;</span>,i)</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/23/someInterestingQuestions01/q1.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：异步代码会在同步代码执行完毕后执行</p>\n<p><code>分析</code>：在执行 setTimeout 中的 console.log 打印变量 i 时，对标识符 i 进行 RHS 查询，因为在当前作用域找不到对应标识符，所以向上前往父级作用域寻找。所以打印的其实是 for 循环中声明的变量 i，而此时已经经过循环赋值变成了 5</p>\n<p><strong>解决方案一：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(<span class=\"params\">i</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><code> 结果</code>：1 秒后连续打印 0 1 2 3 4 </p>\n<p><code>原因</code>：IIFE 使得对打印的标识符 i 的查询终止于当前作用域，不用向上继续查询 分析：console.log 打印变量 i 时，发现该标识符对应当前作用域中的形参，其值为传入的实参。所以每次执行 console.log 语句，变量 i 的值都会被覆盖，第一次为 0，第二次为 1，依次类推打印 0 1 2 3 4，而 for 循环中声明的变量 i，其值为 5</p>\n<p><strong>解决方案二：</strong></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"title function_\">setTimeourt</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p><code>结果</code>：1 秒后连续打印 0 1 2 3 4</p>\n<p><code>原因</code>：let 声明不会产生变量提升，并且会绑定当前作用域。for 循环头部的 let 声明会有一个特殊的行为，这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。</p>\n<hr>\n<h2 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题 2\"></a>问题 2</h2><div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"title class_\">Foo</span>(),</span><br><span class=\"line\">    f2 = <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"><span class=\"title function_\">f1</span>();</span><br><span class=\"line\"><span class=\"title function_\">f2</span>();</span><br></pre></td></tr></table></figure></div>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/23/someInterestingQuestions01/q2.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：</p>\n<p>第一次调用函数 f1()：打印 0，创建闭包，此时局部变量 i&#x3D;1；</p>\n<p>第二次调用函数 f1()：打印 1，创建闭包，此时局部变量 i&#x3D;2；</p>\n<p>第一次调用函数 f2()：打印 0，因为函数 f1、f2 指向不同对象。</p>\n<hr>\n<h2 id=\"问题-3\"><a href=\"#问题-3\" class=\"headerlink\" title=\"问题 3\"></a>问题 3</h2><div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 类变量 a</span></span><br><span class=\"line\">  <span class=\"title class_\">Foo</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 实例变量 a，每个实例都有一个</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实例变量 a，所有实例共享一个</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 类变量 a</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">a</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\">obj.<span class=\"title function_\">a</span>();</span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">a</span>();</span><br></pre></td></tr></table></figure></div>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/23/someInterestingQuestions01/q3.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：</p>\n<p>打印 4：一开始 Foo 方法并未调用，输出的是函数体外的变量 a，此时可以把 Foo 当作对象，Foo.a 为其对象属性。</p>\n<p>打印 2：使用 new 操作符实例化 Foo 后，obj.a 首先查找 obj 上的标识符 a，如果找不到的话沿着原型链向上查找，也找不到的话返回 undefined。</p>\n<p>打印 1：此时 Foo 方法已经调用，方法体内的类变量 a 覆盖原来已经赋值的类变量 a。</p>\n","excerpt":"","more":"<h2 id=\"问题-1\"><a href=\"#问题-1\" class=\"headerlink\" title=\"问题 1\"></a>问题 1</h2><p><code>以下语句会如何输出？</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;i&#x27;</span>,i)</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/23/someInterestingQuestions01/q1.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：异步代码会在同步代码执行完毕后执行</p>\n<p><code>分析</code>：在执行 setTimeout 中的 console.log 打印变量 i 时，对标识符 i 进行 RHS 查询，因为在当前作用域找不到对应标识符，所以向上前往父级作用域寻找。所以打印的其实是 for 循环中声明的变量 i，而此时已经经过循环赋值变成了 5</p>\n<p><strong>解决方案一：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">var</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">    (<span class=\"keyword\">function</span>(<span class=\"params\">i</span>)&#123;</span><br><span class=\"line\">        <span class=\"built_in\">setTimeout</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">            <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">        &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code> 结果</code>：1 秒后连续打印 0 1 2 3 4 </p>\n<p><code>原因</code>：IIFE 使得对打印的标识符 i 的查询终止于当前作用域，不用向上继续查询 分析：console.log 打印变量 i 时，发现该标识符对应当前作用域中的形参，其值为传入的实参。所以每次执行 console.log 语句，变量 i 的值都会被覆盖，第一次为 0，第二次为 1，依次类推打印 0 1 2 3 4，而 for 循环中声明的变量 i，其值为 5</p>\n<p><strong>解决方案二：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">5</span>;i++)&#123;</span><br><span class=\"line\">  <span class=\"title function_\">setTimeourt</span>(<span class=\"keyword\">function</span>(<span class=\"params\"></span>)&#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i);</span><br><span class=\"line\">  &#125;,<span class=\"number\">1000</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><code>结果</code>：1 秒后连续打印 0 1 2 3 4</p>\n<p><code>原因</code>：let 声明不会产生变量提升，并且会绑定当前作用域。for 循环头部的 let 声明会有一个特殊的行为，这个行为指出变量在循环过程中不止被声明一次，每次迭代都会声明。随后的每个迭代都会使用上一个迭代结束时的值来初始化这个变量。</p>\n<hr>\n<h2 id=\"问题-2\"><a href=\"#问题-2\" class=\"headerlink\" title=\"问题 2\"></a>问题 2</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">function</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">        <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i++);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> f1 = <span class=\"title class_\">Foo</span>(),</span><br><span class=\"line\">    f2 = <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\"><span class=\"title function_\">f1</span>();</span><br><span class=\"line\"><span class=\"title function_\">f2</span>();</span><br></pre></td></tr></table></figure>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/23/someInterestingQuestions01/q2.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：</p>\n<p>第一次调用函数 f1()：打印 0，创建闭包，此时局部变量 i&#x3D;1；</p>\n<p>第二次调用函数 f1()：打印 1，创建闭包，此时局部变量 i&#x3D;2；</p>\n<p>第一次调用函数 f2()：打印 0，因为函数 f1、f2 指向不同对象。</p>\n<hr>\n<h2 id=\"问题-3\"><a href=\"#问题-3\" class=\"headerlink\" title=\"问题 3\"></a>问题 3</h2><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">Foo</span>(<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 类变量 a</span></span><br><span class=\"line\">  <span class=\"title class_\">Foo</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"comment\">// 实例变量 a，每个实例都有一个</span></span><br><span class=\"line\">  <span class=\"variable language_\">this</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">2</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 实例变量 a，所有实例共享一个</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">3</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 类变量 a</span></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"property\">a</span> = <span class=\"keyword\">function</span> (<span class=\"params\"></span>) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"number\">4</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">a</span>();</span><br><span class=\"line\"><span class=\"keyword\">let</span> obj = <span class=\"keyword\">new</span> <span class=\"title class_\">Foo</span>();</span><br><span class=\"line\">obj.<span class=\"title function_\">a</span>();</span><br><span class=\"line\"><span class=\"title class_\">Foo</span>.<span class=\"title function_\">a</span>();</span><br></pre></td></tr></table></figure>\n<p><code>结果</code>：<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2021/02/23/someInterestingQuestions01/q3.png\"\n                      class=\"\" title=\"结果\"\n                ></p>\n<p><code>原因</code>：</p>\n<p>打印 4：一开始 Foo 方法并未调用，输出的是函数体外的变量 a，此时可以把 Foo 当作对象，Foo.a 为其对象属性。</p>\n<p>打印 2：使用 new 操作符实例化 Foo 后，obj.a 首先查找 obj 上的标识符 a，如果找不到的话沿着原型链向上查找，也找不到的话返回 undefined。</p>\n<p>打印 1：此时 Foo 方法已经调用，方法体内的类变量 a 覆盖原来已经赋值的类变量 a。</p>\n"},{"url":"https://zhuanlan.zhihu.com/p/408272742","title":"【转载】Vue Composition API","date":"2022-05-02T12:39:42.000Z","_content":"\n> 原文转自：https://zhuanlan.zhihu.com/p/408272742\n\n\n## 前言\n\n关注 React 的同学应该知道，React 在 19 年推出了 Hooks API，从而可以抛弃难以理解的 class 完全转向函数式组件。当然，它对开发者的意义不止于此，更为重要的是它提供了从组件中**提取状态逻辑**的能力，让我们能以业务逻辑为细粒度拆分组件，并在组件之间复用业务逻辑。\n\n后续尤大马上发布了 Vue Function-based API RFC（在之后重写成了 Composition API），并作为 Vue3 的核心特性，可想而知它的重要性。\n\n接下来让我们抛开 React，来看看 Composition API 都有哪些内容。\n\n## 一、介绍\n\n**1.1 什么是 Composition API ？**\n\nVue 3 中引入的一种新的编写 Vue 组件的方式，可以将 2.x 中与组件逻辑相关的选项以 API 函数的形式重新设计。\n\n**1.2 基本例子**\n\n![](https://pic2.zhimg.com/v2-3215832798dad4d85252c140e509f445_r.jpg)\n\n我们使用 Composition API 对左侧进行重构，其实就是将组件选项抽离到了 `setup` 函数当中进行编排，并在最后把模板用到的变量返回，最后的结果和将变量定义在 `data` 或者 `methods` 中没有什么区别。\n\n当然，setup 和 2.x 的选项一起混用也是没有问题的，并且依旧可以通过 `this.xx` 访问到 `setup` 返回的变量。\n\n❓ 如果只是把代码迁移到 `setup` 函数中，变成一长条的面条式代码，有什么意义呢\n\n**1.3 更进一步的例子**\n\n![](https://pic3.zhimg.com/v2-7889c66d30a72bf92842103cf92ed84e_r.jpg)\n\n这一次我们将 `setup` 中的代码进一步抽离，拆出了 `useMouse` 组合函数，里面封装了对鼠标位置的监听逻辑。`useMouse` 只需要将要暴露给组件的状态（`x`、`y`）以响应式的数据源的方式返回出来，就可以在我们的组件代码中使用。\n\n对于 Component 来说，里面没有任何监听鼠标位置的逻辑代码，只需要调用 `useMouse` 拿到 `x`、`y` 即可。\n\n❓ 这些我用 Mixins 也能实现呀\n\n**1.4 更更进一步的例子**\n\n![](https://pic4.zhimg.com/v2-7e01ef06f0e5e71970a6f98dcc5a610f_r.jpg)\n\n首先我们通过模板来理解 `useDark` 的工作内容，就是返回了一个表示是否是黑夜模式的布尔值，并且可以通过 `useToggle` 来快速得到一个 toggle 函数。\n\n然后观察 `useDark`，我们可以看到它身为一个组合函数的同时，又调用了其他的组合函数 `usePreferredDark` 和 `useLocalStorage` 来获取系统主题色和本地配置色。当然，我们不需要太关心它们的具体实现，只需要专注于处理结果，并返回以本地配置色为优先的结果即可。\n\n其中的组合函数调用关系如下图所示：\n\n![](https://pic3.zhimg.com/v2-1f58c63c4fccaffaa58660947892808a_r.jpg)\n\n组合函数的底层又依赖了其他组合函数，比如 `useLocalStorage` 依赖统一封装了 SessionStorage 和 LocalStorage 逻辑的 `useStorage`，`usePreferredDark` 依赖封装了 `window.matchMedia` 逻辑的 `useMediaQuery`。它们最后又都通过 `useEventListener` 来做状态改变的响应，并且能自动卸载。\n\n涉及的每一个函数都能独立使用，并且有自己的职责，最后进行组合。\n\n这个例子来源于 [VueUse](https://link.zhihu.com/?target=https%3A//github.com/vueuse/vueuse).\n\n当然，我们不可能总是写到这么通用的代码，但是在业务中也可以使用 Composition API 来对业务逻辑进行拆分，让每一个组合函数负责独立的业务，比如埋点上报、RichTextPanel 组件参数与回调、页面控件逻辑等。这些组件内的状态、方法现在我们可以将它提取到组合函数中，可以是为了复用，也可以仅仅是为了让 .vue 文件看起来更干净。\n\n## 二、API\n\n**2.1 setup**\n\n`setup` 是组合式 API 的入口点，它的执行时机在 `beforeCreate` 和 `created`，并且只会执行一次。\n\n所以我们不需要 `onBeforeCreate` 和 `onCreated`，这些钩子对应的代码应该直接在 `setup` 函数中编写。\n\n它接收两个参数：\n\n1.  响应式的 `props`\n2.  非响应式的 `context`，包含：attrs、slots、emit\n\n它执行的时候组件实例尚未被创建，所以我们无法访问 data、computed、methods 这些组件选项。\n\n如果它返回一个对象，那么对象的 property 就可以在选项或者模板中访问到。\n\n**2.1.1 返回渲染函数**\n\n![](https://pic1.zhimg.com/v2-ed3d1aa04bf9bf33e9878a0d935fb074_r.jpg)\n\n在 Babel Plugin 支持下可以返回 JSX：[feat: add @vue/composition-api support #142](https://link.zhihu.com/?target=https%3A//github.com/vuejs/jsx/pull/142)\n\n**2.1.2 getCurrentInstance**\n\n如果确实需要访问组件实例，可以使用 `getCurrentInstance()`。\n\n只能在 `setup`、生命周期钩子和组合函数中使用。\n\n![](https://pic4.zhimg.com/v2-2219ce295be181f25efcf766f103d15b_r.jpg)\n\n**2.2 reactive**\n\n返回对象的响应式副本，相当于 `Vue.observable(obj)` 。\n\n该响应式转换是 “深度转换”——它会影响嵌套对象传递的所有 property。\n\n怎么理解这里的响应式呢？就是我们在渲染期间使用响应式对象，当值改变的时候视图会自动更新，就和修改挂在 data 对象里的值一样。\n\n**2.2.1 无法代理原始值类型**\n\nreactive() 函数可以代理一个对象，但不能代理基本类型值，这是因为原始值类型只有值而没有引用，无法追踪变量的后续变化。\n\n**2.2.2 响应丢失**\n\n![](https://pic2.zhimg.com/v2-bde37e9bd232fafb93168b55251367b9_r.jpg)\n\n**2.3 ref**\n\n接收一个值，返回的响应式且可变的包装对象。\n\n它只有一个属性：`.value` ，该属性指向内部被包装的值。这个值可以直接修改。\n\n我们没法用 reactive 处理原始值类型，但是我们可以创建一个对象将原始值挂在它的同名 property 下，再传递给 reactive。Vue 提供了 ref 来替我们做这件事。\n\n![](https://pic1.zhimg.com/v2-19e7df03e22381ebc37428bf17a8e594_r.jpg)\n\n**2.3.1 自动解包（不需要加 .value 的情况）**\n\n1.  ref 在模板中会自动解包\n\n2.`watch` 可以直接接受 ref 作为监听对象，在回调函数中会直接返回解包后的值。\n\n![](https://pic2.zhimg.com/v2-61b795e0a933eaba882ebe38e65d3acd_r.jpg)\n\n3. 使用 reactive() / readonly() 解包对象嵌套的 ref\n\n![](https://pic3.zhimg.com/v2-6b5120ec665ba0e9330220c967ac023a_r.jpg)\n\n但是从 `Array` 或原生集合类型如 `Map`访问 ref 时，不会进行解包。\n\n**2.3.2 unref（ref 的反向操作）**\n\n传入一个 ref，返回 `ref.value`，否则原样返回。\n\n纠结是否需要加 `.value`（比如某个函数参数的类型是 `Ref<number> | number`）来取值，可以使用 unref 来解包。\n\n![](https://pic1.zhimg.com/v2-be644447a3adfae139ccb07863b4fe30_r.jpg)\n\n**2.3.3 重复使用已有 ref**\n\n将一个 ref 传递给 `ref()` 构造函数，它会原样返回。\n\n如果你的函数需要返回一个 ref，但是不确定参数的类型，可以直接 `return ref(param)`，如果是 ref 则会复用，不是则返回一个新的 ref。\n\n**2.3.4 可以使用 ES6 解构语法**\n\n解构一个值是 ref 的对象不会丢失响应式。\n\n![](https://pic3.zhimg.com/v2-fb83022e342cde7e017a54e710b8d6b6_r.jpg)\n\n**2.3.5 this.$refs 的解决方案**\n\n在虚拟 DOM 补丁算法中，如果 VNode 的 `ref` 键对应于渲染上下文中的 ref，则 VNode 的相应元素或组件实例将被分配给该 ref 的值。\n\n由于是在虚拟 DOM 挂载 / 打补丁过程中执行的，因此 ref 只会在初始渲染之后才获得赋值。\n\n![](https://pic4.zhimg.com/v2-c08e93238d9074b4e78284dcca4b94cb_r.jpg)\n\n**2.4 toRefs**\n\n将响应式对象转换为普通对象，并对每个 property 对应的 value 转换成 ref。\n\n可以用来解决 `reactive` 或者 `props` 在解构的时候丢失响应式的问题。\n\n![](https://pic1.zhimg.com/v2-e1550002c1ead321c4dde992c78f944c_r.jpg)\n\n**2.5 computed**\n\n接收 getter 函数，返回一个**只读**的响应式 ref 对象。\n\n![](https://pic1.zhimg.com/v2-b2e6f76a4f4265e182212f3dff7b8ab4_r.jpg)\n\n如果参数是具有 get 和 set 函数的对象，返回的结果会是一个**可写**的响应式 ref 对象。\n\n![](https://pic4.zhimg.com/v2-c7dadc1902029f1fa98537e6c13744d3_r.jpg)\n\n**2.6 watch**\n\n第一个参数接收数据源，可以是：\n\n*   getter 函数、ref\n*   包含上述两种类型的数组（也就是可以 watch 多个源，其中任一个变化都会触发回调）\n\n第二个参数是回调函数，在数据源变动的时候触发。\n\n![](https://pic3.zhimg.com/v2-b0556885105bd72c7b0b6ea131af826a_r.jpg)\n\n**2.6.1 停止观察**\n\n`watch()` 返回一个停止观察的函数：\n\n![](https://pic1.zhimg.com/v2-75541dc512f2994a4ac1719df0e23a64_r.jpg)\n\n如果 `watch()` 是在一个组件的 `setup()` 或是生命周期函数中被调用的，那么该 watcher 会在当前组件被销毁时也一同被自动停\n\n**2.6.2 清理 effect**\n\nwatcher 的回调会接收到的第三个参数是一个用来注册清理操作的函数。\n\n有时候当观察的数据源变化后，我们可能需要对之前所执行的副作用进行清理。举例来说，一个异步操作在完成之前数据就产生了变化，我们可能要撤销还在等待的前一个操作。\n\n调用这个函数可以注册一个清理函数，执行时机在：\n\n*   回调被下一次调用前\n*   watcher 被停止前\n\n![](https://pic4.zhimg.com/v2-f81961ecde2ab5d1edecc76cb51940b3_r.jpg)\n\n## 三、设计动机\n\n**3.1 从 Class API 到 Function API 再到 Composition API**\n\n我们可以在 Vue RFC 中看到最初的 [Class API](https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/17) 到 [Function-based Component API](https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/42) 取其 FP 的精华，再到被修订为 [Composition API](https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/78) 采用 Reactivity 的过程。\n\n**3.2 解决了什么问题**\n\n对比 2.x 对象式 API：\n\n*   极易复用。\n\n*   状态可以从组件中拆出来放到组合函数中。\n\n*   更清楚的逻辑。\n\n*   代码可以按功能 / 逻辑组织，而不是分散在各个选项中。\n\n*   更好的 TypeScript 类型支持。\n\n*   基于 Class 的 API 存在 TS 类型问题，而基于函数的 API 天然对类型推导很友好，因为 TS 对函数的参数、返回值和泛型的支持已经非常完备。\n\n*   更小的打包体积。\n\n*   基于函数的 API 每一个函数都可以作为 named ES export 被单独引入，这使得它们对 tree-shaking 非常友好。没有被使用的 API 的相关代码可以在最终打包时被移除。\n*   同时，基于函数 API 所写的代码也有更好的压缩效率，因为所有的函数名和 setup 函数体内部的变量名都可以被压缩，但对象和 class 的属性 / 方法名却不可以。\n\n**3.3 对比 2.x 的复用模式**\n\nVue 2.x 目前的 API 我们有一些常见的逻辑复用模式，包括：\n\n*   Mixins\n*   高阶组件 (Higher-order Components, aka HOCs)\n*   Renderless Components （基于 scoped slots / 作用域插槽封装逻辑的组件）\n\n总体来说，以上这些模式存在以下问题：\n\n*   模版中的数据来源不清晰。\n\n*   举例来说，当一个组件中使用了多个 mixin 的时候，光看模版会很难分清一个属性到底是来自哪一个 mixin。HOC 也有类似的问题。\n\n*   使用 Composition API 只需要观察 setup 函数就可以知道数据的来源。\n*   命名空间冲突。\n\n*   由不同开发者开发的 mixin 无法保证不会正好用到一样的属性或是方法名。HOC 在注入的 props 中也存在类似问题。\n\n*   组合函数在使用和返回给渲染层的两个阶段都可以做重命名的操作。\n*   性能。\n\n*   HOC 和 Renderless Components 都需要额外的组件实例嵌套来封装逻辑，导致无谓的性能开销。\n\n*   组合函数没有创建额外的组件实例所带来的性能损耗。\n\n**3.4 对比 React Hooks**\n\nComposition API 虽然借鉴了 React Hooks，两者具有同等的基于函数抽取和复用逻辑的能力，但是出于框架的性质两者在实现上是天差地别的。\n\nReact Hooks 在每次组件渲染时都会调用，通过隐式地将状态挂载在当前的内部组件节点上，在下一次渲染时根据调用顺序取出。而 Vue 的 `setup()` 每个组件实例只会在初始化时调用一次 ，状态通过引用储存在 `setup()` 的闭包内。\n\n也就是说，Composition API 相比 React Hooks：\n\n*   整体上更符合 JavaScript 的直觉；\n\n*   Mutable 写法。\n\n*   不受调用顺序的限制，可以有条件地被调用；\n\n*   Hooks 需要使用下标来获取对应的 state。\n\n*   不会在后续更新时不断产生大量的内联函数而影响引擎优化或是导致 GC 压力；\n\n*   Hooks 的每次渲染都是单独的闭包。\n\n*   不需要总是使用 `useCallback` 来缓存传给子组件的回调以防止过度更新；\n\n*   如果给子组件传了函数，每次渲染都会被当作新 props。\n\n*   不需要担心传了错误的依赖数组给 `useEffect/useMemo/useCallback` 从而导致回调中使用了过期的值。\n\n*   Vue 的依赖收集是全自动的，可以做到最小粒度的更新。\n\n这都是基于 Vue 的响应式更新能力。\n\n有兴趣的同学可以通过下面的链接了解 React Hooks 的心智模型有多么沉重：\n\n[Hooks FAQ](https://link.zhihu.com/?target=https%3A//zh-hans.reactjs.org/docs/hooks-faq.html%23from-classes-to-hooks)\n\n[使用 React Hooks 声明 setInterval](https://link.zhihu.com/?target=https%3A//overreacted.io/zh-hans/making-setinterval-declarative-with-react-hooks/)\n\n[useEffect 完整指南](https://link.zhihu.com/?target=https%3A//overreacted.io/zh-hans/a-complete-guide-to-useeffect/)\n\n**3.5 那么它有缺点吗？**\n\n**3.5.1 ref 和 reactive 的区别**\n\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><th>ref</th><th>reactive</th></tr><tr><td>可以处理原始值，也可以处理对象</td><td>只能处理对象</td></tr><tr><td>需要加 .value，需要考虑自动解包</td><td>不需要加 .value</td></tr><tr><td>有单独的类型</td><td>和普通的对象没有什么区别，无法直接通过类型判断是否是响应式</td></tr><tr><td>可以使用解构赋值</td><td>不可以使用解构赋值，会丢失响应式</td></tr><tr><td></td><td>需要使用箭头函数包装才能使用 watch</td></tr></tbody></table>\n\n**3.5.2 考虑响应式和 .value**\n\n虽然写 Composition API 不会有 `useEffect` 的困扰，还能使用完全一致的生命周期钩子函数，但是此次 Vue 把响应式 API 暴露给我们，实际上在编写代码的时候，需要考虑是否是响应式、是否是 ref 和响应式丢失的问题，也会带来一定的心智负担。\n\n## 总结\n\n**面向生命周期编程 vs 面向业务逻辑编程**  \nComposition API 带来了组件逻辑抽取和复用的优化，抽取逻辑会变得非常简单，所以我们不必只在需要复用逻辑的时候才抽取函数，也可以单纯为了更好地组织代码去抽取函数，以此避免每个逻辑任务的代码都被选项切成了多个碎片分散在各处。  \n当然如果组件足够简单，我们还是可以只使用 Options API，以原来的习惯写代码。**我可以在 Vue 2 中使用吗？**  \n可以的，官方团队提供了可供 Vue 2 使用的插件： [@vue/composition-api](https://link.zhihu.com/?target=https%3A//github.com/vuejs/composition-api)。  \n另外他们也计划让 Composition API 在 Vue 2.7 原生支持。\n\n## 参考\n\n[官方文档](https://link.zhihu.com/?target=https%3A//v3.cn.vuejs.org/guide/composition-api-introduction.html%23%25E4%25BB%2580%25E4%25B9%2588%25E6%2598%25AF%25E7%25BB%2584%25E5%2590%2588%25E5%25BC%258F-api)\n\n[Vue Function-based API RFC](https://zhuanlan.zhihu.com/p/68477600)\n\n[VueUse 作者 Anthony Fu 分享可组合的 Vue](https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1x54y1V7H6/)\n\n[深入理解 Vue3 Reactivity API](https://zhuanlan.zhihu.com/p/146097763)","source":"_posts/ReprintVueCompositionAPI.md","raw":"---\nurl: https://zhuanlan.zhihu.com/p/408272742\ntitle: 【转载】Vue Composition API\ndate: 2022-05-02 20:39:42\ntags:\n  - JS\n  - API\ncategories:\n  - 转载\n---\n\n> 原文转自：https://zhuanlan.zhihu.com/p/408272742\n\n\n## 前言\n\n关注 React 的同学应该知道，React 在 19 年推出了 Hooks API，从而可以抛弃难以理解的 class 完全转向函数式组件。当然，它对开发者的意义不止于此，更为重要的是它提供了从组件中**提取状态逻辑**的能力，让我们能以业务逻辑为细粒度拆分组件，并在组件之间复用业务逻辑。\n\n后续尤大马上发布了 Vue Function-based API RFC（在之后重写成了 Composition API），并作为 Vue3 的核心特性，可想而知它的重要性。\n\n接下来让我们抛开 React，来看看 Composition API 都有哪些内容。\n\n## 一、介绍\n\n**1.1 什么是 Composition API ？**\n\nVue 3 中引入的一种新的编写 Vue 组件的方式，可以将 2.x 中与组件逻辑相关的选项以 API 函数的形式重新设计。\n\n**1.2 基本例子**\n\n![](https://pic2.zhimg.com/v2-3215832798dad4d85252c140e509f445_r.jpg)\n\n我们使用 Composition API 对左侧进行重构，其实就是将组件选项抽离到了 `setup` 函数当中进行编排，并在最后把模板用到的变量返回，最后的结果和将变量定义在 `data` 或者 `methods` 中没有什么区别。\n\n当然，setup 和 2.x 的选项一起混用也是没有问题的，并且依旧可以通过 `this.xx` 访问到 `setup` 返回的变量。\n\n❓ 如果只是把代码迁移到 `setup` 函数中，变成一长条的面条式代码，有什么意义呢\n\n**1.3 更进一步的例子**\n\n![](https://pic3.zhimg.com/v2-7889c66d30a72bf92842103cf92ed84e_r.jpg)\n\n这一次我们将 `setup` 中的代码进一步抽离，拆出了 `useMouse` 组合函数，里面封装了对鼠标位置的监听逻辑。`useMouse` 只需要将要暴露给组件的状态（`x`、`y`）以响应式的数据源的方式返回出来，就可以在我们的组件代码中使用。\n\n对于 Component 来说，里面没有任何监听鼠标位置的逻辑代码，只需要调用 `useMouse` 拿到 `x`、`y` 即可。\n\n❓ 这些我用 Mixins 也能实现呀\n\n**1.4 更更进一步的例子**\n\n![](https://pic4.zhimg.com/v2-7e01ef06f0e5e71970a6f98dcc5a610f_r.jpg)\n\n首先我们通过模板来理解 `useDark` 的工作内容，就是返回了一个表示是否是黑夜模式的布尔值，并且可以通过 `useToggle` 来快速得到一个 toggle 函数。\n\n然后观察 `useDark`，我们可以看到它身为一个组合函数的同时，又调用了其他的组合函数 `usePreferredDark` 和 `useLocalStorage` 来获取系统主题色和本地配置色。当然，我们不需要太关心它们的具体实现，只需要专注于处理结果，并返回以本地配置色为优先的结果即可。\n\n其中的组合函数调用关系如下图所示：\n\n![](https://pic3.zhimg.com/v2-1f58c63c4fccaffaa58660947892808a_r.jpg)\n\n组合函数的底层又依赖了其他组合函数，比如 `useLocalStorage` 依赖统一封装了 SessionStorage 和 LocalStorage 逻辑的 `useStorage`，`usePreferredDark` 依赖封装了 `window.matchMedia` 逻辑的 `useMediaQuery`。它们最后又都通过 `useEventListener` 来做状态改变的响应，并且能自动卸载。\n\n涉及的每一个函数都能独立使用，并且有自己的职责，最后进行组合。\n\n这个例子来源于 [VueUse](https://link.zhihu.com/?target=https%3A//github.com/vueuse/vueuse).\n\n当然，我们不可能总是写到这么通用的代码，但是在业务中也可以使用 Composition API 来对业务逻辑进行拆分，让每一个组合函数负责独立的业务，比如埋点上报、RichTextPanel 组件参数与回调、页面控件逻辑等。这些组件内的状态、方法现在我们可以将它提取到组合函数中，可以是为了复用，也可以仅仅是为了让 .vue 文件看起来更干净。\n\n## 二、API\n\n**2.1 setup**\n\n`setup` 是组合式 API 的入口点，它的执行时机在 `beforeCreate` 和 `created`，并且只会执行一次。\n\n所以我们不需要 `onBeforeCreate` 和 `onCreated`，这些钩子对应的代码应该直接在 `setup` 函数中编写。\n\n它接收两个参数：\n\n1.  响应式的 `props`\n2.  非响应式的 `context`，包含：attrs、slots、emit\n\n它执行的时候组件实例尚未被创建，所以我们无法访问 data、computed、methods 这些组件选项。\n\n如果它返回一个对象，那么对象的 property 就可以在选项或者模板中访问到。\n\n**2.1.1 返回渲染函数**\n\n![](https://pic1.zhimg.com/v2-ed3d1aa04bf9bf33e9878a0d935fb074_r.jpg)\n\n在 Babel Plugin 支持下可以返回 JSX：[feat: add @vue/composition-api support #142](https://link.zhihu.com/?target=https%3A//github.com/vuejs/jsx/pull/142)\n\n**2.1.2 getCurrentInstance**\n\n如果确实需要访问组件实例，可以使用 `getCurrentInstance()`。\n\n只能在 `setup`、生命周期钩子和组合函数中使用。\n\n![](https://pic4.zhimg.com/v2-2219ce295be181f25efcf766f103d15b_r.jpg)\n\n**2.2 reactive**\n\n返回对象的响应式副本，相当于 `Vue.observable(obj)` 。\n\n该响应式转换是 “深度转换”——它会影响嵌套对象传递的所有 property。\n\n怎么理解这里的响应式呢？就是我们在渲染期间使用响应式对象，当值改变的时候视图会自动更新，就和修改挂在 data 对象里的值一样。\n\n**2.2.1 无法代理原始值类型**\n\nreactive() 函数可以代理一个对象，但不能代理基本类型值，这是因为原始值类型只有值而没有引用，无法追踪变量的后续变化。\n\n**2.2.2 响应丢失**\n\n![](https://pic2.zhimg.com/v2-bde37e9bd232fafb93168b55251367b9_r.jpg)\n\n**2.3 ref**\n\n接收一个值，返回的响应式且可变的包装对象。\n\n它只有一个属性：`.value` ，该属性指向内部被包装的值。这个值可以直接修改。\n\n我们没法用 reactive 处理原始值类型，但是我们可以创建一个对象将原始值挂在它的同名 property 下，再传递给 reactive。Vue 提供了 ref 来替我们做这件事。\n\n![](https://pic1.zhimg.com/v2-19e7df03e22381ebc37428bf17a8e594_r.jpg)\n\n**2.3.1 自动解包（不需要加 .value 的情况）**\n\n1.  ref 在模板中会自动解包\n\n2.`watch` 可以直接接受 ref 作为监听对象，在回调函数中会直接返回解包后的值。\n\n![](https://pic2.zhimg.com/v2-61b795e0a933eaba882ebe38e65d3acd_r.jpg)\n\n3. 使用 reactive() / readonly() 解包对象嵌套的 ref\n\n![](https://pic3.zhimg.com/v2-6b5120ec665ba0e9330220c967ac023a_r.jpg)\n\n但是从 `Array` 或原生集合类型如 `Map`访问 ref 时，不会进行解包。\n\n**2.3.2 unref（ref 的反向操作）**\n\n传入一个 ref，返回 `ref.value`，否则原样返回。\n\n纠结是否需要加 `.value`（比如某个函数参数的类型是 `Ref<number> | number`）来取值，可以使用 unref 来解包。\n\n![](https://pic1.zhimg.com/v2-be644447a3adfae139ccb07863b4fe30_r.jpg)\n\n**2.3.3 重复使用已有 ref**\n\n将一个 ref 传递给 `ref()` 构造函数，它会原样返回。\n\n如果你的函数需要返回一个 ref，但是不确定参数的类型，可以直接 `return ref(param)`，如果是 ref 则会复用，不是则返回一个新的 ref。\n\n**2.3.4 可以使用 ES6 解构语法**\n\n解构一个值是 ref 的对象不会丢失响应式。\n\n![](https://pic3.zhimg.com/v2-fb83022e342cde7e017a54e710b8d6b6_r.jpg)\n\n**2.3.5 this.$refs 的解决方案**\n\n在虚拟 DOM 补丁算法中，如果 VNode 的 `ref` 键对应于渲染上下文中的 ref，则 VNode 的相应元素或组件实例将被分配给该 ref 的值。\n\n由于是在虚拟 DOM 挂载 / 打补丁过程中执行的，因此 ref 只会在初始渲染之后才获得赋值。\n\n![](https://pic4.zhimg.com/v2-c08e93238d9074b4e78284dcca4b94cb_r.jpg)\n\n**2.4 toRefs**\n\n将响应式对象转换为普通对象，并对每个 property 对应的 value 转换成 ref。\n\n可以用来解决 `reactive` 或者 `props` 在解构的时候丢失响应式的问题。\n\n![](https://pic1.zhimg.com/v2-e1550002c1ead321c4dde992c78f944c_r.jpg)\n\n**2.5 computed**\n\n接收 getter 函数，返回一个**只读**的响应式 ref 对象。\n\n![](https://pic1.zhimg.com/v2-b2e6f76a4f4265e182212f3dff7b8ab4_r.jpg)\n\n如果参数是具有 get 和 set 函数的对象，返回的结果会是一个**可写**的响应式 ref 对象。\n\n![](https://pic4.zhimg.com/v2-c7dadc1902029f1fa98537e6c13744d3_r.jpg)\n\n**2.6 watch**\n\n第一个参数接收数据源，可以是：\n\n*   getter 函数、ref\n*   包含上述两种类型的数组（也就是可以 watch 多个源，其中任一个变化都会触发回调）\n\n第二个参数是回调函数，在数据源变动的时候触发。\n\n![](https://pic3.zhimg.com/v2-b0556885105bd72c7b0b6ea131af826a_r.jpg)\n\n**2.6.1 停止观察**\n\n`watch()` 返回一个停止观察的函数：\n\n![](https://pic1.zhimg.com/v2-75541dc512f2994a4ac1719df0e23a64_r.jpg)\n\n如果 `watch()` 是在一个组件的 `setup()` 或是生命周期函数中被调用的，那么该 watcher 会在当前组件被销毁时也一同被自动停\n\n**2.6.2 清理 effect**\n\nwatcher 的回调会接收到的第三个参数是一个用来注册清理操作的函数。\n\n有时候当观察的数据源变化后，我们可能需要对之前所执行的副作用进行清理。举例来说，一个异步操作在完成之前数据就产生了变化，我们可能要撤销还在等待的前一个操作。\n\n调用这个函数可以注册一个清理函数，执行时机在：\n\n*   回调被下一次调用前\n*   watcher 被停止前\n\n![](https://pic4.zhimg.com/v2-f81961ecde2ab5d1edecc76cb51940b3_r.jpg)\n\n## 三、设计动机\n\n**3.1 从 Class API 到 Function API 再到 Composition API**\n\n我们可以在 Vue RFC 中看到最初的 [Class API](https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/17) 到 [Function-based Component API](https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/42) 取其 FP 的精华，再到被修订为 [Composition API](https://link.zhihu.com/?target=https%3A//github.com/vuejs/rfcs/pull/78) 采用 Reactivity 的过程。\n\n**3.2 解决了什么问题**\n\n对比 2.x 对象式 API：\n\n*   极易复用。\n\n*   状态可以从组件中拆出来放到组合函数中。\n\n*   更清楚的逻辑。\n\n*   代码可以按功能 / 逻辑组织，而不是分散在各个选项中。\n\n*   更好的 TypeScript 类型支持。\n\n*   基于 Class 的 API 存在 TS 类型问题，而基于函数的 API 天然对类型推导很友好，因为 TS 对函数的参数、返回值和泛型的支持已经非常完备。\n\n*   更小的打包体积。\n\n*   基于函数的 API 每一个函数都可以作为 named ES export 被单独引入，这使得它们对 tree-shaking 非常友好。没有被使用的 API 的相关代码可以在最终打包时被移除。\n*   同时，基于函数 API 所写的代码也有更好的压缩效率，因为所有的函数名和 setup 函数体内部的变量名都可以被压缩，但对象和 class 的属性 / 方法名却不可以。\n\n**3.3 对比 2.x 的复用模式**\n\nVue 2.x 目前的 API 我们有一些常见的逻辑复用模式，包括：\n\n*   Mixins\n*   高阶组件 (Higher-order Components, aka HOCs)\n*   Renderless Components （基于 scoped slots / 作用域插槽封装逻辑的组件）\n\n总体来说，以上这些模式存在以下问题：\n\n*   模版中的数据来源不清晰。\n\n*   举例来说，当一个组件中使用了多个 mixin 的时候，光看模版会很难分清一个属性到底是来自哪一个 mixin。HOC 也有类似的问题。\n\n*   使用 Composition API 只需要观察 setup 函数就可以知道数据的来源。\n*   命名空间冲突。\n\n*   由不同开发者开发的 mixin 无法保证不会正好用到一样的属性或是方法名。HOC 在注入的 props 中也存在类似问题。\n\n*   组合函数在使用和返回给渲染层的两个阶段都可以做重命名的操作。\n*   性能。\n\n*   HOC 和 Renderless Components 都需要额外的组件实例嵌套来封装逻辑，导致无谓的性能开销。\n\n*   组合函数没有创建额外的组件实例所带来的性能损耗。\n\n**3.4 对比 React Hooks**\n\nComposition API 虽然借鉴了 React Hooks，两者具有同等的基于函数抽取和复用逻辑的能力，但是出于框架的性质两者在实现上是天差地别的。\n\nReact Hooks 在每次组件渲染时都会调用，通过隐式地将状态挂载在当前的内部组件节点上，在下一次渲染时根据调用顺序取出。而 Vue 的 `setup()` 每个组件实例只会在初始化时调用一次 ，状态通过引用储存在 `setup()` 的闭包内。\n\n也就是说，Composition API 相比 React Hooks：\n\n*   整体上更符合 JavaScript 的直觉；\n\n*   Mutable 写法。\n\n*   不受调用顺序的限制，可以有条件地被调用；\n\n*   Hooks 需要使用下标来获取对应的 state。\n\n*   不会在后续更新时不断产生大量的内联函数而影响引擎优化或是导致 GC 压力；\n\n*   Hooks 的每次渲染都是单独的闭包。\n\n*   不需要总是使用 `useCallback` 来缓存传给子组件的回调以防止过度更新；\n\n*   如果给子组件传了函数，每次渲染都会被当作新 props。\n\n*   不需要担心传了错误的依赖数组给 `useEffect/useMemo/useCallback` 从而导致回调中使用了过期的值。\n\n*   Vue 的依赖收集是全自动的，可以做到最小粒度的更新。\n\n这都是基于 Vue 的响应式更新能力。\n\n有兴趣的同学可以通过下面的链接了解 React Hooks 的心智模型有多么沉重：\n\n[Hooks FAQ](https://link.zhihu.com/?target=https%3A//zh-hans.reactjs.org/docs/hooks-faq.html%23from-classes-to-hooks)\n\n[使用 React Hooks 声明 setInterval](https://link.zhihu.com/?target=https%3A//overreacted.io/zh-hans/making-setinterval-declarative-with-react-hooks/)\n\n[useEffect 完整指南](https://link.zhihu.com/?target=https%3A//overreacted.io/zh-hans/a-complete-guide-to-useeffect/)\n\n**3.5 那么它有缺点吗？**\n\n**3.5.1 ref 和 reactive 的区别**\n\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><th>ref</th><th>reactive</th></tr><tr><td>可以处理原始值，也可以处理对象</td><td>只能处理对象</td></tr><tr><td>需要加 .value，需要考虑自动解包</td><td>不需要加 .value</td></tr><tr><td>有单独的类型</td><td>和普通的对象没有什么区别，无法直接通过类型判断是否是响应式</td></tr><tr><td>可以使用解构赋值</td><td>不可以使用解构赋值，会丢失响应式</td></tr><tr><td></td><td>需要使用箭头函数包装才能使用 watch</td></tr></tbody></table>\n\n**3.5.2 考虑响应式和 .value**\n\n虽然写 Composition API 不会有 `useEffect` 的困扰，还能使用完全一致的生命周期钩子函数，但是此次 Vue 把响应式 API 暴露给我们，实际上在编写代码的时候，需要考虑是否是响应式、是否是 ref 和响应式丢失的问题，也会带来一定的心智负担。\n\n## 总结\n\n**面向生命周期编程 vs 面向业务逻辑编程**  \nComposition API 带来了组件逻辑抽取和复用的优化，抽取逻辑会变得非常简单，所以我们不必只在需要复用逻辑的时候才抽取函数，也可以单纯为了更好地组织代码去抽取函数，以此避免每个逻辑任务的代码都被选项切成了多个碎片分散在各处。  \n当然如果组件足够简单，我们还是可以只使用 Options API，以原来的习惯写代码。**我可以在 Vue 2 中使用吗？**  \n可以的，官方团队提供了可供 Vue 2 使用的插件： [@vue/composition-api](https://link.zhihu.com/?target=https%3A//github.com/vuejs/composition-api)。  \n另外他们也计划让 Composition API 在 Vue 2.7 原生支持。\n\n## 参考\n\n[官方文档](https://link.zhihu.com/?target=https%3A//v3.cn.vuejs.org/guide/composition-api-introduction.html%23%25E4%25BB%2580%25E4%25B9%2588%25E6%2598%25AF%25E7%25BB%2584%25E5%2590%2588%25E5%25BC%258F-api)\n\n[Vue Function-based API RFC](https://zhuanlan.zhihu.com/p/68477600)\n\n[VueUse 作者 Anthony Fu 分享可组合的 Vue](https://link.zhihu.com/?target=https%3A//www.bilibili.com/video/BV1x54y1V7H6/)\n\n[深入理解 Vue3 Reactivity API](https://zhuanlan.zhihu.com/p/146097763)","slug":"ReprintVueCompositionAPI","published":1,"updated":"2024-07-14T01:09:19.909Z","comments":1,"layout":"post","photos":[],"_id":"clyliw096001jtch8ae6fgyct","content":"<blockquote>\n<p>原文转自：<a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/408272742\" >https://zhuanlan.zhihu.com/p/408272742 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>关注 React 的同学应该知道，React 在 19 年推出了 Hooks API，从而可以抛弃难以理解的 class 完全转向函数式组件。当然，它对开发者的意义不止于此，更为重要的是它提供了从组件中<strong>提取状态逻辑</strong>的能力，让我们能以业务逻辑为细粒度拆分组件，并在组件之间复用业务逻辑。</p>\n<p>后续尤大马上发布了 Vue Function-based API RFC（在之后重写成了 Composition API），并作为 Vue3 的核心特性，可想而知它的重要性。</p>\n<p>接下来让我们抛开 React，来看看 Composition API 都有哪些内容。</p>\n<h2 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h2><p><strong>1.1 什么是 Composition API ？</strong></p>\n<p>Vue 3 中引入的一种新的编写 Vue 组件的方式，可以将 2.x 中与组件逻辑相关的选项以 API 函数的形式重新设计。</p>\n<p><strong>1.2 基本例子</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic2.zhimg.com/v2-3215832798dad4d85252c140e509f445_r.jpg\"\n                     \n                ></p>\n<p>我们使用 Composition API 对左侧进行重构，其实就是将组件选项抽离到了 <code>setup</code> 函数当中进行编排，并在最后把模板用到的变量返回，最后的结果和将变量定义在 <code>data</code> 或者 <code>methods</code> 中没有什么区别。</p>\n<p>当然，setup 和 2.x 的选项一起混用也是没有问题的，并且依旧可以通过 <code>this.xx</code> 访问到 <code>setup</code> 返回的变量。</p>\n<p>❓ 如果只是把代码迁移到 <code>setup</code> 函数中，变成一长条的面条式代码，有什么意义呢</p>\n<p><strong>1.3 更进一步的例子</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic3.zhimg.com/v2-7889c66d30a72bf92842103cf92ed84e_r.jpg\"\n                     \n                ></p>\n<p>这一次我们将 <code>setup</code> 中的代码进一步抽离，拆出了 <code>useMouse</code> 组合函数，里面封装了对鼠标位置的监听逻辑。<code>useMouse</code> 只需要将要暴露给组件的状态（<code>x</code>、<code>y</code>）以响应式的数据源的方式返回出来，就可以在我们的组件代码中使用。</p>\n<p>对于 Component 来说，里面没有任何监听鼠标位置的逻辑代码，只需要调用 <code>useMouse</code> 拿到 <code>x</code>、<code>y</code> 即可。</p>\n<p>❓ 这些我用 Mixins 也能实现呀</p>\n<p><strong>1.4 更更进一步的例子</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic4.zhimg.com/v2-7e01ef06f0e5e71970a6f98dcc5a610f_r.jpg\"\n                     \n                ></p>\n<p>首先我们通过模板来理解 <code>useDark</code> 的工作内容，就是返回了一个表示是否是黑夜模式的布尔值，并且可以通过 <code>useToggle</code> 来快速得到一个 toggle 函数。</p>\n<p>然后观察 <code>useDark</code>，我们可以看到它身为一个组合函数的同时，又调用了其他的组合函数 <code>usePreferredDark</code> 和 <code>useLocalStorage</code> 来获取系统主题色和本地配置色。当然，我们不需要太关心它们的具体实现，只需要专注于处理结果，并返回以本地配置色为优先的结果即可。</p>\n<p>其中的组合函数调用关系如下图所示：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic3.zhimg.com/v2-1f58c63c4fccaffaa58660947892808a_r.jpg\"\n                     \n                ></p>\n<p>组合函数的底层又依赖了其他组合函数，比如 <code>useLocalStorage</code> 依赖统一封装了 SessionStorage 和 LocalStorage 逻辑的 <code>useStorage</code>，<code>usePreferredDark</code> 依赖封装了 <code>window.matchMedia</code> 逻辑的 <code>useMediaQuery</code>。它们最后又都通过 <code>useEventListener</code> 来做状态改变的响应，并且能自动卸载。</p>\n<p>涉及的每一个函数都能独立使用，并且有自己的职责，最后进行组合。</p>\n<p>这个例子来源于 <a class=\"link\"   href=\"https://link.zhihu.com/?target=https://github.com/vueuse/vueuse\" >VueUse <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>.</p>\n<p>当然，我们不可能总是写到这么通用的代码，但是在业务中也可以使用 Composition API 来对业务逻辑进行拆分，让每一个组合函数负责独立的业务，比如埋点上报、RichTextPanel 组件参数与回调、页面控件逻辑等。这些组件内的状态、方法现在我们可以将它提取到组合函数中，可以是为了复用，也可以仅仅是为了让 .vue 文件看起来更干净。</p>\n<h2 id=\"二、API\"><a href=\"#二、API\" class=\"headerlink\" title=\"二、API\"></a>二、API</h2><p><strong>2.1 setup</strong></p>\n<p><code>setup</code> 是组合式 API 的入口点，它的执行时机在 <code>beforeCreate</code> 和 <code>created</code>，并且只会执行一次。</p>\n<p>所以我们不需要 <code>onBeforeCreate</code> 和 <code>onCreated</code>，这些钩子对应的代码应该直接在 <code>setup</code> 函数中编写。</p>\n<p>它接收两个参数：</p>\n<ol>\n<li>响应式的 <code>props</code></li>\n<li>非响应式的 <code>context</code>，包含：attrs、slots、emit</li>\n</ol>\n<p>它执行的时候组件实例尚未被创建，所以我们无法访问 data、computed、methods 这些组件选项。</p>\n<p>如果它返回一个对象，那么对象的 property 就可以在选项或者模板中访问到。</p>\n<p><strong>2.1.1 返回渲染函数</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic1.zhimg.com/v2-ed3d1aa04bf9bf33e9878a0d935fb074_r.jpg\"\n                     \n                ></p>\n<p>在 Babel Plugin 支持下可以返回 JSX：<a class=\"link\"   href=\"https://link.zhihu.com/?target=https://github.com/vuejs/jsx/pull/142\" >feat: add @vue&#x2F;composition-api support #142 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><strong>2.1.2 getCurrentInstance</strong></p>\n<p>如果确实需要访问组件实例，可以使用 <code>getCurrentInstance()</code>。</p>\n<p>只能在 <code>setup</code>、生命周期钩子和组合函数中使用。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic4.zhimg.com/v2-2219ce295be181f25efcf766f103d15b_r.jpg\"\n                     \n                ></p>\n<p><strong>2.2 reactive</strong></p>\n<p>返回对象的响应式副本，相当于 <code>Vue.observable(obj)</code> 。</p>\n<p>该响应式转换是 “深度转换”——它会影响嵌套对象传递的所有 property。</p>\n<p>怎么理解这里的响应式呢？就是我们在渲染期间使用响应式对象，当值改变的时候视图会自动更新，就和修改挂在 data 对象里的值一样。</p>\n<p><strong>2.2.1 无法代理原始值类型</strong></p>\n<p>reactive() 函数可以代理一个对象，但不能代理基本类型值，这是因为原始值类型只有值而没有引用，无法追踪变量的后续变化。</p>\n<p><strong>2.2.2 响应丢失</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic2.zhimg.com/v2-bde37e9bd232fafb93168b55251367b9_r.jpg\"\n                     \n                ></p>\n<p><strong>2.3 ref</strong></p>\n<p>接收一个值，返回的响应式且可变的包装对象。</p>\n<p>它只有一个属性：<code>.value</code> ，该属性指向内部被包装的值。这个值可以直接修改。</p>\n<p>我们没法用 reactive 处理原始值类型，但是我们可以创建一个对象将原始值挂在它的同名 property 下，再传递给 reactive。Vue 提供了 ref 来替我们做这件事。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic1.zhimg.com/v2-19e7df03e22381ebc37428bf17a8e594_r.jpg\"\n                     \n                ></p>\n<p><strong>2.3.1 自动解包（不需要加 .value 的情况）</strong></p>\n<ol>\n<li>ref 在模板中会自动解包</li>\n</ol>\n<p>2.<code>watch</code> 可以直接接受 ref 作为监听对象，在回调函数中会直接返回解包后的值。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic2.zhimg.com/v2-61b795e0a933eaba882ebe38e65d3acd_r.jpg\"\n                     \n                ></p>\n<ol start=\"3\">\n<li>使用 reactive() &#x2F; readonly() 解包对象嵌套的 ref</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic3.zhimg.com/v2-6b5120ec665ba0e9330220c967ac023a_r.jpg\"\n                     \n                ></p>\n<p>但是从 <code>Array</code> 或原生集合类型如 <code>Map</code>访问 ref 时，不会进行解包。</p>\n<p><strong>2.3.2 unref（ref 的反向操作）</strong></p>\n<p>传入一个 ref，返回 <code>ref.value</code>，否则原样返回。</p>\n<p>纠结是否需要加 <code>.value</code>（比如某个函数参数的类型是 <code>Ref&lt;number&gt; | number</code>）来取值，可以使用 unref 来解包。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic1.zhimg.com/v2-be644447a3adfae139ccb07863b4fe30_r.jpg\"\n                     \n                ></p>\n<p><strong>2.3.3 重复使用已有 ref</strong></p>\n<p>将一个 ref 传递给 <code>ref()</code> 构造函数，它会原样返回。</p>\n<p>如果你的函数需要返回一个 ref，但是不确定参数的类型，可以直接 <code>return ref(param)</code>，如果是 ref 则会复用，不是则返回一个新的 ref。</p>\n<p><strong>2.3.4 可以使用 ES6 解构语法</strong></p>\n<p>解构一个值是 ref 的对象不会丢失响应式。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic3.zhimg.com/v2-fb83022e342cde7e017a54e710b8d6b6_r.jpg\"\n                     \n                ></p>\n<p><strong>2.3.5 this.$refs 的解决方案</strong></p>\n<p>在虚拟 DOM 补丁算法中，如果 VNode 的 <code>ref</code> 键对应于渲染上下文中的 ref，则 VNode 的相应元素或组件实例将被分配给该 ref 的值。</p>\n<p>由于是在虚拟 DOM 挂载 &#x2F; 打补丁过程中执行的，因此 ref 只会在初始渲染之后才获得赋值。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic4.zhimg.com/v2-c08e93238d9074b4e78284dcca4b94cb_r.jpg\"\n                     \n                ></p>\n<p><strong>2.4 toRefs</strong></p>\n<p>将响应式对象转换为普通对象，并对每个 property 对应的 value 转换成 ref。</p>\n<p>可以用来解决 <code>reactive</code> 或者 <code>props</code> 在解构的时候丢失响应式的问题。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic1.zhimg.com/v2-e1550002c1ead321c4dde992c78f944c_r.jpg\"\n                     \n                ></p>\n<p><strong>2.5 computed</strong></p>\n<p>接收 getter 函数，返回一个<strong>只读</strong>的响应式 ref 对象。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic1.zhimg.com/v2-b2e6f76a4f4265e182212f3dff7b8ab4_r.jpg\"\n                     \n                ></p>\n<p>如果参数是具有 get 和 set 函数的对象，返回的结果会是一个<strong>可写</strong>的响应式 ref 对象。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic4.zhimg.com/v2-c7dadc1902029f1fa98537e6c13744d3_r.jpg\"\n                     \n                ></p>\n<p><strong>2.6 watch</strong></p>\n<p>第一个参数接收数据源，可以是：</p>\n<ul>\n<li>getter 函数、ref</li>\n<li>包含上述两种类型的数组（也就是可以 watch 多个源，其中任一个变化都会触发回调）</li>\n</ul>\n<p>第二个参数是回调函数，在数据源变动的时候触发。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic3.zhimg.com/v2-b0556885105bd72c7b0b6ea131af826a_r.jpg\"\n                     \n                ></p>\n<p><strong>2.6.1 停止观察</strong></p>\n<p><code>watch()</code> 返回一个停止观察的函数：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic1.zhimg.com/v2-75541dc512f2994a4ac1719df0e23a64_r.jpg\"\n                     \n                ></p>\n<p>如果 <code>watch()</code> 是在一个组件的 <code>setup()</code> 或是生命周期函数中被调用的，那么该 watcher 会在当前组件被销毁时也一同被自动停</p>\n<p><strong>2.6.2 清理 effect</strong></p>\n<p>watcher 的回调会接收到的第三个参数是一个用来注册清理操作的函数。</p>\n<p>有时候当观察的数据源变化后，我们可能需要对之前所执行的副作用进行清理。举例来说，一个异步操作在完成之前数据就产生了变化，我们可能要撤销还在等待的前一个操作。</p>\n<p>调用这个函数可以注册一个清理函数，执行时机在：</p>\n<ul>\n<li>回调被下一次调用前</li>\n<li>watcher 被停止前</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic4.zhimg.com/v2-f81961ecde2ab5d1edecc76cb51940b3_r.jpg\"\n                     \n                ></p>\n<h2 id=\"三、设计动机\"><a href=\"#三、设计动机\" class=\"headerlink\" title=\"三、设计动机\"></a>三、设计动机</h2><p><strong>3.1 从 Class API 到 Function API 再到 Composition API</strong></p>\n<p>我们可以在 Vue RFC 中看到最初的 <a class=\"link\"   href=\"https://link.zhihu.com/?target=https://github.com/vuejs/rfcs/pull/17\" >Class API <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 到 <a class=\"link\"   href=\"https://link.zhihu.com/?target=https://github.com/vuejs/rfcs/pull/42\" >Function-based Component API <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 取其 FP 的精华，再到被修订为 <a class=\"link\"   href=\"https://link.zhihu.com/?target=https://github.com/vuejs/rfcs/pull/78\" >Composition API <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 采用 Reactivity 的过程。</p>\n<p><strong>3.2 解决了什么问题</strong></p>\n<p>对比 2.x 对象式 API：</p>\n<ul>\n<li><p>极易复用。</p>\n</li>\n<li><p>状态可以从组件中拆出来放到组合函数中。</p>\n</li>\n<li><p>更清楚的逻辑。</p>\n</li>\n<li><p>代码可以按功能 &#x2F; 逻辑组织，而不是分散在各个选项中。</p>\n</li>\n<li><p>更好的 TypeScript 类型支持。</p>\n</li>\n<li><p>基于 Class 的 API 存在 TS 类型问题，而基于函数的 API 天然对类型推导很友好，因为 TS 对函数的参数、返回值和泛型的支持已经非常完备。</p>\n</li>\n<li><p>更小的打包体积。</p>\n</li>\n<li><p>基于函数的 API 每一个函数都可以作为 named ES export 被单独引入，这使得它们对 tree-shaking 非常友好。没有被使用的 API 的相关代码可以在最终打包时被移除。</p>\n</li>\n<li><p>同时，基于函数 API 所写的代码也有更好的压缩效率，因为所有的函数名和 setup 函数体内部的变量名都可以被压缩，但对象和 class 的属性 &#x2F; 方法名却不可以。</p>\n</li>\n</ul>\n<p><strong>3.3 对比 2.x 的复用模式</strong></p>\n<p>Vue 2.x 目前的 API 我们有一些常见的逻辑复用模式，包括：</p>\n<ul>\n<li>Mixins</li>\n<li>高阶组件 (Higher-order Components, aka HOCs)</li>\n<li>Renderless Components （基于 scoped slots &#x2F; 作用域插槽封装逻辑的组件）</li>\n</ul>\n<p>总体来说，以上这些模式存在以下问题：</p>\n<ul>\n<li><p>模版中的数据来源不清晰。</p>\n</li>\n<li><p>举例来说，当一个组件中使用了多个 mixin 的时候，光看模版会很难分清一个属性到底是来自哪一个 mixin。HOC 也有类似的问题。</p>\n</li>\n<li><p>使用 Composition API 只需要观察 setup 函数就可以知道数据的来源。</p>\n</li>\n<li><p>命名空间冲突。</p>\n</li>\n<li><p>由不同开发者开发的 mixin 无法保证不会正好用到一样的属性或是方法名。HOC 在注入的 props 中也存在类似问题。</p>\n</li>\n<li><p>组合函数在使用和返回给渲染层的两个阶段都可以做重命名的操作。</p>\n</li>\n<li><p>性能。</p>\n</li>\n<li><p>HOC 和 Renderless Components 都需要额外的组件实例嵌套来封装逻辑，导致无谓的性能开销。</p>\n</li>\n<li><p>组合函数没有创建额外的组件实例所带来的性能损耗。</p>\n</li>\n</ul>\n<p><strong>3.4 对比 React Hooks</strong></p>\n<p>Composition API 虽然借鉴了 React Hooks，两者具有同等的基于函数抽取和复用逻辑的能力，但是出于框架的性质两者在实现上是天差地别的。</p>\n<p>React Hooks 在每次组件渲染时都会调用，通过隐式地将状态挂载在当前的内部组件节点上，在下一次渲染时根据调用顺序取出。而 Vue 的 <code>setup()</code> 每个组件实例只会在初始化时调用一次 ，状态通过引用储存在 <code>setup()</code> 的闭包内。</p>\n<p>也就是说，Composition API 相比 React Hooks：</p>\n<ul>\n<li><p>整体上更符合 JavaScript 的直觉；</p>\n</li>\n<li><p>Mutable 写法。</p>\n</li>\n<li><p>不受调用顺序的限制，可以有条件地被调用；</p>\n</li>\n<li><p>Hooks 需要使用下标来获取对应的 state。</p>\n</li>\n<li><p>不会在后续更新时不断产生大量的内联函数而影响引擎优化或是导致 GC 压力；</p>\n</li>\n<li><p>Hooks 的每次渲染都是单独的闭包。</p>\n</li>\n<li><p>不需要总是使用 <code>useCallback</code> 来缓存传给子组件的回调以防止过度更新；</p>\n</li>\n<li><p>如果给子组件传了函数，每次渲染都会被当作新 props。</p>\n</li>\n<li><p>不需要担心传了错误的依赖数组给 <code>useEffect/useMemo/useCallback</code> 从而导致回调中使用了过期的值。</p>\n</li>\n<li><p>Vue 的依赖收集是全自动的，可以做到最小粒度的更新。</p>\n</li>\n</ul>\n<p>这都是基于 Vue 的响应式更新能力。</p>\n<p>有兴趣的同学可以通过下面的链接了解 React Hooks 的心智模型有多么沉重：</p>\n<p><a class=\"link\"   href=\"https://link.zhihu.com/?target=https://zh-hans.reactjs.org/docs/hooks-faq.html%23from-classes-to-hooks\" >Hooks FAQ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://link.zhihu.com/?target=https://overreacted.io/zh-hans/making-setinterval-declarative-with-react-hooks/\" >使用 React Hooks 声明 setInterval <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://link.zhihu.com/?target=https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/\" >useEffect 完整指南 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><strong>3.5 那么它有缺点吗？</strong></p>\n<p><strong>3.5.1 ref 和 reactive 的区别</strong></p>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><th>ref</th><th>reactive</th></tr><tr><td>可以处理原始值，也可以处理对象</td><td>只能处理对象</td></tr><tr><td>需要加 .value，需要考虑自动解包</td><td>不需要加 .value</td></tr><tr><td>有单独的类型</td><td>和普通的对象没有什么区别，无法直接通过类型判断是否是响应式</td></tr><tr><td>可以使用解构赋值</td><td>不可以使用解构赋值，会丢失响应式</td></tr><tr><td></td><td>需要使用箭头函数包装才能使用 watch</td></tr></tbody></table>\n\n<p><strong>3.5.2 考虑响应式和 .value</strong></p>\n<p>虽然写 Composition API 不会有 <code>useEffect</code> 的困扰，还能使用完全一致的生命周期钩子函数，但是此次 Vue 把响应式 API 暴露给我们，实际上在编写代码的时候，需要考虑是否是响应式、是否是 ref 和响应式丢失的问题，也会带来一定的心智负担。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>面向生命周期编程 vs 面向业务逻辑编程</strong><br>Composition API 带来了组件逻辑抽取和复用的优化，抽取逻辑会变得非常简单，所以我们不必只在需要复用逻辑的时候才抽取函数，也可以单纯为了更好地组织代码去抽取函数，以此避免每个逻辑任务的代码都被选项切成了多个碎片分散在各处。<br>当然如果组件足够简单，我们还是可以只使用 Options API，以原来的习惯写代码。<strong>我可以在 Vue 2 中使用吗？</strong><br>可以的，官方团队提供了可供 Vue 2 使用的插件： <a class=\"link\"   href=\"https://link.zhihu.com/?target=https://github.com/vuejs/composition-api\" >@vue&#x2F;composition-api <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>。<br>另外他们也计划让 Composition API 在 Vue 2.7 原生支持。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a class=\"link\"   href=\"https://link.zhihu.com/?target=https://v3.cn.vuejs.org/guide/composition-api-introduction.html%23%25E4%25BB%2580%25E4%25B9%2588%25E6%2598%25AF%25E7%25BB%2584%25E5%2590%2588%25E5%25BC%258F-api\" >官方文档 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/68477600\" >Vue Function-based API RFC <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://link.zhihu.com/?target=https://www.bilibili.com/video/BV1x54y1V7H6/\" >VueUse 作者 Anthony Fu 分享可组合的 Vue <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/146097763\" >深入理解 Vue3 Reactivity API <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n","excerpt":"","more":"<blockquote>\n<p>原文转自：<a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/408272742\" >https://zhuanlan.zhihu.com/p/408272742 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n</blockquote>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>关注 React 的同学应该知道，React 在 19 年推出了 Hooks API，从而可以抛弃难以理解的 class 完全转向函数式组件。当然，它对开发者的意义不止于此，更为重要的是它提供了从组件中<strong>提取状态逻辑</strong>的能力，让我们能以业务逻辑为细粒度拆分组件，并在组件之间复用业务逻辑。</p>\n<p>后续尤大马上发布了 Vue Function-based API RFC（在之后重写成了 Composition API），并作为 Vue3 的核心特性，可想而知它的重要性。</p>\n<p>接下来让我们抛开 React，来看看 Composition API 都有哪些内容。</p>\n<h2 id=\"一、介绍\"><a href=\"#一、介绍\" class=\"headerlink\" title=\"一、介绍\"></a>一、介绍</h2><p><strong>1.1 什么是 Composition API ？</strong></p>\n<p>Vue 3 中引入的一种新的编写 Vue 组件的方式，可以将 2.x 中与组件逻辑相关的选项以 API 函数的形式重新设计。</p>\n<p><strong>1.2 基本例子</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic2.zhimg.com/v2-3215832798dad4d85252c140e509f445_r.jpg\"\n                     \n                ></p>\n<p>我们使用 Composition API 对左侧进行重构，其实就是将组件选项抽离到了 <code>setup</code> 函数当中进行编排，并在最后把模板用到的变量返回，最后的结果和将变量定义在 <code>data</code> 或者 <code>methods</code> 中没有什么区别。</p>\n<p>当然，setup 和 2.x 的选项一起混用也是没有问题的，并且依旧可以通过 <code>this.xx</code> 访问到 <code>setup</code> 返回的变量。</p>\n<p>❓ 如果只是把代码迁移到 <code>setup</code> 函数中，变成一长条的面条式代码，有什么意义呢</p>\n<p><strong>1.3 更进一步的例子</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic3.zhimg.com/v2-7889c66d30a72bf92842103cf92ed84e_r.jpg\"\n                     \n                ></p>\n<p>这一次我们将 <code>setup</code> 中的代码进一步抽离，拆出了 <code>useMouse</code> 组合函数，里面封装了对鼠标位置的监听逻辑。<code>useMouse</code> 只需要将要暴露给组件的状态（<code>x</code>、<code>y</code>）以响应式的数据源的方式返回出来，就可以在我们的组件代码中使用。</p>\n<p>对于 Component 来说，里面没有任何监听鼠标位置的逻辑代码，只需要调用 <code>useMouse</code> 拿到 <code>x</code>、<code>y</code> 即可。</p>\n<p>❓ 这些我用 Mixins 也能实现呀</p>\n<p><strong>1.4 更更进一步的例子</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic4.zhimg.com/v2-7e01ef06f0e5e71970a6f98dcc5a610f_r.jpg\"\n                     \n                ></p>\n<p>首先我们通过模板来理解 <code>useDark</code> 的工作内容，就是返回了一个表示是否是黑夜模式的布尔值，并且可以通过 <code>useToggle</code> 来快速得到一个 toggle 函数。</p>\n<p>然后观察 <code>useDark</code>，我们可以看到它身为一个组合函数的同时，又调用了其他的组合函数 <code>usePreferredDark</code> 和 <code>useLocalStorage</code> 来获取系统主题色和本地配置色。当然，我们不需要太关心它们的具体实现，只需要专注于处理结果，并返回以本地配置色为优先的结果即可。</p>\n<p>其中的组合函数调用关系如下图所示：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic3.zhimg.com/v2-1f58c63c4fccaffaa58660947892808a_r.jpg\"\n                     \n                ></p>\n<p>组合函数的底层又依赖了其他组合函数，比如 <code>useLocalStorage</code> 依赖统一封装了 SessionStorage 和 LocalStorage 逻辑的 <code>useStorage</code>，<code>usePreferredDark</code> 依赖封装了 <code>window.matchMedia</code> 逻辑的 <code>useMediaQuery</code>。它们最后又都通过 <code>useEventListener</code> 来做状态改变的响应，并且能自动卸载。</p>\n<p>涉及的每一个函数都能独立使用，并且有自己的职责，最后进行组合。</p>\n<p>这个例子来源于 <a class=\"link\"   href=\"https://link.zhihu.com/?target=https://github.com/vueuse/vueuse\" >VueUse <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>.</p>\n<p>当然，我们不可能总是写到这么通用的代码，但是在业务中也可以使用 Composition API 来对业务逻辑进行拆分，让每一个组合函数负责独立的业务，比如埋点上报、RichTextPanel 组件参数与回调、页面控件逻辑等。这些组件内的状态、方法现在我们可以将它提取到组合函数中，可以是为了复用，也可以仅仅是为了让 .vue 文件看起来更干净。</p>\n<h2 id=\"二、API\"><a href=\"#二、API\" class=\"headerlink\" title=\"二、API\"></a>二、API</h2><p><strong>2.1 setup</strong></p>\n<p><code>setup</code> 是组合式 API 的入口点，它的执行时机在 <code>beforeCreate</code> 和 <code>created</code>，并且只会执行一次。</p>\n<p>所以我们不需要 <code>onBeforeCreate</code> 和 <code>onCreated</code>，这些钩子对应的代码应该直接在 <code>setup</code> 函数中编写。</p>\n<p>它接收两个参数：</p>\n<ol>\n<li>响应式的 <code>props</code></li>\n<li>非响应式的 <code>context</code>，包含：attrs、slots、emit</li>\n</ol>\n<p>它执行的时候组件实例尚未被创建，所以我们无法访问 data、computed、methods 这些组件选项。</p>\n<p>如果它返回一个对象，那么对象的 property 就可以在选项或者模板中访问到。</p>\n<p><strong>2.1.1 返回渲染函数</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic1.zhimg.com/v2-ed3d1aa04bf9bf33e9878a0d935fb074_r.jpg\"\n                     \n                ></p>\n<p>在 Babel Plugin 支持下可以返回 JSX：<a class=\"link\"   href=\"https://link.zhihu.com/?target=https://github.com/vuejs/jsx/pull/142\" >feat: add @vue&#x2F;composition-api support #142 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><strong>2.1.2 getCurrentInstance</strong></p>\n<p>如果确实需要访问组件实例，可以使用 <code>getCurrentInstance()</code>。</p>\n<p>只能在 <code>setup</code>、生命周期钩子和组合函数中使用。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic4.zhimg.com/v2-2219ce295be181f25efcf766f103d15b_r.jpg\"\n                     \n                ></p>\n<p><strong>2.2 reactive</strong></p>\n<p>返回对象的响应式副本，相当于 <code>Vue.observable(obj)</code> 。</p>\n<p>该响应式转换是 “深度转换”——它会影响嵌套对象传递的所有 property。</p>\n<p>怎么理解这里的响应式呢？就是我们在渲染期间使用响应式对象，当值改变的时候视图会自动更新，就和修改挂在 data 对象里的值一样。</p>\n<p><strong>2.2.1 无法代理原始值类型</strong></p>\n<p>reactive() 函数可以代理一个对象，但不能代理基本类型值，这是因为原始值类型只有值而没有引用，无法追踪变量的后续变化。</p>\n<p><strong>2.2.2 响应丢失</strong></p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic2.zhimg.com/v2-bde37e9bd232fafb93168b55251367b9_r.jpg\"\n                     \n                ></p>\n<p><strong>2.3 ref</strong></p>\n<p>接收一个值，返回的响应式且可变的包装对象。</p>\n<p>它只有一个属性：<code>.value</code> ，该属性指向内部被包装的值。这个值可以直接修改。</p>\n<p>我们没法用 reactive 处理原始值类型，但是我们可以创建一个对象将原始值挂在它的同名 property 下，再传递给 reactive。Vue 提供了 ref 来替我们做这件事。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic1.zhimg.com/v2-19e7df03e22381ebc37428bf17a8e594_r.jpg\"\n                     \n                ></p>\n<p><strong>2.3.1 自动解包（不需要加 .value 的情况）</strong></p>\n<ol>\n<li>ref 在模板中会自动解包</li>\n</ol>\n<p>2.<code>watch</code> 可以直接接受 ref 作为监听对象，在回调函数中会直接返回解包后的值。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic2.zhimg.com/v2-61b795e0a933eaba882ebe38e65d3acd_r.jpg\"\n                     \n                ></p>\n<ol start=\"3\">\n<li>使用 reactive() &#x2F; readonly() 解包对象嵌套的 ref</li>\n</ol>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic3.zhimg.com/v2-6b5120ec665ba0e9330220c967ac023a_r.jpg\"\n                     \n                ></p>\n<p>但是从 <code>Array</code> 或原生集合类型如 <code>Map</code>访问 ref 时，不会进行解包。</p>\n<p><strong>2.3.2 unref（ref 的反向操作）</strong></p>\n<p>传入一个 ref，返回 <code>ref.value</code>，否则原样返回。</p>\n<p>纠结是否需要加 <code>.value</code>（比如某个函数参数的类型是 <code>Ref&lt;number&gt; | number</code>）来取值，可以使用 unref 来解包。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic1.zhimg.com/v2-be644447a3adfae139ccb07863b4fe30_r.jpg\"\n                     \n                ></p>\n<p><strong>2.3.3 重复使用已有 ref</strong></p>\n<p>将一个 ref 传递给 <code>ref()</code> 构造函数，它会原样返回。</p>\n<p>如果你的函数需要返回一个 ref，但是不确定参数的类型，可以直接 <code>return ref(param)</code>，如果是 ref 则会复用，不是则返回一个新的 ref。</p>\n<p><strong>2.3.4 可以使用 ES6 解构语法</strong></p>\n<p>解构一个值是 ref 的对象不会丢失响应式。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic3.zhimg.com/v2-fb83022e342cde7e017a54e710b8d6b6_r.jpg\"\n                     \n                ></p>\n<p><strong>2.3.5 this.$refs 的解决方案</strong></p>\n<p>在虚拟 DOM 补丁算法中，如果 VNode 的 <code>ref</code> 键对应于渲染上下文中的 ref，则 VNode 的相应元素或组件实例将被分配给该 ref 的值。</p>\n<p>由于是在虚拟 DOM 挂载 &#x2F; 打补丁过程中执行的，因此 ref 只会在初始渲染之后才获得赋值。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic4.zhimg.com/v2-c08e93238d9074b4e78284dcca4b94cb_r.jpg\"\n                     \n                ></p>\n<p><strong>2.4 toRefs</strong></p>\n<p>将响应式对象转换为普通对象，并对每个 property 对应的 value 转换成 ref。</p>\n<p>可以用来解决 <code>reactive</code> 或者 <code>props</code> 在解构的时候丢失响应式的问题。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic1.zhimg.com/v2-e1550002c1ead321c4dde992c78f944c_r.jpg\"\n                     \n                ></p>\n<p><strong>2.5 computed</strong></p>\n<p>接收 getter 函数，返回一个<strong>只读</strong>的响应式 ref 对象。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic1.zhimg.com/v2-b2e6f76a4f4265e182212f3dff7b8ab4_r.jpg\"\n                     \n                ></p>\n<p>如果参数是具有 get 和 set 函数的对象，返回的结果会是一个<strong>可写</strong>的响应式 ref 对象。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic4.zhimg.com/v2-c7dadc1902029f1fa98537e6c13744d3_r.jpg\"\n                     \n                ></p>\n<p><strong>2.6 watch</strong></p>\n<p>第一个参数接收数据源，可以是：</p>\n<ul>\n<li>getter 函数、ref</li>\n<li>包含上述两种类型的数组（也就是可以 watch 多个源，其中任一个变化都会触发回调）</li>\n</ul>\n<p>第二个参数是回调函数，在数据源变动的时候触发。</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic3.zhimg.com/v2-b0556885105bd72c7b0b6ea131af826a_r.jpg\"\n                     \n                ></p>\n<p><strong>2.6.1 停止观察</strong></p>\n<p><code>watch()</code> 返回一个停止观察的函数：</p>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic1.zhimg.com/v2-75541dc512f2994a4ac1719df0e23a64_r.jpg\"\n                     \n                ></p>\n<p>如果 <code>watch()</code> 是在一个组件的 <code>setup()</code> 或是生命周期函数中被调用的，那么该 watcher 会在当前组件被销毁时也一同被自动停</p>\n<p><strong>2.6.2 清理 effect</strong></p>\n<p>watcher 的回调会接收到的第三个参数是一个用来注册清理操作的函数。</p>\n<p>有时候当观察的数据源变化后，我们可能需要对之前所执行的副作用进行清理。举例来说，一个异步操作在完成之前数据就产生了变化，我们可能要撤销还在等待的前一个操作。</p>\n<p>调用这个函数可以注册一个清理函数，执行时机在：</p>\n<ul>\n<li>回调被下一次调用前</li>\n<li>watcher 被停止前</li>\n</ul>\n<p><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"https://pic4.zhimg.com/v2-f81961ecde2ab5d1edecc76cb51940b3_r.jpg\"\n                     \n                ></p>\n<h2 id=\"三、设计动机\"><a href=\"#三、设计动机\" class=\"headerlink\" title=\"三、设计动机\"></a>三、设计动机</h2><p><strong>3.1 从 Class API 到 Function API 再到 Composition API</strong></p>\n<p>我们可以在 Vue RFC 中看到最初的 <a class=\"link\"   href=\"https://link.zhihu.com/?target=https://github.com/vuejs/rfcs/pull/17\" >Class API <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 到 <a class=\"link\"   href=\"https://link.zhihu.com/?target=https://github.com/vuejs/rfcs/pull/42\" >Function-based Component API <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 取其 FP 的精华，再到被修订为 <a class=\"link\"   href=\"https://link.zhihu.com/?target=https://github.com/vuejs/rfcs/pull/78\" >Composition API <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a> 采用 Reactivity 的过程。</p>\n<p><strong>3.2 解决了什么问题</strong></p>\n<p>对比 2.x 对象式 API：</p>\n<ul>\n<li><p>极易复用。</p>\n</li>\n<li><p>状态可以从组件中拆出来放到组合函数中。</p>\n</li>\n<li><p>更清楚的逻辑。</p>\n</li>\n<li><p>代码可以按功能 &#x2F; 逻辑组织，而不是分散在各个选项中。</p>\n</li>\n<li><p>更好的 TypeScript 类型支持。</p>\n</li>\n<li><p>基于 Class 的 API 存在 TS 类型问题，而基于函数的 API 天然对类型推导很友好，因为 TS 对函数的参数、返回值和泛型的支持已经非常完备。</p>\n</li>\n<li><p>更小的打包体积。</p>\n</li>\n<li><p>基于函数的 API 每一个函数都可以作为 named ES export 被单独引入，这使得它们对 tree-shaking 非常友好。没有被使用的 API 的相关代码可以在最终打包时被移除。</p>\n</li>\n<li><p>同时，基于函数 API 所写的代码也有更好的压缩效率，因为所有的函数名和 setup 函数体内部的变量名都可以被压缩，但对象和 class 的属性 &#x2F; 方法名却不可以。</p>\n</li>\n</ul>\n<p><strong>3.3 对比 2.x 的复用模式</strong></p>\n<p>Vue 2.x 目前的 API 我们有一些常见的逻辑复用模式，包括：</p>\n<ul>\n<li>Mixins</li>\n<li>高阶组件 (Higher-order Components, aka HOCs)</li>\n<li>Renderless Components （基于 scoped slots &#x2F; 作用域插槽封装逻辑的组件）</li>\n</ul>\n<p>总体来说，以上这些模式存在以下问题：</p>\n<ul>\n<li><p>模版中的数据来源不清晰。</p>\n</li>\n<li><p>举例来说，当一个组件中使用了多个 mixin 的时候，光看模版会很难分清一个属性到底是来自哪一个 mixin。HOC 也有类似的问题。</p>\n</li>\n<li><p>使用 Composition API 只需要观察 setup 函数就可以知道数据的来源。</p>\n</li>\n<li><p>命名空间冲突。</p>\n</li>\n<li><p>由不同开发者开发的 mixin 无法保证不会正好用到一样的属性或是方法名。HOC 在注入的 props 中也存在类似问题。</p>\n</li>\n<li><p>组合函数在使用和返回给渲染层的两个阶段都可以做重命名的操作。</p>\n</li>\n<li><p>性能。</p>\n</li>\n<li><p>HOC 和 Renderless Components 都需要额外的组件实例嵌套来封装逻辑，导致无谓的性能开销。</p>\n</li>\n<li><p>组合函数没有创建额外的组件实例所带来的性能损耗。</p>\n</li>\n</ul>\n<p><strong>3.4 对比 React Hooks</strong></p>\n<p>Composition API 虽然借鉴了 React Hooks，两者具有同等的基于函数抽取和复用逻辑的能力，但是出于框架的性质两者在实现上是天差地别的。</p>\n<p>React Hooks 在每次组件渲染时都会调用，通过隐式地将状态挂载在当前的内部组件节点上，在下一次渲染时根据调用顺序取出。而 Vue 的 <code>setup()</code> 每个组件实例只会在初始化时调用一次 ，状态通过引用储存在 <code>setup()</code> 的闭包内。</p>\n<p>也就是说，Composition API 相比 React Hooks：</p>\n<ul>\n<li><p>整体上更符合 JavaScript 的直觉；</p>\n</li>\n<li><p>Mutable 写法。</p>\n</li>\n<li><p>不受调用顺序的限制，可以有条件地被调用；</p>\n</li>\n<li><p>Hooks 需要使用下标来获取对应的 state。</p>\n</li>\n<li><p>不会在后续更新时不断产生大量的内联函数而影响引擎优化或是导致 GC 压力；</p>\n</li>\n<li><p>Hooks 的每次渲染都是单独的闭包。</p>\n</li>\n<li><p>不需要总是使用 <code>useCallback</code> 来缓存传给子组件的回调以防止过度更新；</p>\n</li>\n<li><p>如果给子组件传了函数，每次渲染都会被当作新 props。</p>\n</li>\n<li><p>不需要担心传了错误的依赖数组给 <code>useEffect/useMemo/useCallback</code> 从而导致回调中使用了过期的值。</p>\n</li>\n<li><p>Vue 的依赖收集是全自动的，可以做到最小粒度的更新。</p>\n</li>\n</ul>\n<p>这都是基于 Vue 的响应式更新能力。</p>\n<p>有兴趣的同学可以通过下面的链接了解 React Hooks 的心智模型有多么沉重：</p>\n<p><a class=\"link\"   href=\"https://link.zhihu.com/?target=https://zh-hans.reactjs.org/docs/hooks-faq.html%23from-classes-to-hooks\" >Hooks FAQ <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://link.zhihu.com/?target=https://overreacted.io/zh-hans/making-setinterval-declarative-with-react-hooks/\" >使用 React Hooks 声明 setInterval <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://link.zhihu.com/?target=https://overreacted.io/zh-hans/a-complete-guide-to-useeffect/\" >useEffect 完整指南 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><strong>3.5 那么它有缺点吗？</strong></p>\n<p><strong>3.5.1 ref 和 reactive 的区别</strong></p>\n<table data-draft-node=\"block\" data-draft-type=\"table\" data-size=\"normal\" data-row-style=\"normal\"><tbody><tr><th>ref</th><th>reactive</th></tr><tr><td>可以处理原始值，也可以处理对象</td><td>只能处理对象</td></tr><tr><td>需要加 .value，需要考虑自动解包</td><td>不需要加 .value</td></tr><tr><td>有单独的类型</td><td>和普通的对象没有什么区别，无法直接通过类型判断是否是响应式</td></tr><tr><td>可以使用解构赋值</td><td>不可以使用解构赋值，会丢失响应式</td></tr><tr><td></td><td>需要使用箭头函数包装才能使用 watch</td></tr></tbody></table>\n\n<p><strong>3.5.2 考虑响应式和 .value</strong></p>\n<p>虽然写 Composition API 不会有 <code>useEffect</code> 的困扰，还能使用完全一致的生命周期钩子函数，但是此次 Vue 把响应式 API 暴露给我们，实际上在编写代码的时候，需要考虑是否是响应式、是否是 ref 和响应式丢失的问题，也会带来一定的心智负担。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p><strong>面向生命周期编程 vs 面向业务逻辑编程</strong><br>Composition API 带来了组件逻辑抽取和复用的优化，抽取逻辑会变得非常简单，所以我们不必只在需要复用逻辑的时候才抽取函数，也可以单纯为了更好地组织代码去抽取函数，以此避免每个逻辑任务的代码都被选项切成了多个碎片分散在各处。<br>当然如果组件足够简单，我们还是可以只使用 Options API，以原来的习惯写代码。<strong>我可以在 Vue 2 中使用吗？</strong><br>可以的，官方团队提供了可供 Vue 2 使用的插件： <a class=\"link\"   href=\"https://link.zhihu.com/?target=https://github.com/vuejs/composition-api\" >@vue&#x2F;composition-api <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a>。<br>另外他们也计划让 Composition API 在 Vue 2.7 原生支持。</p>\n<h2 id=\"参考\"><a href=\"#参考\" class=\"headerlink\" title=\"参考\"></a>参考</h2><p><a class=\"link\"   href=\"https://link.zhihu.com/?target=https://v3.cn.vuejs.org/guide/composition-api-introduction.html%23%25E4%25BB%2580%25E4%25B9%2588%25E6%2598%25AF%25E7%25BB%2584%25E5%2590%2588%25E5%25BC%258F-api\" >官方文档 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/68477600\" >Vue Function-based API RFC <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://link.zhihu.com/?target=https://www.bilibili.com/video/BV1x54y1V7H6/\" >VueUse 作者 Anthony Fu 分享可组合的 Vue <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"https://zhuanlan.zhihu.com/p/146097763\" >深入理解 Vue3 Reactivity API <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n"},{"title":"【一些有趣的问题】02，事件循环","date":"2021-02-25T02:15:54.000Z","_content":"\n`以下语句会如何输出？`\n```javascript\nconsole.log('start')\n\nsetTimeout(() => {\n  console.log('setTimeout')\n}, 0)\n\nnew Promise((resolve) => {\n  console.log('promise')\n  resolve()\n})\n  .then(() => {\n    console.log('then1')\n  })\n  .then(() => {\n    console.log('then2')\n  })\n\nconsole.log('end')\n```\n\n结果：打印 start promise end then1 then2 setTimeout\n\n原因：简单来说，JS 代码的执行顺序为：同步代码-->异步代码（微任务-->宏任务）\n\n分析：\n\n1. 打印 start\n\n2. setTimeout 加入消息队列\n\n3. new Promise 的同步部分执行，打印 promise，then 部分加入消息队列\n\n4. 打印 end\n\n5. 消息队列中先处理微任务 then 的部分，打印 then1，then2\n\n6. 消息队列处理宏任务 setTimeout，打印 setTimeout\n\n## `参考资料`\n> [并发模型与事件循环](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop)\n>\n> [深入理解 js 事件循环机制（浏览器篇）](http://lynnelv.github.io/js-event-loop-browser)\n","source":"_posts/someInterestingQuestions02.md","raw":"---\ntitle: 【一些有趣的问题】02，事件循环\ndate: 2021-02-25 10:15:54\ntags:\n  - JS\n  - 有趣的问题\ncategories:\n  - 一些有趣的问题\n---\n\n`以下语句会如何输出？`\n```javascript\nconsole.log('start')\n\nsetTimeout(() => {\n  console.log('setTimeout')\n}, 0)\n\nnew Promise((resolve) => {\n  console.log('promise')\n  resolve()\n})\n  .then(() => {\n    console.log('then1')\n  })\n  .then(() => {\n    console.log('then2')\n  })\n\nconsole.log('end')\n```\n\n结果：打印 start promise end then1 then2 setTimeout\n\n原因：简单来说，JS 代码的执行顺序为：同步代码-->异步代码（微任务-->宏任务）\n\n分析：\n\n1. 打印 start\n\n2. setTimeout 加入消息队列\n\n3. new Promise 的同步部分执行，打印 promise，then 部分加入消息队列\n\n4. 打印 end\n\n5. 消息队列中先处理微任务 then 的部分，打印 then1，then2\n\n6. 消息队列处理宏任务 setTimeout，打印 setTimeout\n\n## `参考资料`\n> [并发模型与事件循环](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop)\n>\n> [深入理解 js 事件循环机制（浏览器篇）](http://lynnelv.github.io/js-event-loop-browser)\n","slug":"someInterestingQuestions02","published":1,"updated":"2024-07-14T01:09:19.916Z","comments":1,"layout":"post","photos":[],"_id":"clyliw096001ktch85ec592lv","content":"<p><code>以下语句会如何输出？</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;then1&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;then2&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure></div>\n\n<p>结果：打印 start promise end then1 then2 setTimeout</p>\n<p>原因：简单来说，JS 代码的执行顺序为：同步代码–&gt;异步代码（微任务–&gt;宏任务）</p>\n<p>分析：</p>\n<ol>\n<li><p>打印 start</p>\n</li>\n<li><p>setTimeout 加入消息队列</p>\n</li>\n<li><p>new Promise 的同步部分执行，打印 promise，then 部分加入消息队列</p>\n</li>\n<li><p>打印 end</p>\n</li>\n<li><p>消息队列中先处理微任务 then 的部分，打印 then1，then2</p>\n</li>\n<li><p>消息队列处理宏任务 setTimeout，打印 setTimeout</p>\n</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2><blockquote>\n<p><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" >并发模型与事件循环 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"http://lynnelv.github.io/js-event-loop-browser\" >深入理解 js 事件循环机制（浏览器篇） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n</blockquote>\n","excerpt":"","more":"<p><code>以下语句会如何输出？</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;start&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;setTimeout&#x27;</span>)</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">new</span> <span class=\"title class_\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;promise&#x27;</span>)</span><br><span class=\"line\">  <span class=\"title function_\">resolve</span>()</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;then1&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .<span class=\"title function_\">then</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;then2&#x27;</span>)</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"string\">&#x27;end&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>结果：打印 start promise end then1 then2 setTimeout</p>\n<p>原因：简单来说，JS 代码的执行顺序为：同步代码–&gt;异步代码（微任务–&gt;宏任务）</p>\n<p>分析：</p>\n<ol>\n<li><p>打印 start</p>\n</li>\n<li><p>setTimeout 加入消息队列</p>\n</li>\n<li><p>new Promise 的同步部分执行，打印 promise，then 部分加入消息队列</p>\n</li>\n<li><p>打印 end</p>\n</li>\n<li><p>消息队列中先处理微任务 then 的部分，打印 then1，then2</p>\n</li>\n<li><p>消息队列处理宏任务 setTimeout，打印 setTimeout</p>\n</li>\n</ol>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2><blockquote>\n<p><a class=\"link\"   href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/EventLoop\" >并发模型与事件循环 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n<p><a class=\"link\"   href=\"http://lynnelv.github.io/js-event-loop-browser\" >深入理解 js 事件循环机制（浏览器篇） <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></p>\n</blockquote>\n"},{"title":"【一些有趣的问题】03，浮点数","date":"2021-03-06T07:15:54.000Z","_content":"\n`以下语句会如何输出？`\n```javascript\n0.1 + 0.2 == 0.3；\n// false\n\n1 - 0.9 == 0.1;\n// false\n```\n在 JS 中只有一种数值类型，以 64 位表示的双精度浮点类型\n\n`解决方法`\n```javascript\n(0.1 + 0.2).toFixed(10) == 0.3;\n// true\n\n(1 - 0.9).toFixed(10) == 0.1;\n// true\n```\n\n`可以把运算封装成方法`\n```javascript\n//加法函数，用来得到精确的加法结果\n//说明：javascript 的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。\n//调用：accAdd(arg1,arg2)\n//返回值：arg1 加上 arg2 的精确结果\nfunction accAdd(arg1,arg2){\n  var r1,r2,m;\n  try{r1=arg1.toString().split(\".\")[1].length}catch(e){r1=0}\n  try{r2=arg2.toString().split(\".\")[1].length}catch(e){r2=0}\n  m=Math.pow(10,Math.max(r1,r2))\n  return (arg1*m+arg2*m)/m\n}\n//给 Number 类型增加一个 add 方法，调用起来更加方便。\nNumber.prototype.add = function (arg){\n  return accAdd(arg,this);\n}\n \n//减法函数，用来得到精确的减法结果\n//说明：javascript 的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的减法结果。\n//调用：accSub(arg1,arg2)\n//返回值：arg1 减去 arg2 的精确结果\nfunction accSub(arg1,arg2){\n  var r1,r2,m,n;\n  try{r1=arg1.toString().split(\".\")[1].length}catch(e){r1=0}\n  try{r2=arg2.toString().split(\".\")[1].length}catch(e){r2=0}\n  m=Math.pow(10,Math.max(r1,r2));\n  //last modify by deeka\n  //动态控制精度长度\n  n=(r1>=r2)?r1:r2;\n  return ((arg1*m-arg2*m)/m).toFixed(n);\n}\n \n//除法函数，用来得到精确的除法结果\n//说明：javascript 的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。\n//调用：accDiv(arg1,arg2)\n//返回值：arg1 除以 arg2 的精确结果\nfunction accDiv(arg1,arg2){\n  var t1=0,t2=0,r1,r2;\n  try{t1=arg1.toString().split(\".\")[1].length}catch(e){}\n  try{t2=arg2.toString().split(\".\")[1].length}catch(e){}\n  with(Math){\n    r1=Number(arg1.toString().replace(\".\",\"\"))\n    r2=Number(arg2.toString().replace(\".\",\"\"))\n    return (r1/r2)*pow(10,t2-t1);\n  }\n}\n//给 Number 类型增加一个 div 方法，调用起来更加方便。\nNumber.prototype.div = function (arg){\n  return accDiv(this, arg);\n}\n \n//乘法函数，用来得到精确的乘法结果\n//说明：javascript 的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。\n//调用：accMul(arg1,arg2)\n//返回值：arg1 乘以 arg2 的精确结果\nfunction accMul(arg1,arg2) {\n  var m=0,s1=arg1.toString(),s2=arg2.toString();\n  try{m+=s1.split(\".\")[1].length}catch(e){}\n  try{m+=s2.split(\".\")[1].length}catch(e){}\n  return  Number(s1.replace(\".\",\"\"))*Number(s2.replace(\".\",\"\"))/Math.pow(10,m)\n}\n//给 Number 类型增加一个 mul 方法，调用起来更加方便。\nNumber.prototype.mul = function (arg){\n  return accMul(arg, this);\n}\n<br>//验证一下：\nconsole.log(accAdd(1.79, 0.12));  //1.91\nconsole.log(accSub(2.01, 0.12));  //1.89\nconsole.log(accDiv(0.69, 10));    //0.069<br>console.log(accMul(1.01, 1.3));   //1.313　　\n```\n\n## `参考资料`\n- [浅谈 JavaScript 浮点数及其运算](https://www.cnblogs.com/ppforever/p/5011660.html)\n- [JavaScript 数字\n](https://www.w3school.com.cn/js/js_numbers.asp)","source":"_posts/someInterestingQuestions03.md","raw":"---\ntitle: 【一些有趣的问题】03，浮点数\ndate: 2021-03-06 15:15:54\ntags:\n  - JS\n  - 有趣的问题\ncategories:\n  - 一些有趣的问题\n---\n\n`以下语句会如何输出？`\n```javascript\n0.1 + 0.2 == 0.3；\n// false\n\n1 - 0.9 == 0.1;\n// false\n```\n在 JS 中只有一种数值类型，以 64 位表示的双精度浮点类型\n\n`解决方法`\n```javascript\n(0.1 + 0.2).toFixed(10) == 0.3;\n// true\n\n(1 - 0.9).toFixed(10) == 0.1;\n// true\n```\n\n`可以把运算封装成方法`\n```javascript\n//加法函数，用来得到精确的加法结果\n//说明：javascript 的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。\n//调用：accAdd(arg1,arg2)\n//返回值：arg1 加上 arg2 的精确结果\nfunction accAdd(arg1,arg2){\n  var r1,r2,m;\n  try{r1=arg1.toString().split(\".\")[1].length}catch(e){r1=0}\n  try{r2=arg2.toString().split(\".\")[1].length}catch(e){r2=0}\n  m=Math.pow(10,Math.max(r1,r2))\n  return (arg1*m+arg2*m)/m\n}\n//给 Number 类型增加一个 add 方法，调用起来更加方便。\nNumber.prototype.add = function (arg){\n  return accAdd(arg,this);\n}\n \n//减法函数，用来得到精确的减法结果\n//说明：javascript 的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的减法结果。\n//调用：accSub(arg1,arg2)\n//返回值：arg1 减去 arg2 的精确结果\nfunction accSub(arg1,arg2){\n  var r1,r2,m,n;\n  try{r1=arg1.toString().split(\".\")[1].length}catch(e){r1=0}\n  try{r2=arg2.toString().split(\".\")[1].length}catch(e){r2=0}\n  m=Math.pow(10,Math.max(r1,r2));\n  //last modify by deeka\n  //动态控制精度长度\n  n=(r1>=r2)?r1:r2;\n  return ((arg1*m-arg2*m)/m).toFixed(n);\n}\n \n//除法函数，用来得到精确的除法结果\n//说明：javascript 的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。\n//调用：accDiv(arg1,arg2)\n//返回值：arg1 除以 arg2 的精确结果\nfunction accDiv(arg1,arg2){\n  var t1=0,t2=0,r1,r2;\n  try{t1=arg1.toString().split(\".\")[1].length}catch(e){}\n  try{t2=arg2.toString().split(\".\")[1].length}catch(e){}\n  with(Math){\n    r1=Number(arg1.toString().replace(\".\",\"\"))\n    r2=Number(arg2.toString().replace(\".\",\"\"))\n    return (r1/r2)*pow(10,t2-t1);\n  }\n}\n//给 Number 类型增加一个 div 方法，调用起来更加方便。\nNumber.prototype.div = function (arg){\n  return accDiv(this, arg);\n}\n \n//乘法函数，用来得到精确的乘法结果\n//说明：javascript 的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。\n//调用：accMul(arg1,arg2)\n//返回值：arg1 乘以 arg2 的精确结果\nfunction accMul(arg1,arg2) {\n  var m=0,s1=arg1.toString(),s2=arg2.toString();\n  try{m+=s1.split(\".\")[1].length}catch(e){}\n  try{m+=s2.split(\".\")[1].length}catch(e){}\n  return  Number(s1.replace(\".\",\"\"))*Number(s2.replace(\".\",\"\"))/Math.pow(10,m)\n}\n//给 Number 类型增加一个 mul 方法，调用起来更加方便。\nNumber.prototype.mul = function (arg){\n  return accMul(arg, this);\n}\n<br>//验证一下：\nconsole.log(accAdd(1.79, 0.12));  //1.91\nconsole.log(accSub(2.01, 0.12));  //1.89\nconsole.log(accDiv(0.69, 10));    //0.069<br>console.log(accMul(1.01, 1.3));   //1.313　　\n```\n\n## `参考资料`\n- [浅谈 JavaScript 浮点数及其运算](https://www.cnblogs.com/ppforever/p/5011660.html)\n- [JavaScript 数字\n](https://www.w3school.com.cn/js/js_numbers.asp)","slug":"someInterestingQuestions03","published":1,"updated":"2024-07-14T01:09:19.918Z","comments":1,"layout":"post","photos":[],"_id":"clyliw09h003gtch8azvz2tpd","content":"<p><code>以下语句会如何输出？</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> == <span class=\"number\">0.3</span>；</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> - <span class=\"number\">0.9</span> == <span class=\"number\">0.1</span>;</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure></div>\n<p>在 JS 中只有一种数值类型，以 64 位表示的双精度浮点类型</p>\n<p><code>解决方法</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">10</span>) == <span class=\"number\">0.3</span>;</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">1</span> - <span class=\"number\">0.9</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">10</span>) == <span class=\"number\">0.1</span>;</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure></div>\n\n<p><code>可以把运算封装成方法</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加法函数，用来得到精确的加法结果</span></span><br><span class=\"line\"><span class=\"comment\">//说明：javascript 的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。</span></span><br><span class=\"line\"><span class=\"comment\">//调用：accAdd(arg1,arg2)</span></span><br><span class=\"line\"><span class=\"comment\">//返回值：arg1 加上 arg2 的精确结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">accAdd</span>(<span class=\"params\">arg1,arg2</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> r1,r2,m;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;r1=arg1.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;r1=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;r2=arg2.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;r2=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  m=<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>,<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(r1,r2))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (arg1*m+arg2*m)/m</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//给 Number 类型增加一个 add 方法，调用起来更加方便。</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">add</span> = <span class=\"keyword\">function</span> (<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">accAdd</span>(arg,<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//减法函数，用来得到精确的减法结果</span></span><br><span class=\"line\"><span class=\"comment\">//说明：javascript 的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的减法结果。</span></span><br><span class=\"line\"><span class=\"comment\">//调用：accSub(arg1,arg2)</span></span><br><span class=\"line\"><span class=\"comment\">//返回值：arg1 减去 arg2 的精确结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">accSub</span>(<span class=\"params\">arg1,arg2</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> r1,r2,m,n;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;r1=arg1.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;r1=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;r2=arg2.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;r2=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  m=<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>,<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(r1,r2));</span><br><span class=\"line\">  <span class=\"comment\">//last modify by deeka</span></span><br><span class=\"line\">  <span class=\"comment\">//动态控制精度长度</span></span><br><span class=\"line\">  n=(r1&gt;=r2)?<span class=\"attr\">r1</span>:r2;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((arg1*m-arg2*m)/m).<span class=\"title function_\">toFixed</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//除法函数，用来得到精确的除法结果</span></span><br><span class=\"line\"><span class=\"comment\">//说明：javascript 的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。</span></span><br><span class=\"line\"><span class=\"comment\">//调用：accDiv(arg1,arg2)</span></span><br><span class=\"line\"><span class=\"comment\">//返回值：arg1 除以 arg2 的精确结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">accDiv</span>(<span class=\"params\">arg1,arg2</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t1=<span class=\"number\">0</span>,t2=<span class=\"number\">0</span>,r1,r2;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;t1=arg1.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;t2=arg2.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">with</span>(<span class=\"params\"><span class=\"built_in\">Math</span></span>)&#123;</span><br><span class=\"line\">    r1=<span class=\"title class_\">Number</span>(arg1.<span class=\"title function_\">toString</span>().<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">    r2=<span class=\"title class_\">Number</span>(arg2.<span class=\"title function_\">toString</span>().<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (r1/r2)*<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>,t2-t1);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//给 Number 类型增加一个 div 方法，调用起来更加方便。</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">div</span> = <span class=\"keyword\">function</span> (<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">accDiv</span>(<span class=\"variable language_\">this</span>, arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//乘法函数，用来得到精确的乘法结果</span></span><br><span class=\"line\"><span class=\"comment\">//说明：javascript 的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。</span></span><br><span class=\"line\"><span class=\"comment\">//调用：accMul(arg1,arg2)</span></span><br><span class=\"line\"><span class=\"comment\">//返回值：arg1 乘以 arg2 的精确结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">accMul</span>(<span class=\"params\">arg1,arg2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> m=<span class=\"number\">0</span>,s1=arg1.<span class=\"title function_\">toString</span>(),s2=arg2.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;m+=s1.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;m+=s2.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>  <span class=\"title class_\">Number</span>(s1.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;&quot;</span>))*<span class=\"title class_\">Number</span>(s2.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;&quot;</span>))/<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>,m)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//给 Number 类型增加一个 mul 方法，调用起来更加方便。</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mul</span> = <span class=\"keyword\">function</span> (<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">accMul</span>(arg, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;br&gt;<span class=\"comment\">//验证一下：</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">accAdd</span>(<span class=\"number\">1.79</span>, <span class=\"number\">0.12</span>));  <span class=\"comment\">//1.91</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">accSub</span>(<span class=\"number\">2.01</span>, <span class=\"number\">0.12</span>));  <span class=\"comment\">//1.89</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">accDiv</span>(<span class=\"number\">0.69</span>, <span class=\"number\">10</span>));    <span class=\"comment\">//0.069&lt;br&gt;console.log(accMul(1.01, 1.3));   //1.313　　</span></span><br></pre></td></tr></table></figure></div>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2><ul>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/ppforever/p/5011660.html\" >浅谈 JavaScript 浮点数及其运算 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.w3school.com.cn/js/js_numbers.asp\" >JavaScript 数字\n <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n","excerpt":"","more":"<p><code>以下语句会如何输出？</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">0.1</span> + <span class=\"number\">0.2</span> == <span class=\"number\">0.3</span>；</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">1</span> - <span class=\"number\">0.9</span> == <span class=\"number\">0.1</span>;</span><br><span class=\"line\"><span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n<p>在 JS 中只有一种数值类型，以 64 位表示的双精度浮点类型</p>\n<p><code>解决方法</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">10</span>) == <span class=\"number\">0.3</span>;</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"number\">1</span> - <span class=\"number\">0.9</span>).<span class=\"title function_\">toFixed</span>(<span class=\"number\">10</span>) == <span class=\"number\">0.1</span>;</span><br><span class=\"line\"><span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n<p><code>可以把运算封装成方法</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//加法函数，用来得到精确的加法结果</span></span><br><span class=\"line\"><span class=\"comment\">//说明：javascript 的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的加法结果。</span></span><br><span class=\"line\"><span class=\"comment\">//调用：accAdd(arg1,arg2)</span></span><br><span class=\"line\"><span class=\"comment\">//返回值：arg1 加上 arg2 的精确结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">accAdd</span>(<span class=\"params\">arg1,arg2</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> r1,r2,m;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;r1=arg1.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;r1=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;r2=arg2.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;r2=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  m=<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>,<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(r1,r2))</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (arg1*m+arg2*m)/m</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//给 Number 类型增加一个 add 方法，调用起来更加方便。</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">add</span> = <span class=\"keyword\">function</span> (<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">accAdd</span>(arg,<span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//减法函数，用来得到精确的减法结果</span></span><br><span class=\"line\"><span class=\"comment\">//说明：javascript 的加法结果会有误差，在两个浮点数相加的时候会比较明显。这个函数返回较为精确的减法结果。</span></span><br><span class=\"line\"><span class=\"comment\">//调用：accSub(arg1,arg2)</span></span><br><span class=\"line\"><span class=\"comment\">//返回值：arg1 减去 arg2 的精确结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">accSub</span>(<span class=\"params\">arg1,arg2</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> r1,r2,m,n;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;r1=arg1.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;r1=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;r2=arg2.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;r2=<span class=\"number\">0</span>&#125;</span><br><span class=\"line\">  m=<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>,<span class=\"title class_\">Math</span>.<span class=\"title function_\">max</span>(r1,r2));</span><br><span class=\"line\">  <span class=\"comment\">//last modify by deeka</span></span><br><span class=\"line\">  <span class=\"comment\">//动态控制精度长度</span></span><br><span class=\"line\">  n=(r1&gt;=r2)?<span class=\"attr\">r1</span>:r2;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> ((arg1*m-arg2*m)/m).<span class=\"title function_\">toFixed</span>(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//除法函数，用来得到精确的除法结果</span></span><br><span class=\"line\"><span class=\"comment\">//说明：javascript 的除法结果会有误差，在两个浮点数相除的时候会比较明显。这个函数返回较为精确的除法结果。</span></span><br><span class=\"line\"><span class=\"comment\">//调用：accDiv(arg1,arg2)</span></span><br><span class=\"line\"><span class=\"comment\">//返回值：arg1 除以 arg2 的精确结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">accDiv</span>(<span class=\"params\">arg1,arg2</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> t1=<span class=\"number\">0</span>,t2=<span class=\"number\">0</span>,r1,r2;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;t1=arg1.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;t2=arg2.<span class=\"title function_\">toString</span>().<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\">  <span class=\"title function_\">with</span>(<span class=\"params\"><span class=\"built_in\">Math</span></span>)&#123;</span><br><span class=\"line\">    r1=<span class=\"title class_\">Number</span>(arg1.<span class=\"title function_\">toString</span>().<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">    r2=<span class=\"title class_\">Number</span>(arg2.<span class=\"title function_\">toString</span>().<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;&quot;</span>))</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (r1/r2)*<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>,t2-t1);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//给 Number 类型增加一个 div 方法，调用起来更加方便。</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">div</span> = <span class=\"keyword\">function</span> (<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">accDiv</span>(<span class=\"variable language_\">this</span>, arg);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"comment\">//乘法函数，用来得到精确的乘法结果</span></span><br><span class=\"line\"><span class=\"comment\">//说明：javascript 的乘法结果会有误差，在两个浮点数相乘的时候会比较明显。这个函数返回较为精确的乘法结果。</span></span><br><span class=\"line\"><span class=\"comment\">//调用：accMul(arg1,arg2)</span></span><br><span class=\"line\"><span class=\"comment\">//返回值：arg1 乘以 arg2 的精确结果</span></span><br><span class=\"line\"><span class=\"keyword\">function</span> <span class=\"title function_\">accMul</span>(<span class=\"params\">arg1,arg2</span>) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> m=<span class=\"number\">0</span>,s1=arg1.<span class=\"title function_\">toString</span>(),s2=arg2.<span class=\"title function_\">toString</span>();</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;m+=s1.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">try</span>&#123;m+=s2.<span class=\"title function_\">split</span>(<span class=\"string\">&quot;.&quot;</span>)[<span class=\"number\">1</span>].<span class=\"property\">length</span>&#125;<span class=\"keyword\">catch</span>(e)&#123;&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span>  <span class=\"title class_\">Number</span>(s1.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;&quot;</span>))*<span class=\"title class_\">Number</span>(s2.<span class=\"title function_\">replace</span>(<span class=\"string\">&quot;.&quot;</span>,<span class=\"string\">&quot;&quot;</span>))/<span class=\"title class_\">Math</span>.<span class=\"title function_\">pow</span>(<span class=\"number\">10</span>,m)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">//给 Number 类型增加一个 mul 方法，调用起来更加方便。</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"property\"><span class=\"keyword\">prototype</span></span>.<span class=\"property\">mul</span> = <span class=\"keyword\">function</span> (<span class=\"params\">arg</span>)&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"title function_\">accMul</span>(arg, <span class=\"variable language_\">this</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;br&gt;<span class=\"comment\">//验证一下：</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">accAdd</span>(<span class=\"number\">1.79</span>, <span class=\"number\">0.12</span>));  <span class=\"comment\">//1.91</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">accSub</span>(<span class=\"number\">2.01</span>, <span class=\"number\">0.12</span>));  <span class=\"comment\">//1.89</span></span><br><span class=\"line\"><span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(<span class=\"title function_\">accDiv</span>(<span class=\"number\">0.69</span>, <span class=\"number\">10</span>));    <span class=\"comment\">//0.069&lt;br&gt;console.log(accMul(1.01, 1.3));   //1.313　　</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2><ul>\n<li><a class=\"link\"   href=\"https://www.cnblogs.com/ppforever/p/5011660.html\" >浅谈 JavaScript 浮点数及其运算 <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n<li><a class=\"link\"   href=\"https://www.w3school.com.cn/js/js_numbers.asp\" >JavaScript 数字\n <i class=\"fa-regular fa-arrow-up-right-from-square fa-sm\"></i></a></li>\n</ul>\n"},{"title":"【一些有趣的问题】04，逗号运算符","date":"2021-03-14T14:15:54.000Z","_content":"\n<!-- YCTODO -->\n\n`以下语句会如何输出？`\n```javascript\nfor(let i=0,j=0;i<6,j<5,i++,j++){\n  console.log(i,j);\n}\n```\n在\n## `参考资料`\n","source":"_posts/someInterestingQuestions04.md","raw":"---\ntitle: 【一些有趣的问题】04，逗号运算符\ndate: 2021-03-14 22:15:54\ntags:\n  - JS\n  - 有趣的问题\ncategories:\n  - 一些有趣的问题\n---\n\n<!-- YCTODO -->\n\n`以下语句会如何输出？`\n```javascript\nfor(let i=0,j=0;i<6,j<5,i++,j++){\n  console.log(i,j);\n}\n```\n在\n## `参考资料`\n","slug":"someInterestingQuestions04","published":1,"updated":"2024-07-14T01:09:19.919Z","comments":1,"layout":"post","photos":[],"_id":"clyliw09i003htch87481bcpg","content":"<!-- YCTODO -->\n\n<p><code>以下语句会如何输出？</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>,j&lt;<span class=\"number\">5</span>,i++,j++)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i,j);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></div>\n<p>在</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2>","excerpt":"","more":"<!-- YCTODO -->\n\n<p><code>以下语句会如何输出？</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(<span class=\"keyword\">let</span> i=<span class=\"number\">0</span>,j=<span class=\"number\">0</span>;i&lt;<span class=\"number\">6</span>,j&lt;<span class=\"number\">5</span>,i++,j++)&#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i,j);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>在</p>\n<h2 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a><code>参考资料</code></h2>"},{"title":"【一些有趣的问题】05，for..in 与 for..of","date":"2021-03-20T03:15:54.000Z","_content":"\n`以下语句会如何输出？`\n```javascript\nlet arr = [3, 5, 7];\narr.foo = \"hello\";\n// 此时 arr 对象的结构：[3,5,7,foo: 'hello']\n\nfor (let i in arr) {\n  console.log(i); // 输出 \"0\", \"1\", \"2\", \"foo\"\n}\n\nfor (let i of arr) {\n  console.log(i); // 输出 \"3\", \"5\", \"7\"\n}\n\n// 注意 for...of 的输出没有出现 \"hello\"\n\n```\n`for...in `\n- 循环一个指定的变量来循环一个对象所有可枚举的属性。JavaScript 会为每一个不同的属性执行指定的语句。\n- 深入一点\n\n`for...of `\n- 在可迭代对象（包括 Array、Map、Set、arguments 等等）上创建了一个循环，对值的每一个独特属性调用一次迭代。\n- 首先会在向访问对象请求一个迭代器对象，然后通过调用迭代器对象的 next() 方法来遍历所有返回值。\n\n`Symbol.iterator`\n-  为每一个对象定义了默认的迭代器。该迭代器可以被 for...of 循环使用。\n- 可以通过 Symbol.iterator 来访问可迭代对象的@@iterator 属性\n```javascript\nvar myArray = [1,2,3];\nvar it = myArray[Symbol.iterator]();\n```\n","source":"_posts/someInterestingQuestions05.md","raw":"---\ntitle: 【一些有趣的问题】05，for..in 与 for..of\ndate: 2021-03-20 11:15:54\ntags:\n  - JS\n  - 有趣的问题\ncategories:\n  - 一些有趣的问题\n---\n\n`以下语句会如何输出？`\n```javascript\nlet arr = [3, 5, 7];\narr.foo = \"hello\";\n// 此时 arr 对象的结构：[3,5,7,foo: 'hello']\n\nfor (let i in arr) {\n  console.log(i); // 输出 \"0\", \"1\", \"2\", \"foo\"\n}\n\nfor (let i of arr) {\n  console.log(i); // 输出 \"3\", \"5\", \"7\"\n}\n\n// 注意 for...of 的输出没有出现 \"hello\"\n\n```\n`for...in `\n- 循环一个指定的变量来循环一个对象所有可枚举的属性。JavaScript 会为每一个不同的属性执行指定的语句。\n- 深入一点\n\n`for...of `\n- 在可迭代对象（包括 Array、Map、Set、arguments 等等）上创建了一个循环，对值的每一个独特属性调用一次迭代。\n- 首先会在向访问对象请求一个迭代器对象，然后通过调用迭代器对象的 next() 方法来遍历所有返回值。\n\n`Symbol.iterator`\n-  为每一个对象定义了默认的迭代器。该迭代器可以被 for...of 循环使用。\n- 可以通过 Symbol.iterator 来访问可迭代对象的@@iterator 属性\n```javascript\nvar myArray = [1,2,3];\nvar it = myArray[Symbol.iterator]();\n```\n","slug":"someInterestingQuestions05","published":1,"updated":"2024-07-14T01:09:19.920Z","comments":1,"layout":"post","photos":[],"_id":"clyliw09i003jtch8bznehp14","content":"<p><code>以下语句会如何输出？</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\">arr.<span class=\"property\">foo</span> = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 此时 arr 对象的结构：[3,5,7,foo: &#x27;hello&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 输出 &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;foo&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 输出 &quot;3&quot;, &quot;5&quot;, &quot;7&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意 for...of 的输出没有出现 &quot;hello&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure></div>\n<p><code>for...in </code></p>\n<ul>\n<li>循环一个指定的变量来循环一个对象所有可枚举的属性。JavaScript 会为每一个不同的属性执行指定的语句。</li>\n<li>深入一点</li>\n</ul>\n<p><code>for...of </code></p>\n<ul>\n<li>在可迭代对象（包括 Array、Map、Set、arguments 等等）上创建了一个循环，对值的每一个独特属性调用一次迭代。</li>\n<li>首先会在向访问对象请求一个迭代器对象，然后通过调用迭代器对象的 next() 方法来遍历所有返回值。</li>\n</ul>\n<p><code>Symbol.iterator</code></p>\n<ul>\n<li>为每一个对象定义了默认的迭代器。该迭代器可以被 for…of 循环使用。</li>\n<li>可以通过 Symbol.iterator 来访问可迭代对象的@@iterator 属性<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myArray = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> it = myArray[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]();</span><br></pre></td></tr></table></figure></div></li>\n</ul>\n","excerpt":"","more":"<p><code>以下语句会如何输出？</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">5</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\">arr.<span class=\"property\">foo</span> = <span class=\"string\">&quot;hello&quot;</span>;</span><br><span class=\"line\"><span class=\"comment\">// 此时 arr 对象的结构：[3,5,7,foo: &#x27;hello&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">in</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 输出 &quot;0&quot;, &quot;1&quot;, &quot;2&quot;, &quot;foo&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i <span class=\"keyword\">of</span> arr) &#123;</span><br><span class=\"line\">  <span class=\"variable language_\">console</span>.<span class=\"title function_\">log</span>(i); <span class=\"comment\">// 输出 &quot;3&quot;, &quot;5&quot;, &quot;7&quot;</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意 for...of 的输出没有出现 &quot;hello&quot;</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p><code>for...in </code></p>\n<ul>\n<li>循环一个指定的变量来循环一个对象所有可枚举的属性。JavaScript 会为每一个不同的属性执行指定的语句。</li>\n<li>深入一点</li>\n</ul>\n<p><code>for...of </code></p>\n<ul>\n<li>在可迭代对象（包括 Array、Map、Set、arguments 等等）上创建了一个循环，对值的每一个独特属性调用一次迭代。</li>\n<li>首先会在向访问对象请求一个迭代器对象，然后通过调用迭代器对象的 next() 方法来遍历所有返回值。</li>\n</ul>\n<p><code>Symbol.iterator</code></p>\n<ul>\n<li>为每一个对象定义了默认的迭代器。该迭代器可以被 for…of 循环使用。</li>\n<li>可以通过 Symbol.iterator 来访问可迭代对象的@@iterator 属性<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> myArray = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">var</span> it = myArray[<span class=\"title class_\">Symbol</span>.<span class=\"property\">iterator</span>]();</span><br></pre></td></tr></table></figure></li>\n</ul>\n"},{"title":"【一些有趣的问题】06，进制转换","date":"2021-03-27T06:15:54.000Z","_content":"\n`以下语句会如何输出？`\n```javascript\n022 - 017\n// 3，18 - 15 = 3\n\n018 - 045\n// -19，18 - 37 = -19\n```\n在 JS 中，在 Number 类型前加 0 会转换为 8 进制，如果原来的值位上有大于 8 的数，则不会进行转换。\n\n在 JS 中，有几种方法来进行进制转换，但只能通过 10 进制中转，即 10 进制转其他进制或者其他进制转 10 进制。\n```javascript\n// 0x 表示十六进制，但是 js 会强制转换为十进制来运算，0xa == 10\nvar a = 0xa;\n// 0 开头表示八进制，同样强制转换为十进制来运算 010 = 8\nvar b = 010;\n\n// Number.parseInt 方法把字符串（只能由字母和数字组成）由低进制转高进制，如二进制转八进制，但是八进制不能转二进制，radix 表示进制，取值 2~36，返回一个字符串。\nNumber.parseInt(string,radix)\nNumber.parseInt('0101',2) // 5\nNumber.parseInt('0101',8) // 65\n\n// Number.toString 方法将十进制数字转换为任意进制的字符串形式，同样，radix 表示进制，取值 2~36\nNumber.toString(radix)\n(10).toString(2) //\"1010\" 转 2 进制\n(10).toString(8) //\"12\" 转 8 进制\n(10).toString(16) //\"a\" 转 16 进制\n(1000).toString(36) //\"rs\" 转 36 进制\n```","source":"_posts/someInterestingQuestions06.md","raw":"---\ntitle: 【一些有趣的问题】06，进制转换\ndate: 2021-03-27 14:15:54\ntags:\n  - JS\n  - 有趣的问题\ncategories:\n  - 一些有趣的问题\n---\n\n`以下语句会如何输出？`\n```javascript\n022 - 017\n// 3，18 - 15 = 3\n\n018 - 045\n// -19，18 - 37 = -19\n```\n在 JS 中，在 Number 类型前加 0 会转换为 8 进制，如果原来的值位上有大于 8 的数，则不会进行转换。\n\n在 JS 中，有几种方法来进行进制转换，但只能通过 10 进制中转，即 10 进制转其他进制或者其他进制转 10 进制。\n```javascript\n// 0x 表示十六进制，但是 js 会强制转换为十进制来运算，0xa == 10\nvar a = 0xa;\n// 0 开头表示八进制，同样强制转换为十进制来运算 010 = 8\nvar b = 010;\n\n// Number.parseInt 方法把字符串（只能由字母和数字组成）由低进制转高进制，如二进制转八进制，但是八进制不能转二进制，radix 表示进制，取值 2~36，返回一个字符串。\nNumber.parseInt(string,radix)\nNumber.parseInt('0101',2) // 5\nNumber.parseInt('0101',8) // 65\n\n// Number.toString 方法将十进制数字转换为任意进制的字符串形式，同样，radix 表示进制，取值 2~36\nNumber.toString(radix)\n(10).toString(2) //\"1010\" 转 2 进制\n(10).toString(8) //\"12\" 转 8 进制\n(10).toString(16) //\"a\" 转 16 进制\n(1000).toString(36) //\"rs\" 转 36 进制\n```","slug":"someInterestingQuestions06","published":1,"updated":"2024-07-14T01:09:19.921Z","comments":1,"layout":"post","photos":[],"_id":"clyliw09j003ltch8g7uj9m72","content":"<p><code>以下语句会如何输出？</code></p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">022</span> - <span class=\"number\">017</span></span><br><span class=\"line\"><span class=\"comment\">// 3，18 - 15 = 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">018</span> - <span class=\"number\">045</span></span><br><span class=\"line\"><span class=\"comment\">// -19，18 - 37 = -19</span></span><br></pre></td></tr></table></figure></div>\n<p>在 JS 中，在 Number 类型前加 0 会转换为 8 进制，如果原来的值位上有大于 8 的数，则不会进行转换。</p>\n<p>在 JS 中，有几种方法来进行进制转换，但只能通过 10 进制中转，即 10 进制转其他进制或者其他进制转 10 进制。</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0x 表示十六进制，但是 js 会强制转换为十进制来运算，0xa == 10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0xa</span>;</span><br><span class=\"line\"><span class=\"comment\">// 0 开头表示八进制，同样强制转换为十进制来运算 010 = 8</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Number.parseInt 方法把字符串（只能由字母和数字组成）由低进制转高进制，如二进制转八进制，但是八进制不能转二进制，radix 表示进制，取值 2~36，返回一个字符串。</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">parseInt</span>(string,radix)</span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;0101&#x27;</span>,<span class=\"number\">2</span>) <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;0101&#x27;</span>,<span class=\"number\">8</span>) <span class=\"comment\">// 65</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Number.toString 方法将十进制数字转换为任意进制的字符串形式，同样，radix 表示进制，取值 2~36</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"title function_\">toString</span>(radix)</span><br><span class=\"line\">(<span class=\"number\">10</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>) <span class=\"comment\">//&quot;1010&quot; 转 2 进制</span></span><br><span class=\"line\">(<span class=\"number\">10</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">8</span>) <span class=\"comment\">//&quot;12&quot; 转 8 进制</span></span><br><span class=\"line\">(<span class=\"number\">10</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>) <span class=\"comment\">//&quot;a&quot; 转 16 进制</span></span><br><span class=\"line\">(<span class=\"number\">1000</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">36</span>) <span class=\"comment\">//&quot;rs&quot; 转 36 进制</span></span><br></pre></td></tr></table></figure></div>","excerpt":"","more":"<p><code>以下语句会如何输出？</code></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">022</span> - <span class=\"number\">017</span></span><br><span class=\"line\"><span class=\"comment\">// 3，18 - 15 = 3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"number\">018</span> - <span class=\"number\">045</span></span><br><span class=\"line\"><span class=\"comment\">// -19，18 - 37 = -19</span></span><br></pre></td></tr></table></figure>\n<p>在 JS 中，在 Number 类型前加 0 会转换为 8 进制，如果原来的值位上有大于 8 的数，则不会进行转换。</p>\n<p>在 JS 中，有几种方法来进行进制转换，但只能通过 10 进制中转，即 10 进制转其他进制或者其他进制转 10 进制。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 0x 表示十六进制，但是 js 会强制转换为十进制来运算，0xa == 10</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0xa</span>;</span><br><span class=\"line\"><span class=\"comment\">// 0 开头表示八进制，同样强制转换为十进制来运算 010 = 8</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> b = <span class=\"number\">010</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Number.parseInt 方法把字符串（只能由字母和数字组成）由低进制转高进制，如二进制转八进制，但是八进制不能转二进制，radix 表示进制，取值 2~36，返回一个字符串。</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">parseInt</span>(string,radix)</span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;0101&#x27;</span>,<span class=\"number\">2</span>) <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"built_in\">parseInt</span>(<span class=\"string\">&#x27;0101&#x27;</span>,<span class=\"number\">8</span>) <span class=\"comment\">// 65</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Number.toString 方法将十进制数字转换为任意进制的字符串形式，同样，radix 表示进制，取值 2~36</span></span><br><span class=\"line\"><span class=\"title class_\">Number</span>.<span class=\"title function_\">toString</span>(radix)</span><br><span class=\"line\">(<span class=\"number\">10</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">2</span>) <span class=\"comment\">//&quot;1010&quot; 转 2 进制</span></span><br><span class=\"line\">(<span class=\"number\">10</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">8</span>) <span class=\"comment\">//&quot;12&quot; 转 8 进制</span></span><br><span class=\"line\">(<span class=\"number\">10</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">16</span>) <span class=\"comment\">//&quot;a&quot; 转 16 进制</span></span><br><span class=\"line\">(<span class=\"number\">1000</span>).<span class=\"title function_\">toString</span>(<span class=\"number\">36</span>) <span class=\"comment\">//&quot;rs&quot; 转 36 进制</span></span><br></pre></td></tr></table></figure>"},{"title":"【Vue3 源码学习】01，从 createApp() 方法开始","date":"2022-06-03T02:56:48.000Z","_content":"\n![s0](./vueSourceCodeStudy01/s0.jpg)\nPS: 这是一张很有用的图\n\n## 前言：怎样学习源码？\n1. 有主线，两种方式\n   1. 从入口入手，package.json-->\n   2. 从逻辑入手，createApp()\n2. 提出一个问题，在源码中找答案\n3. 学习一步整理一步，然后复盘复习（画图）\n4. 有所掌握后造轮子实践\n5. 写博客或者做视频，在知识分享中巩固知识\n## 前置\n\n## 首先提几个问题\n- 第一个问题：app 实例如何创建？\n- 第二个问题：app 实例中有些什么？\n\n## 第一个问题：app 实例如何创建？\n![s1-1](./vueSourceCodeStudy01/s1-1.png)\n![s1-2](./vueSourceCodeStudy01/s1-2.png)\ncreateApp() 函数内部的 ensureRenderer() 方法返回了一个渲染器 renderer（），这个 renderer 调用了 createApp() 创建实例。可以看到在 ensureRenderer() 方法内部调用了 createRenderer() 方法，进入其中会发现一个工厂函数 baseCreateRenderer()。\n![s1-3](./vueSourceCodeStudy01/s1-3.png) \n查看 baseCreateRenderer() 方法的实现，会发现它返回了一个方法 createAppAPI()，进入 createAppAPI() 方法内部，会发现这又是一个工厂函数，返回一个 createApp() 方法，而这就是图一中一开始调用的 createApp()。\n![s1-4](./vueSourceCodeStudy01/s1-4.png)\n![s1-5](./vueSourceCodeStudy01/s1-5.png)\n\n## 第二个问题：app 实例中有些什么？\n在 createAppAPI() 方法的实现代码中，我们可以找到实例 app 的实现，它包含了一些实例属性和实例方法，我们所熟悉的 use、mixin、component、directive、mount、unmount、provide 尽在其上\n![s1-6](./vueSourceCodeStudy01/s1-6.png)\n\n## 一些思考\n可以发现，相比于 vue2 来说，vue3 将全局方法挂载到了实例 app 上（vue2 是挂载在构建函数 Vue 上），这样我们使用这些方法的方式发生了变化\n```javascript\nimport myComponent from './vueSourceCodeStudy01/myComponent';\nimport myPlugin from './myPlugin';\n\n// vue2\nVue.component('myComponent',myComponent);\nVue.use(myPlugin);\n\n// vue3\ncreateApp({...}).coponent(myComponent).use(myPlugin).mount('#app')\n```\n这样做有什么好处呢？我认为是为了应付多实例场景，这样做更加便于维护且清晰易懂。","source":"_posts/vueSourceCodeStudy01.md","raw":"---\ntitle: 【Vue3 源码学习】01，从 createApp() 方法开始\ndate: 2022-06-03 10:56:48\ntags:\n  - vue\n  - sourceCode\ncategories:\n  - 源码\n---\n\n![s0](./vueSourceCodeStudy01/s0.jpg)\nPS: 这是一张很有用的图\n\n## 前言：怎样学习源码？\n1. 有主线，两种方式\n   1. 从入口入手，package.json-->\n   2. 从逻辑入手，createApp()\n2. 提出一个问题，在源码中找答案\n3. 学习一步整理一步，然后复盘复习（画图）\n4. 有所掌握后造轮子实践\n5. 写博客或者做视频，在知识分享中巩固知识\n## 前置\n\n## 首先提几个问题\n- 第一个问题：app 实例如何创建？\n- 第二个问题：app 实例中有些什么？\n\n## 第一个问题：app 实例如何创建？\n![s1-1](./vueSourceCodeStudy01/s1-1.png)\n![s1-2](./vueSourceCodeStudy01/s1-2.png)\ncreateApp() 函数内部的 ensureRenderer() 方法返回了一个渲染器 renderer（），这个 renderer 调用了 createApp() 创建实例。可以看到在 ensureRenderer() 方法内部调用了 createRenderer() 方法，进入其中会发现一个工厂函数 baseCreateRenderer()。\n![s1-3](./vueSourceCodeStudy01/s1-3.png) \n查看 baseCreateRenderer() 方法的实现，会发现它返回了一个方法 createAppAPI()，进入 createAppAPI() 方法内部，会发现这又是一个工厂函数，返回一个 createApp() 方法，而这就是图一中一开始调用的 createApp()。\n![s1-4](./vueSourceCodeStudy01/s1-4.png)\n![s1-5](./vueSourceCodeStudy01/s1-5.png)\n\n## 第二个问题：app 实例中有些什么？\n在 createAppAPI() 方法的实现代码中，我们可以找到实例 app 的实现，它包含了一些实例属性和实例方法，我们所熟悉的 use、mixin、component、directive、mount、unmount、provide 尽在其上\n![s1-6](./vueSourceCodeStudy01/s1-6.png)\n\n## 一些思考\n可以发现，相比于 vue2 来说，vue3 将全局方法挂载到了实例 app 上（vue2 是挂载在构建函数 Vue 上），这样我们使用这些方法的方式发生了变化\n```javascript\nimport myComponent from './vueSourceCodeStudy01/myComponent';\nimport myPlugin from './myPlugin';\n\n// vue2\nVue.component('myComponent',myComponent);\nVue.use(myPlugin);\n\n// vue3\ncreateApp({...}).coponent(myComponent).use(myPlugin).mount('#app')\n```\n这样做有什么好处呢？我认为是为了应付多实例场景，这样做更加便于维护且清晰易懂。","slug":"vueSourceCodeStudy01","published":1,"updated":"2024-07-14T01:09:19.922Z","comments":1,"layout":"post","photos":[],"_id":"clyliw09j003otch8hjtxf017","content":"<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s0.jpg\"\n                      class=\"\" title=\"s0\"\n                >\n<p>PS: 这是一张很有用的图</p>\n<h2 id=\"前言：怎样学习源码？\"><a href=\"#前言：怎样学习源码？\" class=\"headerlink\" title=\"前言：怎样学习源码？\"></a>前言：怎样学习源码？</h2><ol>\n<li>有主线，两种方式<ol>\n<li>从入口入手，package.json–&gt;</li>\n<li>从逻辑入手，createApp()</li>\n</ol>\n</li>\n<li>提出一个问题，在源码中找答案</li>\n<li>学习一步整理一步，然后复盘复习（画图）</li>\n<li>有所掌握后造轮子实践</li>\n<li>写博客或者做视频，在知识分享中巩固知识</li>\n</ol>\n<h2 id=\"前置\"><a href=\"#前置\" class=\"headerlink\" title=\"前置\"></a>前置</h2><h2 id=\"首先提几个问题\"><a href=\"#首先提几个问题\" class=\"headerlink\" title=\"首先提几个问题\"></a>首先提几个问题</h2><ul>\n<li>第一个问题：app 实例如何创建？</li>\n<li>第二个问题：app 实例中有些什么？</li>\n</ul>\n<h2 id=\"第一个问题：app-实例如何创建？\"><a href=\"#第一个问题：app-实例如何创建？\" class=\"headerlink\" title=\"第一个问题：app 实例如何创建？\"></a>第一个问题：app 实例如何创建？</h2><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-1.png\"\n                      class=\"\" title=\"s1-1\"\n                >\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-2.png\"\n                      class=\"\" title=\"s1-2\"\n                >\n<p>createApp() 函数内部的 ensureRenderer() 方法返回了一个渲染器 renderer（），这个 renderer 调用了 createApp() 创建实例。可以看到在 ensureRenderer() 方法内部调用了 createRenderer() 方法，进入其中会发现一个工厂函数 baseCreateRenderer()。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-3.png\"\n                      class=\"\" title=\"s1-3\"\n                > \n<p>查看 baseCreateRenderer() 方法的实现，会发现它返回了一个方法 createAppAPI()，进入 createAppAPI() 方法内部，会发现这又是一个工厂函数，返回一个 createApp() 方法，而这就是图一中一开始调用的 createApp()。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-4.png\"\n                      class=\"\" title=\"s1-4\"\n                >\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-5.png\"\n                      class=\"\" title=\"s1-5\"\n                >\n\n<h2 id=\"第二个问题：app-实例中有些什么？\"><a href=\"#第二个问题：app-实例中有些什么？\" class=\"headerlink\" title=\"第二个问题：app 实例中有些什么？\"></a>第二个问题：app 实例中有些什么？</h2><p>在 createAppAPI() 方法的实现代码中，我们可以找到实例 app 的实现，它包含了一些实例属性和实例方法，我们所熟悉的 use、mixin、component、directive、mount、unmount、provide 尽在其上</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-6.png\"\n                      class=\"\" title=\"s1-6\"\n                >\n\n<h2 id=\"一些思考\"><a href=\"#一些思考\" class=\"headerlink\" title=\"一些思考\"></a>一些思考</h2><p>可以发现，相比于 vue2 来说，vue3 将全局方法挂载到了实例 app 上（vue2 是挂载在构建函数 Vue 上），这样我们使用这些方法的方式发生了变化</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> myComponent <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./vueSourceCodeStudy01/myComponent&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> myPlugin <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myPlugin&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue2</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;myComponent&#x27;</span>,myComponent);</span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(myPlugin);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue3</span></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(&#123;...&#125;).<span class=\"title function_\">coponent</span>(myComponent).<span class=\"title function_\">use</span>(myPlugin).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></div>\n<p>这样做有什么好处呢？我认为是为了应付多实例场景，这样做更加便于维护且清晰易懂。</p>\n","excerpt":"","more":"<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s0.jpg\"\n                      class=\"\" title=\"s0\"\n                >\n<p>PS: 这是一张很有用的图</p>\n<h2 id=\"前言：怎样学习源码？\"><a href=\"#前言：怎样学习源码？\" class=\"headerlink\" title=\"前言：怎样学习源码？\"></a>前言：怎样学习源码？</h2><ol>\n<li>有主线，两种方式<ol>\n<li>从入口入手，package.json–&gt;</li>\n<li>从逻辑入手，createApp()</li>\n</ol>\n</li>\n<li>提出一个问题，在源码中找答案</li>\n<li>学习一步整理一步，然后复盘复习（画图）</li>\n<li>有所掌握后造轮子实践</li>\n<li>写博客或者做视频，在知识分享中巩固知识</li>\n</ol>\n<h2 id=\"前置\"><a href=\"#前置\" class=\"headerlink\" title=\"前置\"></a>前置</h2><h2 id=\"首先提几个问题\"><a href=\"#首先提几个问题\" class=\"headerlink\" title=\"首先提几个问题\"></a>首先提几个问题</h2><ul>\n<li>第一个问题：app 实例如何创建？</li>\n<li>第二个问题：app 实例中有些什么？</li>\n</ul>\n<h2 id=\"第一个问题：app-实例如何创建？\"><a href=\"#第一个问题：app-实例如何创建？\" class=\"headerlink\" title=\"第一个问题：app 实例如何创建？\"></a>第一个问题：app 实例如何创建？</h2><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-1.png\"\n                      class=\"\" title=\"s1-1\"\n                >\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-2.png\"\n                      class=\"\" title=\"s1-2\"\n                >\n<p>createApp() 函数内部的 ensureRenderer() 方法返回了一个渲染器 renderer（），这个 renderer 调用了 createApp() 创建实例。可以看到在 ensureRenderer() 方法内部调用了 createRenderer() 方法，进入其中会发现一个工厂函数 baseCreateRenderer()。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-3.png\"\n                      class=\"\" title=\"s1-3\"\n                > \n<p>查看 baseCreateRenderer() 方法的实现，会发现它返回了一个方法 createAppAPI()，进入 createAppAPI() 方法内部，会发现这又是一个工厂函数，返回一个 createApp() 方法，而这就是图一中一开始调用的 createApp()。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-4.png\"\n                      class=\"\" title=\"s1-4\"\n                >\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-5.png\"\n                      class=\"\" title=\"s1-5\"\n                >\n\n<h2 id=\"第二个问题：app-实例中有些什么？\"><a href=\"#第二个问题：app-实例中有些什么？\" class=\"headerlink\" title=\"第二个问题：app 实例中有些什么？\"></a>第二个问题：app 实例中有些什么？</h2><p>在 createAppAPI() 方法的实现代码中，我们可以找到实例 app 的实现，它包含了一些实例属性和实例方法，我们所熟悉的 use、mixin、component、directive、mount、unmount、provide 尽在其上</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy01/s1-6.png\"\n                      class=\"\" title=\"s1-6\"\n                >\n\n<h2 id=\"一些思考\"><a href=\"#一些思考\" class=\"headerlink\" title=\"一些思考\"></a>一些思考</h2><p>可以发现，相比于 vue2 来说，vue3 将全局方法挂载到了实例 app 上（vue2 是挂载在构建函数 Vue 上），这样我们使用这些方法的方式发生了变化</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> myComponent <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./vueSourceCodeStudy01/myComponent&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">import</span> myPlugin <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./myPlugin&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue2</span></span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">component</span>(<span class=\"string\">&#x27;myComponent&#x27;</span>,myComponent);</span><br><span class=\"line\"><span class=\"title class_\">Vue</span>.<span class=\"title function_\">use</span>(myPlugin);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// vue3</span></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(&#123;...&#125;).<span class=\"title function_\">coponent</span>(myComponent).<span class=\"title function_\">use</span>(myPlugin).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n<p>这样做有什么好处呢？我认为是为了应付多实例场景，这样做更加便于维护且清晰易懂。</p>\n"},{"title":"【Vue3 源码学习】02，初识 mount() 方法","date":"2022-06-03T02:56:48.000Z","_content":"\n## 前言\n书接上回([[vueSourceCodeStudy01]])，在 runtime-core 包下的文件`/runtime-core/src/apiCreateApp.ts`中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，`mount()`就在其中。\n\n## 首先提几个问题\n1. 初次挂载时 mount() 方法做了些什么？ \n2. 回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？\n![s2-0](./vueSourceCodeStudy02/s0.png)\n\n## 初次挂载时 mount() 方法干了些什么？\n![s2-1](./vueSourceCodeStudy02/s2-1.png)\n\n首先进入 mount() 方法，它接收 3 个参数：`rootContainer`，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：\n```javascript\n// 可以看到我们只传了一个字符串，是一个 CSS 选择器。\ncreateApp({}).mount('#app')\n```\n\n再看方法体：\n![s2-2](./vueSourceCodeStudy02/s2-2.png)\n\n可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。\n\n让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在`/runtime-core/src/renderer.ts`目录下可以找到。\n![s2-3](./vueSourceCodeStudy02/s2-3.png)\n\n![s2-4](./vueSourceCodeStudy02/s2-4.png)\n\n接下来找到 render() 方法的方法体：\n![s2-5](./vueSourceCodeStudy02/s2-5.png)\n\n可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个`patch()`方法\n\n我们来看一下这个 patch() 方法中传了些什么：\n![s2-6](./vueSourceCodeStudy02/s2-6.png)\n\n可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向`div#app`，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：\n![s2-7](./vueSourceCodeStudy02/s2-7.png)\n\n之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：\n![s2-8](./vueSourceCodeStudy02/s2-8.png)\n\n<!-- \n  YCNOTE：为什么 switch 语句要传入一个对象\n -->\n沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据`type`和`shapeFlag`的值进行不同的操作：\n![s2-10](./vueSourceCodeStudy02/s2-10.png)\n\n此时 shapeFlag 的值为 4，进行位与运算值为 true。以下`位移枚举`可以学一下，它的好处是清晰、好计算并且可以进行多值判断。\n![s2-11](./vueSourceCodeStudy02/s2-11.png)\n\n初次挂载时执行`processComponent()`方法，进入方法体 processComponent()：\n![s2-12](./vueSourceCodeStudy02/s2-12.png)\n\n可以看到走进 else 代码块，触发方法`mountComponent()`，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个`setupRenderEffect()`方法，\n![s2-13](./vueSourceCodeStudy02/s2-13.png)\n\n这个方法创建了一个执行器 `effect`，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。\n\n## 总结\n\n总结一下，初次挂载时 mount() 方法执行流程大概这样：\n\nmount()-->createVNode()-->render()-->patch()-->processComponent()-->mountComponent()-->createComponentInstance-->setupRenderEffect()-->ReactiveEffect()-->update()-->effect.run()\n\n简洁一点就是：\n\nmount()-->render()-->patch()\n\n可以通过调用堆栈查看：\n![s2-14](./vueSourceCodeStudy02/s2-14.png)\n\n回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：\n![s2-15](./vueSourceCodeStudy02/s2-15.png)\n\n本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析 render() 和 patch() 函数。\n\n若有错误请大佬指出，感激不尽。\n","source":"_posts/vueSourceCodeStudy02.md","raw":"---\ntitle: 【Vue3 源码学习】02，初识 mount() 方法\ndate: 2022-06-03 10:56:48\ntags:\n  - vue\n  - sourceCode\ncategories:\n  - 源码\n---\n\n## 前言\n书接上回([[vueSourceCodeStudy01]])，在 runtime-core 包下的文件`/runtime-core/src/apiCreateApp.ts`中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，`mount()`就在其中。\n\n## 首先提几个问题\n1. 初次挂载时 mount() 方法做了些什么？ \n2. 回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？\n![s2-0](./vueSourceCodeStudy02/s0.png)\n\n## 初次挂载时 mount() 方法干了些什么？\n![s2-1](./vueSourceCodeStudy02/s2-1.png)\n\n首先进入 mount() 方法，它接收 3 个参数：`rootContainer`，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：\n```javascript\n// 可以看到我们只传了一个字符串，是一个 CSS 选择器。\ncreateApp({}).mount('#app')\n```\n\n再看方法体：\n![s2-2](./vueSourceCodeStudy02/s2-2.png)\n\n可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。\n\n让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在`/runtime-core/src/renderer.ts`目录下可以找到。\n![s2-3](./vueSourceCodeStudy02/s2-3.png)\n\n![s2-4](./vueSourceCodeStudy02/s2-4.png)\n\n接下来找到 render() 方法的方法体：\n![s2-5](./vueSourceCodeStudy02/s2-5.png)\n\n可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个`patch()`方法\n\n我们来看一下这个 patch() 方法中传了些什么：\n![s2-6](./vueSourceCodeStudy02/s2-6.png)\n\n可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向`div#app`，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：\n![s2-7](./vueSourceCodeStudy02/s2-7.png)\n\n之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：\n![s2-8](./vueSourceCodeStudy02/s2-8.png)\n\n<!-- \n  YCNOTE：为什么 switch 语句要传入一个对象\n -->\n沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据`type`和`shapeFlag`的值进行不同的操作：\n![s2-10](./vueSourceCodeStudy02/s2-10.png)\n\n此时 shapeFlag 的值为 4，进行位与运算值为 true。以下`位移枚举`可以学一下，它的好处是清晰、好计算并且可以进行多值判断。\n![s2-11](./vueSourceCodeStudy02/s2-11.png)\n\n初次挂载时执行`processComponent()`方法，进入方法体 processComponent()：\n![s2-12](./vueSourceCodeStudy02/s2-12.png)\n\n可以看到走进 else 代码块，触发方法`mountComponent()`，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个`setupRenderEffect()`方法，\n![s2-13](./vueSourceCodeStudy02/s2-13.png)\n\n这个方法创建了一个执行器 `effect`，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。\n\n## 总结\n\n总结一下，初次挂载时 mount() 方法执行流程大概这样：\n\nmount()-->createVNode()-->render()-->patch()-->processComponent()-->mountComponent()-->createComponentInstance-->setupRenderEffect()-->ReactiveEffect()-->update()-->effect.run()\n\n简洁一点就是：\n\nmount()-->render()-->patch()\n\n可以通过调用堆栈查看：\n![s2-14](./vueSourceCodeStudy02/s2-14.png)\n\n回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：\n![s2-15](./vueSourceCodeStudy02/s2-15.png)\n\n本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析 render() 和 patch() 函数。\n\n若有错误请大佬指出，感激不尽。\n","slug":"vueSourceCodeStudy02","published":1,"updated":"2024-07-14T01:09:19.932Z","comments":1,"layout":"post","photos":[],"_id":"clyliw09l0043tch8gae5hz8c","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>书接上回([[vueSourceCodeStudy01]])，在 runtime-core 包下的文件<code>/runtime-core/src/apiCreateApp.ts</code>中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，<code>mount()</code>就在其中。</p>\n<h2 id=\"首先提几个问题\"><a href=\"#首先提几个问题\" class=\"headerlink\" title=\"首先提几个问题\"></a>首先提几个问题</h2><ol>\n<li>初次挂载时 mount() 方法做了些什么？ </li>\n<li>回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s0.png\"\n                      class=\"\" title=\"s2-0\"\n                ></li>\n</ol>\n<h2 id=\"初次挂载时-mount-方法干了些什么？\"><a href=\"#初次挂载时-mount-方法干了些什么？\" class=\"headerlink\" title=\"初次挂载时 mount() 方法干了些什么？\"></a>初次挂载时 mount() 方法干了些什么？</h2><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-1.png\"\n                      class=\"\" title=\"s2-1\"\n                >\n\n<p>首先进入 mount() 方法，它接收 3 个参数：<code>rootContainer</code>，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：</p>\n<div class=\"highlight-container\" data-rel=\"Javascript\"><figure class=\"iseeu highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以看到我们只传了一个字符串，是一个 CSS 选择器。</span></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(&#123;&#125;).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure></div>\n\n<p>再看方法体：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-2.png\"\n                      class=\"\" title=\"s2-2\"\n                >\n\n<p>可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。</p>\n<p>让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在<code>/runtime-core/src/renderer.ts</code>目录下可以找到。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-3.png\"\n                      class=\"\" title=\"s2-3\"\n                >\n\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-4.png\"\n                      class=\"\" title=\"s2-4\"\n                >\n\n<p>接下来找到 render() 方法的方法体：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-5.png\"\n                      class=\"\" title=\"s2-5\"\n                >\n\n<p>可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个<code>patch()</code>方法</p>\n<p>我们来看一下这个 patch() 方法中传了些什么：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-6.png\"\n                      class=\"\" title=\"s2-6\"\n                >\n\n<p>可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向<code>div#app</code>，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-7.png\"\n                      class=\"\" title=\"s2-7\"\n                >\n\n<p>之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-8.png\"\n                      class=\"\" title=\"s2-8\"\n                >\n\n<!-- \n  YCNOTE：为什么 switch 语句要传入一个对象\n -->\n<p>沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据<code>type</code>和<code>shapeFlag</code>的值进行不同的操作：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-10.png\"\n                      class=\"\" title=\"s2-10\"\n                >\n\n<p>此时 shapeFlag 的值为 4，进行位与运算值为 true。以下<code>位移枚举</code>可以学一下，它的好处是清晰、好计算并且可以进行多值判断。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-11.png\"\n                      class=\"\" title=\"s2-11\"\n                >\n\n<p>初次挂载时执行<code>processComponent()</code>方法，进入方法体 processComponent()：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-12.png\"\n                      class=\"\" title=\"s2-12\"\n                >\n\n<p>可以看到走进 else 代码块，触发方法<code>mountComponent()</code>，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个<code>setupRenderEffect()</code>方法，</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-13.png\"\n                      class=\"\" title=\"s2-13\"\n                >\n\n<p>这个方法创建了一个执行器 <code>effect</code>，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总结一下，初次挂载时 mount() 方法执行流程大概这样：</p>\n<p>mount()–&gt;createVNode()–&gt;render()–&gt;patch()–&gt;processComponent()–&gt;mountComponent()–&gt;createComponentInstance–&gt;setupRenderEffect()–&gt;ReactiveEffect()–&gt;update()–&gt;effect.run()</p>\n<p>简洁一点就是：</p>\n<p>mount()–&gt;render()–&gt;patch()</p>\n<p>可以通过调用堆栈查看：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-14.png\"\n                      class=\"\" title=\"s2-14\"\n                >\n\n<p>回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-15.png\"\n                      class=\"\" title=\"s2-15\"\n                >\n\n<p>本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析 render() 和 patch() 函数。</p>\n<p>若有错误请大佬指出，感激不尽。</p>\n","excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>书接上回([[vueSourceCodeStudy01]])，在 runtime-core 包下的文件<code>/runtime-core/src/apiCreateApp.ts</code>中我们找到了 createAppAPI() 方法，此方法调用时创建一个 app 实例，在这个实例中挂载了一些我们熟悉的实例方法，<code>mount()</code>就在其中。</p>\n<h2 id=\"首先提几个问题\"><a href=\"#首先提几个问题\" class=\"headerlink\" title=\"首先提几个问题\"></a>首先提几个问题</h2><ol>\n<li>初次挂载时 mount() 方法做了些什么？ </li>\n<li>回忆一下 vue 的生命周期，mount() 方法在哪一部分执行了？<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s0.png\"\n                      class=\"\" title=\"s2-0\"\n                ></li>\n</ol>\n<h2 id=\"初次挂载时-mount-方法干了些什么？\"><a href=\"#初次挂载时-mount-方法干了些什么？\" class=\"headerlink\" title=\"初次挂载时 mount() 方法干了些什么？\"></a>初次挂载时 mount() 方法干了些什么？</h2><img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-1.png\"\n                      class=\"\" title=\"s2-1\"\n                >\n\n<p>首先进入 mount() 方法，它接收 3 个参数：<code>rootContainer</code>，isHydrate，isSVG，我们这里只关注 rootContainer，因为初次挂载时的一般写法是：</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 可以看到我们只传了一个字符串，是一个 CSS 选择器。</span></span><br><span class=\"line\"><span class=\"title function_\">createApp</span>(&#123;&#125;).<span class=\"title function_\">mount</span>(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<p>再看方法体：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-2.png\"\n                      class=\"\" title=\"s2-2\"\n                >\n\n<p>可以看到首先创建了一个 vnode，这个 vnode 由 createApp 方法传入的根组件确定；然后执行红框中的 render() 方法，我们传入的 rootContainer 作为第二个参数传入。</p>\n<p>让我们看看这个 render 方法，它是 createAppAPI() 方法的第一个参数，上一章介绍过这是 baseCreateRenderer() 这个工厂函数的返回，它在<code>/runtime-core/src/renderer.ts</code>目录下可以找到。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-3.png\"\n                      class=\"\" title=\"s2-3\"\n                >\n\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-4.png\"\n                      class=\"\" title=\"s2-4\"\n                >\n\n<p>接下来找到 render() 方法的方法体：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-5.png\"\n                      class=\"\" title=\"s2-5\"\n                >\n\n<p>可以看到 render() 方法接收三个参数，初次挂载时 vnode 有值，container 是我们 mount() 方法传入的挂载节点。因为 vnode 存在，所以执行 else 部分，可以看到，这里使用了一个<code>patch()</code>方法</p>\n<p>我们来看一下这个 patch() 方法中传了些什么：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-6.png\"\n                      class=\"\" title=\"s2-6\"\n                >\n\n<p>可以看出传入的 container 参数是一个 DOM 对象，在第一次挂载时指向<code>div#app</code>，我们的宿主对象，此时 container._vnode 值为 undefined（在 render 方法的最后才会给_vnode 属性赋值），所以第一个参数值为 null，第二个参数是之前传入的 vnode 对象，长这样：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-7.png\"\n                      class=\"\" title=\"s2-7\"\n                >\n\n<p>之后会用到，此时先不做关注。我们再来看看 patch() 方法内部：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-8.png\"\n                      class=\"\" title=\"s2-8\"\n                >\n\n<!-- \n  YCNOTE：为什么 switch 语句要传入一个对象\n -->\n<p>沿着逻辑往下走到红框部分，此时从我们传入的 vnode（第一次挂载时 mount 方法中新建的 vnode) 中取出 3 个值，根据<code>type</code>和<code>shapeFlag</code>的值进行不同的操作：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-10.png\"\n                      class=\"\" title=\"s2-10\"\n                >\n\n<p>此时 shapeFlag 的值为 4，进行位与运算值为 true。以下<code>位移枚举</code>可以学一下，它的好处是清晰、好计算并且可以进行多值判断。</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-11.png\"\n                      class=\"\" title=\"s2-11\"\n                >\n\n<p>初次挂载时执行<code>processComponent()</code>方法，进入方法体 processComponent()：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-12.png\"\n                      class=\"\" title=\"s2-12\"\n                >\n\n<p>可以看到走进 else 代码块，触发方法<code>mountComponent()</code>，见名知意，组件由这个方法挂载。进入该方法，该方法首先会执行一个<code>setupRenderEffect()</code>方法，</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-13.png\"\n                      class=\"\" title=\"s2-13\"\n                >\n\n<p>这个方法创建了一个执行器 <code>effect</code>，然后调用了 effect.run() 方法，当 effect.run() 执行完毕时，整个挂载流程结束。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>总结一下，初次挂载时 mount() 方法执行流程大概这样：</p>\n<p>mount()–&gt;createVNode()–&gt;render()–&gt;patch()–&gt;processComponent()–&gt;mountComponent()–&gt;createComponentInstance–&gt;setupRenderEffect()–&gt;ReactiveEffect()–&gt;update()–&gt;effect.run()</p>\n<p>简洁一点就是：</p>\n<p>mount()–&gt;render()–&gt;patch()</p>\n<p>可以通过调用堆栈查看：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-14.png\"\n                      class=\"\" title=\"s2-14\"\n                >\n\n<p>回到最初提的两个问题，第一个问题已经基本解答完毕，第二个问题，mount() 函数在 vue 的生命周期的哪一部分执行也已经可以推想出来：</p>\n<img  \n                     lazyload\n                     src=\"/images/loading.svg\"\n                     data-src=\"/2022/06/03/vueSourceCodeStudy02/s2-15.png\"\n                      class=\"\" title=\"s2-15\"\n                >\n\n<p>本篇文章就到此为止，因为是初识，所以比较简单，基本上就是跟着调用栈走，之后会更具体的分析 render() 和 patch() 函数。</p>\n<p>若有错误请大佬指出，感激不尽。</p>\n"},{"title":"【Vue3 源码学习】03，使用渲染器来创建一个节点","date":"2022-06-03T02:56:48.000Z","_content":"","source":"_posts/vueSourceCodeStudy03.md","raw":"---\ntitle: 【Vue3 源码学习】03，使用渲染器来创建一个节点\ndate: 2022-06-03 10:56:48\ntags:\n  - vue\n  - sourceCode\ncategories:\n  - 源码\n---\n","slug":"vueSourceCodeStudy03","published":1,"updated":"2024-07-14T01:09:19.956Z","comments":1,"layout":"post","photos":[],"_id":"clyliw09m0044tch8dpy18o2l","content":"","excerpt":"","more":""},{"title":"【Vue3 源码学习】03，使用渲染器来创建一个节点","date":"2024-06-03T02:56:48.000Z","_content":"","source":"_posts/vueSourceCodeStudy04.md","raw":"---\ntitle: 【Vue3 源码学习】03，使用渲染器来创建一个节点\ndate: 2024-06-03 10:56:48\ntags:\n  - vue\n  - sourceCode\ncategories:\n  - 源码\n---\n","slug":"vueSourceCodeStudy04","published":1,"updated":"2024-08-19T16:45:39.220Z","comments":1,"layout":"post","photos":[],"_id":"cm018kvi800009gh8333t8lez","content":"","excerpt":"","more":""}],"PostAsset":[{"_id":"source/_posts/someInterestingQuestions01/q1.png","slug":"q1.png","post":"clyliw095001ftch8culveq0f","modified":0,"renderable":0},{"_id":"source/_posts/someInterestingQuestions01/q2.png","slug":"q2.png","post":"clyliw095001ftch8culveq0f","modified":0,"renderable":0},{"_id":"source/_posts/someInterestingQuestions01/q3.png","slug":"q3.png","post":"clyliw095001ftch8culveq0f","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s0.jpg","slug":"s0.jpg","post":"clyliw09j003otch8hjtxf017","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-1.png","slug":"s1-1.png","post":"clyliw09j003otch8hjtxf017","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-2.png","slug":"s1-2.png","post":"clyliw09j003otch8hjtxf017","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-3.png","slug":"s1-3.png","post":"clyliw09j003otch8hjtxf017","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-4.png","slug":"s1-4.png","post":"clyliw09j003otch8hjtxf017","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-5.png","slug":"s1-5.png","post":"clyliw09j003otch8hjtxf017","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy01/s1-6.png","slug":"s1-6.png","post":"clyliw09j003otch8hjtxf017","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s0.png","slug":"s0.png","post":"clyliw09l0043tch8gae5hz8c","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-1.png","slug":"s2-1.png","post":"clyliw09l0043tch8gae5hz8c","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-10.png","slug":"s2-10.png","post":"clyliw09l0043tch8gae5hz8c","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-11.png","slug":"s2-11.png","post":"clyliw09l0043tch8gae5hz8c","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-12.png","slug":"s2-12.png","post":"clyliw09l0043tch8gae5hz8c","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-13.png","slug":"s2-13.png","post":"clyliw09l0043tch8gae5hz8c","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-14.png","slug":"s2-14.png","post":"clyliw09l0043tch8gae5hz8c","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-15.png","slug":"s2-15.png","post":"clyliw09l0043tch8gae5hz8c","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-2.png","slug":"s2-2.png","post":"clyliw09l0043tch8gae5hz8c","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-3.png","slug":"s2-3.png","post":"clyliw09l0043tch8gae5hz8c","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-4.png","slug":"s2-4.png","post":"clyliw09l0043tch8gae5hz8c","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-5.png","slug":"s2-5.png","post":"clyliw09l0043tch8gae5hz8c","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-6.png","slug":"s2-6.png","post":"clyliw09l0043tch8gae5hz8c","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-7.png","slug":"s2-7.png","post":"clyliw09l0043tch8gae5hz8c","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-8.png","slug":"s2-8.png","post":"clyliw09l0043tch8gae5hz8c","modified":0,"renderable":0},{"_id":"source/_posts/vueSourceCodeStudy02/s2-9.png","slug":"s2-9.png","post":"clyliw09l0043tch8gae5hz8c","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop14.png","slug":".png","post":"clyliw08v000itch88etu2n0p","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop15.png","slug":".png","post":"clyliw08v000itch88etu2n0p","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop17.jpg","slug":".jpg","post":"clyliw08v000itch88etu2n0p","modified":0,"renderable":0},{"_id":"source/_posts/ReprintJSEventLoop/js-eventloop16.png","slug":".png","post":"clyliw08v000itch88etu2n0p","modified":0,"renderable":0}],"PostCategory":[{"post_id":"clyliw094001dtch8byb55tvf","category_id":"clyliw08w000jtch8gskr18fj","_id":"clyliw097001ltch8c49vcikt"},{"post_id":"clyliw08v000itch88etu2n0p","category_id":"clyliw08y000ptch81qi539bv","_id":"clyliw098001stch82ahh5ghq"},{"post_id":"clyliw095001ftch8culveq0f","category_id":"clyliw09d002utch8bws1esav","_id":"clyliw09e0033tch80g2c6xwc"},{"post_id":"clyliw096001jtch8ae6fgyct","category_id":"clyliw09a0026tch8asj48pdo","_id":"clyliw09e0036tch8b9ce4x5q"},{"post_id":"clyliw096001ktch85ec592lv","category_id":"clyliw09d002utch8bws1esav","_id":"clyliw09e003atch84a1w7bkf"},{"post_id":"clyliw09h003gtch8azvz2tpd","category_id":"clyliw09d002utch8bws1esav","_id":"clyliw09j003mtch82rzv3kt5"},{"post_id":"clyliw09i003htch87481bcpg","category_id":"clyliw09d002utch8bws1esav","_id":"clyliw09j003ptch8a7l46jcd"},{"post_id":"clyliw09i003jtch8bznehp14","category_id":"clyliw09d002utch8bws1esav","_id":"clyliw09k003rtch82n9phkky"},{"post_id":"clyliw09j003ltch8g7uj9m72","category_id":"clyliw09d002utch8bws1esav","_id":"clyliw09k003vtch8dtpbcxyr"},{"post_id":"clyliw09j003otch8hjtxf017","category_id":"clyliw09k003stch87w8bdlkc","_id":"clyliw09k0040tch87u7rac7e"},{"post_id":"clyliw09l0043tch8gae5hz8c","category_id":"clyliw09k003stch87w8bdlkc","_id":"clyliw09m0047tch81mrf7wru"},{"post_id":"clyliw09m0044tch8dpy18o2l","category_id":"clyliw09k003stch87w8bdlkc","_id":"clyliw09m0049tch80kfe2fx2"},{"post_id":"cm018kvi800009gh8333t8lez","category_id":"clyliw09k003stch87w8bdlkc","_id":"cm018kvib00039gh85bi19bat"}],"PostTag":[{"post_id":"clyliw096001jtch8ae6fgyct","tag_id":"clyliw08u000dtch83ig65k98","_id":"clyliw098001otch8bp94a6ig"},{"post_id":"clyliw096001jtch8ae6fgyct","tag_id":"clyliw08w000ktch8896t41d0","_id":"clyliw098001qtch81mdxgwvz"},{"post_id":"clyliw08v000itch88etu2n0p","tag_id":"clyliw08u000dtch83ig65k98","_id":"clyliw09a0028tch80ft1c50k"},{"post_id":"clyliw08v000itch88etu2n0p","tag_id":"clyliw099001ytch8733b5x0m","_id":"clyliw09a002atch838qc2t20"},{"post_id":"clyliw08v000itch88etu2n0p","tag_id":"clyliw090000vtch8ae6ebz61","_id":"clyliw09b002dtch8hw8vb8ld"},{"post_id":"clyliw094001dtch8byb55tvf","tag_id":"clyliw097001ntch8hidx4ln0","_id":"clyliw09e0039tch8aszpfm2w"},{"post_id":"clyliw095001ftch8culveq0f","tag_id":"clyliw08u000dtch83ig65k98","_id":"clyliw09f003ctch86aon9mlo"},{"post_id":"clyliw095001ftch8culveq0f","tag_id":"clyliw09e0038tch8b5i8euy9","_id":"clyliw09f003dtch8ebhvharn"},{"post_id":"clyliw096001ktch85ec592lv","tag_id":"clyliw08u000dtch83ig65k98","_id":"clyliw09f003etch8bv5t7i6n"},{"post_id":"clyliw096001ktch85ec592lv","tag_id":"clyliw09e0038tch8b5i8euy9","_id":"clyliw09f003ftch8ewmdcis9"},{"post_id":"clyliw09h003gtch8azvz2tpd","tag_id":"clyliw08u000dtch83ig65k98","_id":"clyliw09i003itch81nwrec4m"},{"post_id":"clyliw09h003gtch8azvz2tpd","tag_id":"clyliw09e0038tch8b5i8euy9","_id":"clyliw09j003ktch84hap0xcc"},{"post_id":"clyliw09i003htch87481bcpg","tag_id":"clyliw08u000dtch83ig65k98","_id":"clyliw09j003ntch8e0859fdl"},{"post_id":"clyliw09i003htch87481bcpg","tag_id":"clyliw09e0038tch8b5i8euy9","_id":"clyliw09k003qtch8daij0t0y"},{"post_id":"clyliw09i003jtch8bznehp14","tag_id":"clyliw08u000dtch83ig65k98","_id":"clyliw09k003utch8hy7ndo6x"},{"post_id":"clyliw09i003jtch8bznehp14","tag_id":"clyliw09e0038tch8b5i8euy9","_id":"clyliw09k003wtch8dg414ku3"},{"post_id":"clyliw09j003ltch8g7uj9m72","tag_id":"clyliw08u000dtch83ig65k98","_id":"clyliw09k003xtch87giddyhz"},{"post_id":"clyliw09j003ltch8g7uj9m72","tag_id":"clyliw09e0038tch8b5i8euy9","_id":"clyliw09k003ztch86maa6c9x"},{"post_id":"clyliw09j003otch8hjtxf017","tag_id":"clyliw09k003ttch8aa8ieeud","_id":"clyliw09k0041tch8fozghnll"},{"post_id":"clyliw09j003otch8hjtxf017","tag_id":"clyliw09k003ytch8edfmd9ll","_id":"clyliw09k0042tch876g37vgf"},{"post_id":"clyliw09l0043tch8gae5hz8c","tag_id":"clyliw09k003ttch8aa8ieeud","_id":"clyliw09m0045tch8ct8f51ze"},{"post_id":"clyliw09l0043tch8gae5hz8c","tag_id":"clyliw09k003ytch8edfmd9ll","_id":"clyliw09m0046tch8bw6a3cxp"},{"post_id":"clyliw09m0044tch8dpy18o2l","tag_id":"clyliw09k003ttch8aa8ieeud","_id":"clyliw09m0048tch8hjjg1go4"},{"post_id":"clyliw09m0044tch8dpy18o2l","tag_id":"clyliw09k003ytch8edfmd9ll","_id":"clyliw09m004atch8cjafb72c"},{"post_id":"cm018kvi800009gh8333t8lez","tag_id":"clyliw09k003ttch8aa8ieeud","_id":"cm018kvib00019gh8age20384"},{"post_id":"cm018kvi800009gh8333t8lez","tag_id":"clyliw09k003ytch8edfmd9ll","_id":"cm018kvib00029gh82o2x8i62"}],"Tag":[{"name":"算法","_id":"clyliw08q0005tch84cbxdddg"},{"name":"JS","_id":"clyliw08u000dtch83ig65k98"},{"name":"API","_id":"clyliw08w000ktch8896t41d0"},{"name":"前端工程化","_id":"clyliw090000vtch8ae6ebz61"},{"name":"npm","_id":"clyliw0920012tch828yp2zx3"},{"name":"typescript","_id":"clyliw095001itch89tip3wo8"},{"name":"TS","_id":"clyliw097001ntch8hidx4ln0"},{"name":"模块化","_id":"clyliw099001ytch8733b5x0m"},{"name":"JS进阶","_id":"clyliw09a002ctch85say1why"},{"name":"angular","_id":"clyliw09c002rtch860qi2qtp"},{"name":"browser","_id":"clyliw09d002wtch82n4nh4vm"},{"name":"有趣的问题","_id":"clyliw09e0038tch8b5i8euy9"},{"name":"vue","_id":"clyliw09k003ttch8aa8ieeud"},{"name":"sourceCode","_id":"clyliw09k003ytch8edfmd9ll"}]}}